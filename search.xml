<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[基于Django & Channels & WebSocket & Twisted的物联网远程控制]]></title>
      <url>http://dequn.github.io/2018/06/19/django-channels-websocket-iot-remote-control/</url>
      <content type="html"><![CDATA[<p>公司业务需要开发IOT从硬件到软件的全部工作，由于一开始来的硬件工程师选择了基于TCP直接进行终端与控制中心交互，自己设计报文内容与格式，所以远程控制也需要自己实现。还是自己太年轻，放着好好的现成的MQTT协议不用，自己瞎折腾。</p>
<p>硬件终端与服务器的通讯模块采用的是普通的2G卡，这样才能与自己的服务器直接通信（电信的物联网卡只能连接华为云，移动的物联网卡只能连接Oneconnect云平台，然后再对接自己的业务系统）。为了节省终端电池电量，终端5分钟唤醒一次连接服务器上报数据，也就是在这个时候，需要服务器查询控制任务队列，下发给下位机。所以，这里有下面几个工作需要完成：</p>
<ul>
<li>前端用户界面操作，发送任务给后端服务器（React + Django)，随后等待得到控制结果状态</li>
<li>后端创建任务（写Redis)</li>
<li>下位机每5分钟连接一次上位机，上位机（Twisted）查询任务队列（Redis），将对应的任务下发给下位机，下位机获取控制报执行相应操作后，返回控制结果给上位机</li>
<li>上位机返回控制结果给web后端(Redis 发布)，后端监听服务（订阅 Redis）返回给前端（WebSocket）</li>
<li>前端拿到结果，UI反馈给用户</li>
</ul>
<p>其中，不是必须通过Web后端才可以给硬件的上位机发送任务（这里是Twisted进程），比如本身就可以使用<a href="https://github.com/crossbario/autobahn-python" target="_blank" rel="noopener">autobahn-python</a>直接搭建一个WAMP，其运行在Twisted上，就可以省去一步交互了。由于在这个项目中涉及到权限验证、开关抽象（一个下位机有多个开关）等工作，所以还把这层放在Django中，反而省去很多开发。</p>
<p>另外需要说明一下为什么web前后端之间用WebSocket，因为这里的任务相当于<strong>异步任务</strong>，前后端都不知道下位机执行任务的准确时间，除了前端轮询的解决方案，最好的就是建立一个双工长连接，这样当web后端一旦知道任务结果，就可以主动发送给前端，因此WebSocket是最合适的方案。当然，Django本身不支持长连接，幸得有大牛开发了<a href="https://github.com/django/channels" target="_blank" rel="noopener">channels</a>，使得我们可以基于Django开发WebSocet服务，并且还支持异步！</p>
<p>以上的过程画成图是这样的!</p>
<p><img src="http://obqjd695a.bkt.clouddn.com/blog/iot-remote-control-sequence.png" alt="iot-remote-control-sequence"></p>
<p>补充：</p>
<ul>
<li>任务队列是写Redis</li>
<li>注意任务队列消费过后，要删除（即此次任务已执行，不论结果成功与否）</li>
<li>Django Channels需要建立一个后台监听服务（<a href="https://channels.readthedocs.io/en/latest/topics/channel_layers.html#using-outside-of-consumers" target="_blank" rel="noopener">Channel layers using outside of consumer</a>），第一时间通知给web前端</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Channels </tag>
            
            <tag> WebSocket </tag>
            
            <tag> IOT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django-allauth配置微信登陆]]></title>
      <url>http://dequn.github.io/2018/06/12/django-allauth-weixin-login/</url>
      <content type="html"><![CDATA[<p><a href="https://django-allauth.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">django-allauth</a>很方便地继承了第三方登陆的功能，但其说明文档并不是很详细，配置一个demo都捉摸了好长时间，这里就以微信订阅号登陆为例，详细地说明一下配置过程，以供其他新上手地小伙伴参考。</p>
<h1 id="获取微信订阅号开发appid"><a href="#获取微信订阅号开发appid" class="headerlink" title="获取微信订阅号开发appid"></a>获取微信订阅号开发appid</h1><p>微信公众平台提供了一个测试号方便开发，登陆<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index</a>即可获得一个appID和appsecret，这里但URL和Token都先可以留空，找到下边的<strong>网页授权获取用户基本信息</strong>，点击右侧的修改，测试号可以填写ip地址，这里为填写的是本地开发时候的本机ip:port, <strong>注意：这个地址是要会出现在回掉地址redirect_url中的，不一致将不能正确授权</strong>。【参考：<a href="https://www.cnblogs.com/0201zcr/p/5131602.html" target="_blank" rel="noopener">微信公众平台开发——微信授权登录（OAuth2.0）</a>】</p>
<p><img src="http://obqjd695a.bkt.clouddn.com/blog/django-allauth/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E6%B5%8B%E8%AF%95%E5%8F%B7.png" alt="微信公众平台测试号"></p>
<p><img src="http://obqjd695a.bkt.clouddn.com/blog/django-allauth/%E6%89%BE%E5%88%B0%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF.png" alt="找到网页获取用户基本信息"></p>
<p><img src="http://obqjd695a.bkt.clouddn.com/blog/django-allauth/%E5%A1%AB%E5%86%99%E5%9F%9F%E5%90%8D.png" alt="填写域名"></p>
<h1 id="安装配置django-allauth"><a href="#安装配置django-allauth" class="headerlink" title="安装配置django-allauth"></a>安装配置django-allauth</h1><p>django-allauth 的Doc已经把<a href="https://django-allauth.readthedocs.io/en/latest/installation.html" target="_blank" rel="noopener">安装过程</a>解释的很详细了，就不再重复，只说明一下比较容易出错的地方。</p>
<h2 id="site设置"><a href="#site设置" class="headerlink" title="site设置"></a>site设置</h2><p>django-allauth要求设置站点号，如果已经跟着安装过程进行到这一步的话，需要打开django的后台管理程序，会有一个设置好的site(example.com)。</p>
<h2 id="django-allauth-Social-applications设置"><a href="#django-allauth-Social-applications设置" class="headerlink" title="django-allauth Social applications设置"></a>django-allauth Social applications设置</h2><p>在后台管理找到Social applications，点击添加，把第一步在微信公众平台获取的appid和appsecret填进去，并选择刚刚设置的站点，保存，站点名称不一定需要与微信公众平台填写的一致，这里刚开始理解错了。【参考: <a href="http://www.marinamele.com/user-authentication-with-google-using-django-allauth" target="_blank" rel="noopener">Part VIII – User Authentication with a Google Account using Django Allauth</a>】</p>
<p><img src="http://obqjd695a.bkt.clouddn.com/blog/django-allauth/%E6%B7%BB%E5%8A%A0social%20application.png" alt="添加social application"></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>下载一个<a href="https://mp.weixin.qq.com/wiki?action=doc&amp;id=mp1455784140" target="_blank" rel="noopener">微信web开发者工具</a>，输入微信登陆的地址<a href="http://10.0.0.8:8000/accounts/weixin/login/" target="_blank" rel="noopener">http://10.0.0.8:8000/accounts/weixin/login/</a> ，会提示授权、登陆（<code>/accounts/weixin/</code>路径是在django.settings文件中配置的），至此配置结束，在django后台中，可以看到Social accounts和Users两个表新增刚刚登陆的微信用户（allauth默认设置，参考<a href="https://django-allauth.readthedocs.io/en/latest/configuration.html" target="_blank" rel="noopener">Configuration</a>），测试完成！</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li><p>微信公众平台中设置的域名，要和请求授权url中的回掉参数redirect_uri的域名是一模一样的。如果微信公众平台上的是线上域名，本地测试可以修改hosts文件。</p>
</li>
<li><p>如果使用allauth.weixin的登陆url，也就是<code>accounts/weixin/login</code>(跟着allauth的文档示例会配置成这样的），那么django的域名一定要与微信公众平台上设置的一致，否则默认的回掉地址是<code>django-domain/accounts/weixin/login/callback</code>，微信授权页面不能正常加载。</p>
</li>
<li><p>django-allauth的微信配置（我这里配置的是公众号内网页授权，不是pc端扫描二维码授权）。</p>
</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SOCIALACCOUNT_PROVIDERS = &#123;</span><br><span class="line">    <span class="string">'weixin'</span>: &#123;</span><br><span class="line">        <span class="string">'AUTHORIZE_URL'</span>: <span class="string">'https://open.weixin.qq.com/connect/oauth2/authorize'</span>,</span><br><span class="line">        <span class="string">'SCOPE'</span>: [<span class="string">'snsapi_userinfo'</span>],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p>[1]. <a href="https://django-allauth.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">django-allauth</a><br>[2]. <a href="https://www.cnblogs.com/0201zcr/p/5131602.html" target="_blank" rel="noopener">微信公众平台开发——微信授权登录（OAuth2.0）</a><br>[3]. <a href="http://www.marinamele.com/user-authentication-with-google-using-django-allauth" target="_blank" rel="noopener">Part VIII – User Authentication with a Google Account using Django Allauth</a><br>[4]. <a href="https://django-allauth.readthedocs.io/en/latest/configuration.html" target="_blank" rel="noopener">Configuration</a><br>[5]. <a href="https://mp.weixin.qq.com/wiki?action=doc&amp;id=mp1455784140" target="_blank" rel="noopener">微信web开发者工具</a><br>[6]. <a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">网站应用微信登录开发指南</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> allauth </tag>
            
            <tag> 微信 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django2结合Celery添加定时任务]]></title>
      <url>http://dequn.github.io/2018/06/02/django-celery/</url>
      <content type="html"><![CDATA[<p>项目需要对一些观测数值做监控预警，没有找到特别合适的专门的开源项目，因此决定采用Celery实现任务调度，当然，除了Cerlery，还有就是可以采用APScheduler实现，也有<a href="https://github.com/jarekwg/django-apscheduler" target="_blank" rel="noopener">django-apscheduler</a>的开源项目利用Django的ORM存储APScheduler的任务和调度信息，但是APScheduler并没有那么灵活，比如要想修改例行信息，是需要修改源代码并且重启Django进程才可以，也正是参考了这个<a href="https://stackoverflow.com/questions/11654353/how-to-setup-apscheduler-in-a-django-project/15929907" target="_blank" rel="noopener">Stackoverflow问题</a>，才决定选用Celery来调度任务。</p>
<p>关于Celery的定义，我想其项目网站主页的标题最为精确不过了——<strong>Distributed Task Queue</strong>，这里只简单的介绍一下Celery的工作模式，其他的使用细节可以参看网上的大量文章，不过建议以项目本身的文档为主，最为权威，尤其是在现在网络文章互相抄来抄去，质量极低！</p>
<p>Celery是一个分布式任务队列，那么就需要一个Broker也就是经纪人（我看好多人翻译成中间人，觉得好low啊）来存储和分发任务消息，Worker是实际执行任务的角色，Worker进程启动后，从经纪人那里读取并执行相应任务，任务是一早定义好的，可以手动调用，也可以用CelerBeat实现例行。如果了解生产者消费者模型的话，Worker对应消费者，CeleryBeat对应生产者。</p>
<p>也已经有开源项目<a href="https://github.com/celery/django-celery" target="_blank" rel="noopener">django-celery</a>，使得可以很方便的在Django中添加Celery任务，但是这个项目目前不支持Django 2及以上，原因是Celery调用的kombu库会抛出一个<code>missing 1 required positional argument: on_delete</code>的错误，而恰是在Django 2的时候，<code>on_delete</code>改成了必须字段，由于是Docker配置的开发环境，也懒得去修改镜像，因为Celery 本身就有对Django的支持，所以就自己动手，并不复杂。</p>
<p>具体的过程可以参考<a href="https://medium.com/@markgituma/using-django-2-with-celery-and-redis-21343284827c" target="_blank" rel="noopener">Using Django 2 with Celery and Redis</a> 和 官方文档<a href="http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html" target="_blank" rel="noopener">Using Celery with Django</a>，很简单就不上代码了，<strong>这里有一个很深的坑</strong>，celery.py中配置了任务自动发现<code>app.autodiscover_tasks()</code>，但<strong>在各个app中定义任务的模块名一定要是tasks，也就是示例代码中定义了任务的文件名一定要是tasks.py，而不能是其他的任何名称</strong>，因为自己尝试的时候手残敲错了，调试了很久才发现！</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> app1/</span></span><br><span class="line"><span class="ruby">    - tasks.py</span></span><br><span class="line"><span class="ruby">    - models.py</span></span><br><span class="line"><span class="ruby">- app2/</span></span><br><span class="line"><span class="ruby">    - tasks.py</span></span><br><span class="line"><span class="ruby">    - models.py</span></span><br></pre></td></tr></table></figure>
<p>另外还有一个需要注意的问题就是调用任务时<strong>任务的name</strong>该如何写，从哪一层模块开始也至关重要，<a href="http://docs.celeryproject.org/en/latest/userguide/tasks.html#task-naming-relative-imports" target="_blank" rel="noopener">task-naming-relative-imports</a>解释了why and how，这一点很多其他文章都没提及，也是容易出现的一个坑。具体放在Django中，以app1中任务为例，也就是在<code>INSTALLED_APPS</code>中添加的是app1，那么调用的时候要用到的任务名称就是<code>app1.tasks.task1</code>，也可以是嵌套的类如<code>app1.app2.tasks.task1</code>。</p>
<p>写了一个简单的<a href="https://github.com/dequn/django2-celery-demo" target="_blank" rel="noopener">django2-celery-demo</a>，以供参考。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1]. <a href="https://stackoverflow.com/questions/11654353/how-to-setup-apscheduler-in-a-django-project/15929907" target="_blank" rel="noopener">Stackoverflow: How to setup APScheduler in a Django project?</a><br>[2]. <a href="https://github.com/celery/django-celery" target="_blank" rel="noopener">django-celery</a><br>[3]. <a href="https://github.com/jarekwg/django-apscheduler" target="_blank" rel="noopener">django-apscheduler</a><br>[4]. <a href="https://medium.com/@markgituma/using-django-2-with-celery-and-redis-21343284827c" target="_blank" rel="noopener">Using Django 2 with Celery and Redis</a><br>[5]. <a href="http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html" target="_blank" rel="noopener">Using Celery with Django</a><br>[6]. <a href="http://docs.celeryproject.org/en/latest/userguide/tasks.html#task-naming-relative-imports" target="_blank" rel="noopener">task-naming-relative-imports</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Celery </tag>
            
            <tag> APScheduler </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python3调用twisted web request的坑]]></title>
      <url>http://dequn.github.io/2018/05/31/python3-twisted-web-client/</url>
      <content type="html"><![CDATA[<p>硬件终端发送数据给服务器采用的是TCP直接传输，自己定义了二进制数据流格式，选来选去采用了Twisted开发TCP服务器。在数据外露的时候，采用Django开发了一个网站，因为在Django中已经定义了数据模型，不能也不想定义两次数据模型，所以Twisted接收到数据时，调用Django的REST接口保存数据到数据库，这就需要用到Twisted web client 发送数据。<a href="https://stackoverflow.com/questions/5051408/sharing-a-database-between-twisted-and-django" target="_blank" rel="noopener">该回答</a> 分析了在Twisted和Django中“共享数据库”的几种方法。</p>
<p>注：Twisted到最大优势在于异步非阻塞，而Django采用的是同步处理，如果直接引入Django的数据模型，这种同步处理放在Twisted的deferred里会让Twisted的优势丧失，所以采用了异步调用其他服务的方式。之所以现在采用Django进行网站开发，是因为现在是项目初期，能够快速开发落地是第一需求，但同时也兼顾到以后性能升级，所以保证各个模块的低耦合。</p>
<p>环境信息：</p>
<ul>
<li>Python 3.6.5</li>
<li>Twisted 18.4.0</li>
<li>Django 2.0.5</li>
</ul>
<p>关于Twisted web client<a href="https://twistedmatrix.com/documents/14.0.1/web/howto/client.html" target="_blank" rel="noopener">官网</a>给出了很详细的示例，但跟着实验下来的情况竟然是没有反应，服务器根本都没接到任何请求！</p>
<p>程序（参考官方示例）报的第一个错误是<code>TypeError: url must be bytes, not unicode</code>，没在意直接在url的字面量前加了一个<code>b</code>，其实这给后来的debug带来了极大的困难，因为一切都是按照示例写的，而根本看不到发送请求，没有版本只能再去翻看Twisted 的<a href="https://twistedmatrix.com/documents/14.0.1/api/twisted.web.iweb.IAgent.html#request" target="_blank" rel="noopener">API DOC</a>了，这才发现，原来在Python3中，request的绝大多数参数要求是<code>bytes</code>类型，而示例其实是Python2的代码，把所有字符串都转换成<code>bytes</code>，问题解决。</p>
<p>还有一点需要特别注意的是，request请求的url必须带上<code>http://</code>协议前缀，不然服务器端也是接收不到请求的！</p>
<p>最后，刚开始写Python3的代码，还真是有些不适应，一些细节需要特别注意。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1]. <a href="https://twistedmatrix.com/documents/14.0.1/api/twisted.web.iweb.IAgent.html#request" target="_blank" rel="noopener">https://twistedmatrix.com/documents/14.0.1/api/twisted.web.iweb.IAgent.html#request</a><br>[2]. <a href="https://stackoverflow.com/questions/5051408/sharing-a-database-between-twisted-and-django" target="_blank" rel="noopener">Sharing a database between Twisted and Django</a><br>[3]. <a href="https://twistedmatrix.com/documents/14.0.1/web/howto/client.html" target="_blank" rel="noopener">Using the Twisted Web Client</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python3 </tag>
            
            <tag> Twisted </tag>
            
            <tag> web </tag>
            
            <tag> request </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker的OS image是做什么用的]]></title>
      <url>http://dequn.github.io/2018/04/01/why-docker-has-OS-image/</url>
      <content type="html"><![CDATA[<p>这两天闲来无事，简单入门了一下Docker。主要参考的有阮一峰老师的两篇文章——<a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 入门教程</a>、<a href="http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html" target="_blank" rel="noopener">Docker 微服务教程</a>和 yeasy的开源项目<a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">Docker — 从入门到实践</a>，照葫芦画瓢简单入门，不过离真正理解认清楚容器的特点、必要性，如何实践在持续交付和部署以及容器云等实际的运维应用还有很长的路要走。当我看到Docker 的OS image例如CentOS/Fedora、Busybox、Alphine等镜像的时候，不禁怀疑，既然我可以docker pull一个很简单命令就可以实现如Nginx, mysql等微服务的启动和部署，那为什么还会存在这些OS image, 这些OS image 的作用是什么？</p>
<p>在解决这个问题之前，首先需要明白几个和容器以及OS相关的定义，英文比较简单，直接从<a href="http://www.floydhilton.com/docker/2017/03/31/Docker-ContainerHost-vs-ContainerOS-Linux-Windows.html" target="_blank" rel="noopener">Understanding Docker “Container Host” vs. “Container OS” for Linux and Windows Containers</a>粘过来了，也强烈建议看看这篇文章，对于理解”OS”很有帮助。</p>
<blockquote>
<p><strong>Container Host</strong>: Also called the Host OS. The Host OS is the operating system on which the Docker client and Docker daemon run. In the case of Linux and non-Hyper-V containers, the Host OS shares its kernel with running Docker containers. For Hyper-V each container has its own Hyper-V kernel.<br> <strong>Container OS</strong>: Also called the Base OS. The base OS refers to an image that contains an operating system such as Ubuntu, CentOS, or windowsservercore. Typically, you would build your own image on top of a Base OS image so that you can take utilize parts of the OS. Note that windows containers require a Base OS, while Linux containers do not.<br> <strong>Operating System Kernel</strong>: The Kernel manages lower level functions such as memory management, file system, network and process scheduling.</p>
</blockquote>
<h2 id="菜鸟回答"><a href="#菜鸟回答" class="headerlink" title="菜鸟回答"></a>菜鸟回答</h2><p>基于以上信息，已经可以给出我这种菜鸟回答了：Docker的每一个镜像都必须有一个Base OS, 这个Base OS 可以是 Linux 的发行版，也可以是windows的，上边已经提到，这个Base OS 在Host OS 是Linux的时候可以“不必要”，其实，是一种特殊的Base OS 叫做<a href="https://hub.docker.com/r/library/scratch/" target="_blank" rel="noopener">scratch</a>，文章<a href="https://docs.docker.com/develop/develop-images/baseimages/" target="_blank" rel="noopener">Create a base image</a>给出了如何基于scratch创建一个Base Image（Base image 和 Base OS image 不是一样的概念!）。</p>
<p>我们所使用的常见的image，基本上都是以一个Host OS image为base的， 暨Dockerfile中都会有类似<code>FROM debian:stretch-slim</code>的基于OS image的语句。以nginx 为例，nginx既有基于debian也有基于alpine的镜像，tag分别是nginx:version和nginx:version-alpine，查看其Dockerfile可以看出，最大的不同点在于一个是<code>FROM debian:stretch-slim</code>和<code>FROM alpine:3.7</code>。下载镜像，可以看出其大小的区别，不得不说，基于alpine的和基于debian的镜像大小确实不是一个量级的。文章<a href="https://www.brianchristner.io/docker-image-base-os-size-comparison/" target="_blank" rel="noopener">Docker Base Image OS Size Comparison</a>对不同的Base OS image大小做了一个对比，感兴趣的可以看一看。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               <span class="number">1.13</span><span class="number">.10</span>-alpine      <span class="number">91</span>ce6206f9d8        <span class="number">10</span> days ago         <span class="number">18</span>MB</span><br><span class="line">nginx               <span class="number">1.13</span><span class="number">.10</span>             <span class="number">7</span>f70b30f2cc6        <span class="number">10</span> days ago         <span class="number">109</span>MB</span><br></pre></td></tr></table></figure>
<h2 id="再进一步"><a href="#再进一步" class="headerlink" title="再进一步"></a>再进一步</h2><p>文章<a href="https://blog.risingstack.com/operating-system-containers-vs-application-containers/" target="_blank" rel="noopener">Operating System Containers vs. Application Containers</a>讲述了虚拟机和容器的实现上的区别，可以很明白地看到，容器是直接基于Host OS kernel的，这也就是为什么在Mac和Windows上的Docker Client是基于Linux VM的<a href="https://docs.docker.com/develop/develop-images/baseimages/" target="_blank" rel="noopener">[5]</a>。在文章<a href="http://www.floydhilton.com/docker/2017/03/31/Docker-ContainerHost-vs-ContainerOS-Linux-Windows.html" target="_blank" rel="noopener">[4]</a>也可以看到，如果是Windows类型的容器，是必须建立在Winndows type的Base image上，或者是一个完整的“虚拟机容器”。</p>
<p><img src="http://obqjd695a.bkt.clouddn.com/os-virtualization.jpg" alt=""></p>
<p><a href="https://serverfault.com/questions/659557/os-docker-container-what-is-the-difference-with-a-vm-then" target="_blank" rel="noopener">Stackoverflow</a> 上有一个回答挺不错的，解释了为什么会有Base image，同样贴出原文，可以很明白的看到，Base image 提供的正式容器运行需要的<strong> root filesystem</strong>。</p>
<blockquote>
<p>Now you should wonder how is it possible to get a process runing inside a linux base image different from the linux distribution your host is running with. For an OS to run you basically need : </p>
<ul>
<li>A boot filesystem : contains the bootloader and the kernel that will reside in memory once loaded. We don’t care about this in the case of Docker containers because the kernel is shared with the host and is the common part between all linux distributions.</li>
<li>A root filesystem : contains the filesystem structure. It may be different from one linux distribution to another. It’s read-only until the boot sequence has finished.</li>
</ul>
</blockquote>
<p>如果从Docker的分层架构上来看<a href="https://blog.risingstack.com/operating-system-containers-vs-application-containers/" target="_blank" rel="noopener">[8]</a>，为什么需要Base image也会明朗许多。 在另一个 <a href="https://serverfault.com/questions/755607/why-do-we-use-a-os-base-image-with-docker-if-containers-have-no-guest-os" target="_blank" rel="noopener">Stackoverflow</a>上同样有一个不错的回答，这个回答中说的是<strong>userland</strong>，感兴趣的也可以看一下。</p>
<p><img src="http://obqjd695a.bkt.clouddn.com/docker-layers.png" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 入门教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html" target="_blank" rel="noopener">Docker 微服务教程</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">Docker — 从入门到实践</a></li>
<li><a href="http://www.floydhilton.com/docker/2017/03/31/Docker-ContainerHost-vs-ContainerOS-Linux-Windows.html" target="_blank" rel="noopener">Understanding Docker “Container Host” vs. “Container OS” for Linux and Windows Containers</a></li>
<li><a href="https://docs.docker.com/develop/develop-images/baseimages/" target="_blank" rel="noopener">Create a base image</a> </li>
<li><a href="https://www.brianchristner.io/docker-image-base-os-size-comparison/" target="_blank" rel="noopener">Docker Base Image OS Size Comparison</a></li>
<li><a href="https://blog.risingstack.com/operating-system-containers-vs-application-containers/" target="_blank" rel="noopener">Operating System Containers vs. Application Containers</a></li>
<li><a href="https://serverfault.com/questions/659557/os-docker-container-what-is-the-difference-with-a-vm-then" target="_blank" rel="noopener">OS docker container: what is the difference with a VM then?</a></li>
<li><a href="https://serverfault.com/questions/755607/why-do-we-use-a-os-base-image-with-docker-if-containers-have-no-guest-os" target="_blank" rel="noopener">Why do we use a OS Base Image with Docker if containers have no Guest OS?</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解python with语句]]></title>
      <url>http://dequn.github.io/2017/12/02/%E7%90%86%E8%A7%A3python-with%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<p>Python中的with语句可谓是相当的好用了，省去了<code>try...finally...</code>的复杂写法，<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-pythonwith/index.html" target="_blank" rel="noopener">浅谈 Python 的 with 语句</a> 一文写的已经非常详细里，解决了使用过程中的两点疑问。文中的代码清单也主要摘自这篇文章。</p>
<p>清单1: with语句执行过程<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">context_manager = context_expression</span><br><span class="line"><span class="keyword">exit</span> = type(context_manager).__exit__  </span><br><span class="line">value = type(context_manager).__enter__(context_manager)</span><br><span class="line">exc = True   <span class="comment"># True 表示正常执行，即便有异常也忽略；False 表示重新抛出异常，需要对异常进行处理</span></span><br><span class="line">try:</span><br><span class="line">    try:</span><br><span class="line">        target = value  <span class="comment"># 如果使用了 as 子句</span></span><br><span class="line">        with-body     <span class="comment"># 执行 with-body</span></span><br><span class="line">    except:</span><br><span class="line">        <span class="comment"># 执行过程中有异常发生</span></span><br><span class="line">        exc = False</span><br><span class="line">        <span class="comment"># 如果 __exit__ 返回 True，则异常被忽略；如果返回 False，则重新抛出异常</span></span><br><span class="line">        <span class="comment"># 由外层代码对异常进行处理</span></span><br><span class="line">        <span class="keyword">if</span> not <span class="keyword">exit</span>(context_manager, *sys.exc_info()):</span><br><span class="line">            raise</span><br><span class="line">    finally:</span><br><span class="line">        <span class="comment"># 正常退出，或者通过 statement-body 中的 break/continue/return 语句退出</span></span><br><span class="line">        <span class="comment"># 或者忽略异常退出</span></span><br><span class="line">        <span class="keyword">if</span> exc:</span><br><span class="line">            <span class="keyword">exit</span>(context_manager, None, None, None) </span><br><span class="line">            <span class="comment"># 缺省返回 None，None 在布尔上下文中看做是 False</span></span><br></pre></td></tr></table></figure></p>
<p>从上边的逻辑可以看出，1.如果with语句块发生异常，那么执行except中的流程释放资源，并根据<code>exit()</code>函数返回值决定是否向上抛出异常；2.如果执行过程无异常，那么走finally中的逻辑释放资源。</p>
<h2 id="1-还用不用处理异常？"><a href="#1-还用不用处理异常？" class="headerlink" title="1. 还用不用处理异常？"></a>1. 还用不用处理异常？</h2><p>异常是必须处理的, with语句解决的只是保证了finally中的语句的执行，在with语句块内发生了异常而有没有处理，那么会直接执行with所代替的finally中的语句，并抛出异常给外层上下文，和正常情况下的异常处理流程是一样的。</p>
<h2 id="2-如果-exit-内部异常？"><a href="#2-如果-exit-内部异常？" class="headerlink" title="2. 如果__exit__内部异常？"></a>2. 如果<code>__exit__</code>内部异常？</h2><p>引用文章<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-pythonwith/index.html" target="_blank" rel="noopener">浅谈 Python 的 with 语句</a> 中的解释:</p>
<blockquote>
<p>退出与上下文管理器相关的运行时上下文，返回一个布尔值表示是否对发生的异常进行处理。参数表示引起退出操作的异常，如果退出时没有发生异常，则3个参数都为None。如果发生异常，返回<br>True 表示不处理异常，否则会在退出该方法后重新抛出异常以由 with 语句之外的代码逻辑进行处理。如果该方法内部产生异常，则会取代由 statement-body 中语句产生的异常。要处理异常时，不要显示重新抛出异常，即不能重新抛出通过参数传递进来的异常，只需要将返回值设置为 False 就可以了。之后，上下文管理代码会检测是否 <strong>exit</strong>() 失败来处理异常</p>
</blockquote>
<p>通过例子来看一下：</p>
<ul>
<li>with语句块异常，但正确释放资源</li>
</ul>
<p>清单2: 自定义支持 with 语句的对象</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DummyResource</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, tag)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">self</span>.tag = tag</span><br><span class="line">    print <span class="string">'Resource [%s]'</span> % tag</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">    print <span class="string">'[Enter %s]: Allocate resource.'</span> % <span class="keyword">self</span>.tag</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>   <span class="comment"># 可以返回不同的对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(<span class="keyword">self</span>, exc_type, exc_value, exc_tb)</span></span><span class="symbol">:</span></span><br><span class="line">    print <span class="string">'[Exit %s]: Free resource.'</span> % <span class="keyword">self</span>.tag</span><br><span class="line">    <span class="keyword">if</span> exc_tb is <span class="symbol">None:</span></span><br><span class="line">        print <span class="string">'[Exit %s]: Exited without exception.'</span> % <span class="keyword">self</span>.tag</span><br><span class="line">    <span class="symbol">else:</span></span><br><span class="line">        print <span class="string">'[Exit %s]: Exited with exception raised.'</span> % <span class="keyword">self</span>.tag</span><br><span class="line">    <span class="keyword">return</span> False   <span class="comment"># 可以省略，缺省的None也是被看做是False</span></span><br></pre></td></tr></table></figure>
<p>清单3: with语句块引起异常<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    <span class="keyword">with</span> DummyResource(<span class="symbol">'With</span>-<span class="keyword">Exception</span>'):</span><br><span class="line">         print '[<span class="keyword">with</span>-<span class="keyword">body</span>] Run <span class="keyword">with</span> <span class="keyword">exception</span>.'</span><br><span class="line">         <span class="keyword">raise</span> <span class="keyword">Exception</span>(<span class="symbol">'with</span>-block <span class="keyword">exception</span>')</span><br><span class="line">         print '[<span class="keyword">with</span>-<span class="keyword">body</span>] Run <span class="keyword">with</span> <span class="keyword">exception</span>. Failed to finish statement-<span class="keyword">body</span>!'</span><br><span class="line">except <span class="keyword">Exception</span> as e:</span><br><span class="line">    print e</span><br></pre></td></tr></table></figure></p>
<p>执行上边的代码，可以看到打印的信息，释放完资源后，异常抛出给with外层进行处理，如果外层没有<code>try</code>语句的话，在本例中会由系统打印调用栈并退出。<br>如果<code>__exit__</code>返回True，那么打印信息的最后一行<code>with-block exception</code>将不会被打印，因为with语句释放完资源后，把这个异常“压”下来了。<br>清单4: 正常释放资源，抛出原有异常<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Enter <span class="keyword">With</span>-<span class="keyword">Exception</span>]: Allocate resource.</span><br><span class="line">[<span class="keyword">with</span>-<span class="keyword">body</span>] Run <span class="keyword">with</span> <span class="keyword">exception</span>.</span><br><span class="line">[<span class="keyword">Exit</span> <span class="keyword">With</span>-<span class="keyword">Exception</span>]: Free resource.</span><br><span class="line">[<span class="keyword">Exit</span> <span class="keyword">With</span>-<span class="keyword">Exception</span>]: Exited <span class="keyword">with</span> <span class="keyword">exception</span> raised.</span><br><span class="line"><span class="keyword">with</span>-block <span class="keyword">exception</span></span><br></pre></td></tr></table></figure></p>
<p>稍微对上边的代码修改一下，在<code>__exit__</code>函数中重新抛出一个异常，如清单5，重新执行清单3的调用，得到清单6的结果。<br>清单5：<code>__exit__</code>抛出异常<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, exc_tb)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[Exit %s]: Free resource.'</span> % self.tag</span><br><span class="line">    <span class="keyword">if</span> exc_tb <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[Exit %s]: Exited without exception.'</span> % self.tag</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[Exit %s]: Exited with exception raised.'</span> % self.tag</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'new exception in __exit__'</span>)</span><br></pre></td></tr></table></figure></p>
<p>清单6: <code>__exit__</code>抛出新异常执行结果<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Resource [<span class="keyword">With</span>-<span class="keyword">Exception</span>]</span><br><span class="line">[Enter <span class="keyword">With</span>-<span class="keyword">Exception</span>]: Allocate resource.</span><br><span class="line">[<span class="keyword">with</span>-<span class="keyword">body</span>] Run <span class="keyword">with</span> <span class="keyword">exception</span>.</span><br><span class="line">[<span class="keyword">Exit</span> <span class="keyword">With</span>-<span class="keyword">Exception</span>]: Free resource.</span><br><span class="line">[<span class="keyword">Exit</span> <span class="keyword">With</span>-<span class="keyword">Exception</span>]: Exited <span class="keyword">with</span> <span class="keyword">exception</span> raised.</span><br><span class="line">__exit__ <span class="keyword">exception</span>.</span><br></pre></td></tr></table></figure></p>
<p>可以看出，如果<code>__exit__</code>重新抛出了一个异常，就会覆盖掉原有异常，如果资源正常释放，只需要返回False或者True来表示是否将with语句的异常抛给外层调用。</p>
<h2 id="3-其他使用"><a href="#3-其他使用" class="headerlink" title="3.其他使用"></a>3.其他使用</h2><p>使用contextmanager装饰器、nested函数、closing上下文管理器等语法可以参考<br>【<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-pythonwith/index.html" target="_blank" rel="noopener">浅谈 Python 的 with 语句</a>】或者 【<a href="https://docs.python.org/release/2.6.6/library/contextlib.html" target="_blank" rel="noopener">contextlib — Utilities for with-statement contexts</a>】等文章，不再赘述。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-pythonwith/index.html" target="_blank" rel="noopener">浅谈 Python 的 with 语句</a></li>
<li><a href="https://docs.python.org/release/2.6.6/library/contextlib.html" target="_blank" rel="noopener">contextlib — Utilities for with-statement contexts</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0343/" target="_blank" rel="noopener">PEP 343 – The “with” Statement</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于目前工作的一点感想]]></title>
      <url>http://dequn.github.io/2017/11/21/%E5%85%B3%E4%BA%8E%E7%9B%AE%E5%89%8D%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E7%82%B9%E6%84%9F%E6%83%B3/</url>
      <content type="html"><![CDATA[<p>从7月份入职以来，时时感觉到目前的工作跟我所期望的差别很大，但又不知道该如何取舍。</p>
<p>在面试的时候，经理问我是否愿意从事一些产品相关的工作，由于是岗位是机器学习，所以我想那么即使是产品相关，最起码也是要用到机器学习的，不论是数学层面、算法层面还是架构层面，这样是比较符合我的预期的，所以就签合同入职。可是入职这么久以来，发现当初没有对岗位做更多的了解，是很大的一个坑，这也是校招的同学普遍遇到的一个难点和痛点，除非是在公司以及组内部亲自实习过。</p>
<p>倒不是说这几个月来没有成长，而是在我所期望的技术以及能力层面上收效甚少。除了维护一些遗留下来的旧产品模块儿，就只剩下一个热词了。在入职以后，我也不得不承认自己与科班出身的同学差距比较大，同样的一个东西我可能需要吭哧好久，但是除了一些业务上的熟悉之外，没有得到更多我想要的成长了，而业务上的东西是带不走的，虽然熟悉公司内部的业务很重要。</p>
<p>原本也想着身处一个国内相对较好的技术环境内，再加上自己的学习，肯定能进步特别多。现在看来也是太天真了，团队技术是不错，每两周也会有分享，这些也都是有用的，但是收效也少。最为担心的事情是根本就没有自己的事件，每天醒来上班知道晚上回去，需求特别多，想在自己的方向上进行一些积累就显得欲求无门了。我层怀疑公司内部都是这么忙的，和一个从别的组转岗过来的同学，他说他们原来的组没有这边事情这么多，每天还是有很多自己学习、积累的时间，只有大搜才这么忙。</p>
<p>总说时间是海绵里的水，上高中时班主任也经常说我就是人太懒，当时还很不服气——自觉还不错。现在回想起来，我的自制力确实很弱，比如下班之后我是看不进去任何东西的（尤其是现在），在周六日的时候一个懒觉就占用了很多时间。也可能是我忘记了、放弃了曾经想要的，按现在这种状态下去也必定只能放弃，特别羡慕那些能够白天高效工作、晚上仍能坚持充电的牛人。还有就是白天的效率也不高，总觉得像是被KPI推动的走，没有主动性了。</p>
<p>如果这样久了，就没有跳出现有生活的动力和能力了；如果现在就跳出来，也没有那个能力，更是不能利用好目前这样一个平台。因此，还得必须自制自律，吃得苦中苦，方觉不知苦。</p>
<p>都说不忘初心，方得始终。初心是什么千万不能忘记，而为了初心，也定要付出更多才行！</p>
]]></content>
      
        <categories>
            
            <category> 个人日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工作与初心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python字符串格式化]]></title>
      <url>http://dequn.github.io/2017/10/05/python-str-formation/</url>
      <content type="html"><![CDATA[<p>使用Python的时间也不短了，可是对字符串格式化的方式还是不怎么了解，尤其是对于自定义类型，如何实现友好的格式化输出？</p>
<p>printf-style的字符串格式化”%”号操作符的使用方法就不再赘述了，如果”%”后面不止一个参数，那么需要传入一个tuple，或者是一个dict。</p>
<p>由于”%”使用并不是那么方便，在非dict参数的情况下，tuple需要按照顺序组织，并且同一个参数不能够多次使用[<a href="https://mail.python.org/pipermail/python-3000/2006-April/000285.html" title="[Python-3000] String formating operations in python 3k" target="_blank" rel="noopener">1</a>]。于是就提出了使用模板进行字符串格式化的方法[<a href="https://www.python.org/dev/peps/pep-3101/#id9" title="PEP 3101 -- Advanced String Formatting" target="_blank" rel="noopener">2</a>]。这两种方法有在功能上有一定的重复，如何选择也全看个人喜好。</p>
<p>相对来说，模板格式化字符串功能更为强大和灵活，其语法可以参考[<a href="https://docs.python.org/3/library/string.html#formatstrings" title="string — Common string operations" target="_blank" rel="noopener">3</a>]，下面主要关注自定义类的格式化显示。</p>
<ul>
<li>在使用”%”操作符时，后面的转换字符代表的含义[<a href="https://docs.python.org/3/library/stdtypes.html#string-formatting-operations" target="_blank" rel="noopener">4</a>]:<blockquote>
<p>  ‘r’ String (converts any Python object using repr()).<br>  ‘s’    String (converts any Python object using str()).<br>  ‘a’    String (converts any Python object using ascii()).</p>
</blockquote>
</li>
</ul>
<p>对应的，我们可以定义自定义类的<code>__repr__()</code>、<code>__str__()</code> 来实现格式化输出（<code>ascii()</code>同<code>repr()</code>一样调用<code>__repr__()</code>，但会对non-ASCII字符进行转义，结果形如\x, \u, \U等[<a href="https://docs.python.org/3/library/functions.html#ascii" title="Built-in Functions" target="_blank" rel="noopener">5</a>]）。</p>
<ul>
<li>使用模板格式化时，我们除了可以使用内置的<code>!s</code>、<code>!r</code>、<code>!a</code>转换实现与上边相同的效果外，还可以通过定义类的<code>__format__</code>实现自定义格式化方法，这样就非常灵活了，线面通过例子来看一下。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">class Test:</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'in __str__()'</span></span><br><span class="line"></span><br><span class="line">    def __format__(self, format_spec):</span><br><span class="line">        <span class="keyword">if</span> format_spec == <span class="string">'own1'</span>:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">'in __format__(), own1 method'</span></span><br><span class="line">        <span class="keyword">elif</span> format_spec == <span class="string">'s'</span>:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">'in __format__(), s method'</span></span><br><span class="line">        <span class="keyword">elif</span> format_spec == <span class="string">'h'</span>:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">'in __format__(), h method'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">'in __format__(), default method'</span></span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'in __repr__()'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">test</span> = Test()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">'str(test) shows '</span> + str(<span class="built_in">test</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">'repr(test) shows '</span> + repr(<span class="built_in">test</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">'\n-----------% format ----------'</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">'%%s shows %s'</span> % <span class="built_in">test</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">'%%r shows %r'</span> % <span class="built_in">test</span></span><br><span class="line">    <span class="comment"># print '%%h shows %h' % test # will cause  ValueError: incomplete format</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">'\n---------template format --------'</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">'&#123;&#123;&#125;&#125; shows &#123;&#125;'</span>.format(<span class="built_in">test</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">'&#123;&#123;!r&#125;&#125; shows &#123;!r&#125;'</span>.format(<span class="built_in">test</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">'&#123;&#123;!s&#125;&#125; shows &#123;!s&#125;'</span>.format(<span class="built_in">test</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">'\n---------template use __format__() --------'</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">'&#123;&#123;:s&#125;&#125; shows &#123;:s&#125;'</span>.format(<span class="built_in">test</span>) <span class="comment"># use __format__ s conversion</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">'&#123;&#123;:h&#125;&#125; shows &#123;:h&#125;'</span>.format(<span class="built_in">test</span>) <span class="comment"># use __format__ h conversion</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">'&#123;&#123;:own1&#125;&#125; shows &#123;:own1&#125;'</span>.format(<span class="built_in">test</span>) <span class="comment"># use __format__ own1 conversion</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">'&#123;&#123;:&#125;&#125; shows &#123;:&#125;'</span>.format(<span class="built_in">test</span>) <span class="comment"># use __format__ default conversion</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">str(test) shows <span class="keyword">in</span> __str__()</span><br><span class="line">repr(test) shows <span class="keyword">in</span> __repr__()</span><br><span class="line"></span><br><span class="line">-----------% format ----------</span><br><span class="line">%s shows <span class="keyword">in</span> __str__()</span><br><span class="line">%r shows <span class="keyword">in</span> __repr__()</span><br><span class="line"></span><br><span class="line">---------template format --------</span><br><span class="line">&#123;&#125; shows <span class="keyword">in</span> __format__(),<span class="built_in"> default </span>method</span><br><span class="line">&#123;!r&#125; shows <span class="keyword">in</span> __repr__()</span><br><span class="line">&#123;!s&#125; shows <span class="keyword">in</span> __str__()</span><br><span class="line"></span><br><span class="line">---------template use __format__() --------</span><br><span class="line">&#123;:s&#125; shows <span class="keyword">in</span> __format__(), s method</span><br><span class="line">&#123;:h&#125; shows <span class="keyword">in</span> __format__(), h method</span><br><span class="line">&#123;:own1&#125; shows <span class="keyword">in</span> __format__(), own1 method</span><br><span class="line">&#123;:&#125; shows <span class="keyword">in</span> __format__(),<span class="built_in"> default </span>method</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果只是实现简单的格式化，那么”%”和模板都可以实现，自定义类通过定义<code>__str__()</code>和<code>__repr__()</code>来实现，但如果需要对一个类实现（多种）自定义转换的格式化，那么需要定义类的<code>__format__()</code>方法，并且只能通过使用模板来实现自定义转换的格式化。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://mail.python.org/pipermail/python-3000/2006-April/000285.html" title="[Python-3000] String formating operations in python 3k" target="_blank" rel="noopener">[Python-3000] String formating operations in python 3k</a></li>
<li><a href="https://www.python.org/dev/peps/pep-3101/#id9" title="PEP 3101 -- Advanced String Formatting" target="_blank" rel="noopener">PEP 3101 – Advanced String Formatting</a></li>
<li><a href="https://docs.python.org/3/library/string.html#formatstrings" title="string — Common string operations" target="_blank" rel="noopener">string — Common string operations</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#string-formatting-operations" target="_blank" rel="noopener">https://docs.python.org/3/library/stdtypes.html#string-formatting-operations</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#ascii" title="Built-in Functions" target="_blank" rel="noopener">Built-in Functions</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 格式化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python模块的相对导入和绝对导入]]></title>
      <url>http://dequn.github.io/2017/09/17/ways-of-python-import/</url>
      <content type="html"><![CDATA[<p>刚开始用Python写代码，对于import的方式不是很理解，尤其是导入上层包的模块时，经常会使用<code>sys.path.append(&#39;..&#39;)</code>，然后再import，很不优雅，所以花些时间全部梳理一遍。</p>
<p>首先需要明白明白两个概念<strong>包</strong>和<strong>模块</strong>，很多人也都了解，贴出<a href="http://www.runoob.com/python/python-modules.html" title="http://www.runoob.com/python/python-modules.html" target="_blank" rel="noopener">runoob</a>（页面跟W3C好像，他们有什么关系吗？）上给出的两个定义。</p>
<ul>
<li><p>模块</p>
<blockquote>
<p>Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。<br>模块让你能够有逻辑地组织你的 Python 代码段。<br>把相关的代码分配到一个模块里能让你的代码更好用，更易懂。<br>模块能定义函数，类和变量，模块里也能包含可执行的代码。</p>
</blockquote>
</li>
<li><p>包</p>
<blockquote>
<p>包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。<br>简单来说，包就是文件夹，但该文件夹下必须存在 <code>__init__.py</code> 文件, 该文件的内容可以为空。<code>__int__.py</code>用于标识当前文件夹是一个包。</p>
</blockquote>
</li>
</ul>
<p>从顶层模块（sys.path）或者当前的包中导入模块，使用<code>import module</code>或者<code>from module import xxx</code>的方式就不再赘述，不过有一种使用括号进行的多模块导入方式，如：<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">from</span> from <span class="type">Tkinter</span> <span class="keyword">import</span> (<span class="type">Tk</span>, <span class="type">Frame</span>, <span class="type">Button</span>, <span class="type">Entry</span>, <span class="type">Canvas</span>, <span class="type">Text</span>,</span><br><span class="line">    <span class="type">LEFT</span>, <span class="type">DISABLED</span>, <span class="type">NORMAL</span>, <span class="type">RIDGE</span>, <span class="type">END</span>)</span><br></pre></td></tr></table></figure></p>
<p>这样可以避免使用反斜杠续行，稍微优雅一些，多行的字符串也可以使用一样的括号语法实现。记住，<code>from module import *</code>是绝对的不推荐的，会意外地“污染”命名空间。</p>
<p><strong>相对导入和绝对导入</strong>是这次讨论的重点，在项目中，肯定不意外地会建立不同层级和结构关系的包，那么在这些包之间，我们又应该如何导入要引用的模块？</p>
<h1 id="绝对导入"><a href="#绝对导入" class="headerlink" title="绝对导入"></a>绝对导入</h1><p>在Python 2.4之前，如果使用了<code>import foo</code>，如果当前包内也有一个模块foo，由于解释器是不知道你导入的是顶层模块还是当前包内的模块，根据模块寻找加载的顺序[]，当前包内的foo模块就会覆盖掉顶层的foo模块，而可能引起不必要的歧义。于是要求foo必须是在sys.path中能够寻到的模块或包，这就是绝对导入的定义。python-dev 社区选择将绝对导入作为默认导入的方式，一来是因为更常用，二是因为绝对导入可以提供相对导入的全部功能.</p>
<p>在Python 2.5 和 2.6中，绝对导入是可选的，需要在文件开头添加<code>from __future__ import absolute_import</code>来实现默认的绝对导入。</p>
<h1 id="相对导入"><a href="#相对导入" class="headerlink" title="相对导入"></a>相对导入</h1><p>相对导入是根据模块的<code>__name__</code>属性来决定模块的位置，然后计算相对路径，在同一个项目相邻层级的包和模块中最为常用，也最为方便。关于相对导入的语法实现模式，有一个很有趣也很广泛的讨论，看着那些先驱开发者的讨论，收获也是蛮多的，感兴趣的参考<a href="https://www.python.org/dev/peps/pep-0328/" title="PEP 328 -- Imports: Multi-Line and Absolute/Relative" target="_blank" rel="noopener">PEP 328 – Imports: Multi-Line and Absolute/Relative</a>。最后，Guido采用”.”前缀表示相对导入，和Unix系统中的目录表示含义一样，一个”.”表示当年层级，多一个就表示向上一层。下面是一些例子：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .moduleY <span class="keyword">import</span> spam</span><br><span class="line"><span class="keyword">from</span> .moduleY <span class="keyword">import</span> spam <span class="keyword">as</span> ham</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> moduleY</span><br><span class="line"><span class="keyword">from</span> ..subpackage1 <span class="keyword">import</span> moduleY</span><br><span class="line"><span class="keyword">from</span> ..subpackage2.moduleZ <span class="keyword">import</span> eggs</span><br><span class="line"><span class="keyword">from</span> ..moduleA <span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> ...package <span class="keyword">import</span> bar</span><br><span class="line"><span class="keyword">from</span> ...sys <span class="keyword">import</span> path</span><br></pre></td></tr></table></figure></p>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>相对导入必须使用 <code>from .&lt;&gt; import xxx</code>(并且至少含有一个.符号)的模式，<code>import &lt;&gt;</code>总是绝对导入，当然，如果<code>from &lt;&gt; import</code>中没有句点，那么也是绝对导入。但是类似<code>import .foo</code>的方式是非合法语句，因为<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import XXX<span class="selector-class">.YYY</span><span class="selector-class">.ZZZ</span></span><br></pre></td></tr></table></figure></p>
<p>的<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXX<span class="selector-class">.YYY</span><span class="selector-class">.ZZZ</span></span><br></pre></td></tr></table></figure></p>
<p>是可用的表达式，而<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> .moduleY</span><br></pre></td></tr></table></figure></p>
<p>的<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">.moduleY</span></span><br></pre></td></tr></table></figure></p>
<p>不是一个可用的表达式。</p>
<h1 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h1><p>使用相对导入还是绝对导入，可以完全凭个人喜好。但是为了代码的可阅读性，一般的共识是不超过两层的层级可以使用相对导入，试想一下，如果有超过3个的”.”，还能够正确快速地知道向上到了哪个层级吗?这个时候使用绝对导入会更加方便，代码也更好维护。不论哪一种导入方式，也都会有重构时的麻烦（如重命名一个模块），但是我想在IDE如此普遍使用的情况下，这个因素应该是最不值得考虑的了。加一个TODO吧，参阅一些优秀的开源框架源码，看看他们是如何组织的。</p>
<h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>使用了相对导入以后，如果直接以<code>python script_name.py</code>的方式运行脚本，Python解释器会报<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#python 2</span></span><br><span class="line"><span class="symbol">ValueError:</span> Attempted relative import <span class="keyword">in</span> non-package</span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#python 3</span></span><br><span class="line">SystemError: Parent <span class="keyword">module</span> <span class="string">''</span> <span class="keyword">not</span> loaded, cannot perform relative <span class="keyword">import</span></span><br></pre></td></tr></table></figure></p>
<p>的错误，可以使用<code>python -m script_name.py</code>加上-m开关的方式运行，-m用于告诉解释器以脚本的方式运行模块，具体这样做的原因将在下一篇文章中分析。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://kuanghy.github.io/2016/07/21/python-import-relative-and-absolute" title="Python 相对导入与绝对导入" target="_blank" rel="noopener">Python 相对导入与绝对导入</a></li>
<li><a href="http://www.runoob.com/python/python-modules.html" title="http://www.runoob.com/python/python-modules.html" target="_blank" rel="noopener">http://www.runoob.com/python/python-modules.html</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0328/" title="PEP 328 -- Imports: Multi-Line and Absolute/Relative" target="_blank" rel="noopener">PEP 328 – Imports: Multi-Line and Absolute/Relative</a></li>
<li><a href="http://codingpy.com/article/python-import-101/" title="Python导入模块的几种姿势" target="_blank" rel="noopener">Python导入模块的几种姿势</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> import </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[终端高效切换编码]]></title>
      <url>http://dequn.github.io/2017/09/05/switch-encoding-in-terminal/</url>
      <content type="html"><![CDATA[<p>在以前的时候，终端编码通通设置的都是UTF-8，即使有一两台远程机，因为有自主权也都是UTF-8编码，包括数据库表格，也都是统一UTF-8编码，不得不说这样统一以后非常方便，几乎也没有考虑过编码不同带来的烦恼。</p>
<p>来到公司工作一段时间后才发现，自己的开发机还好说，设置成UTF-8就可以了，保持原有惯例。然而，需要经常登录别的机器看任务跑代码就会发现乱码了，好吧，手动把终端(iTerm2)调到GBK，结束以后再调回来；然后过了没两天，会发现其他机器的Mysql表格也是GBK的，好吧还得暂调GBK。最大的问题还不在于麻烦，我一个终端下连接了多台服务器和数据库，编码都不统一，这可怎么办？</p>
<p>在网上找到了两种方案，第一种是基于iTerm2的，可以参考<a href="http://blog.chenxiaosheng.com/posts/2013-10-29/mac_osx_iterm2_utf8_gbk_switch.html" target="_blank" rel="noopener">Mac OSX iTerm2 终端UTF-8和GBK编码自由切换</a>，虽然我是iTerm2的用户，但是觉得这种方法还是有些麻烦，如果我不用iTerm2还不能解决了？</p>
<p>当然还有其他利器，那就是luit.</p>
<p>参考IBM Knowledge Center上的介绍<a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.cmds3/luit.htm" target="_blank" rel="noopener">luit 命令</a></p>
<blockquote>
<p>luit 命令是一个过滤器，在任意应用程序和 UTF-8 终端仿真器之间运行。luit 命令将应用程序输出从语言环境的编码转换为 UTF-8，并将终端输入从 UTF-8 转换为语言环境的编码。</p>
<blockquote>
<p>注：<br>多语言应用程序必须设置为仅生成 UTF-8 代码。不得使用命令生成 UTF-8 之外的输出。</p>
</blockquote>
</blockquote>
<p>luit的安装也非常简单，参考 <a href="https://blog.jamespan.me/2015/06/12/luit-with-tmux" target="_blank" rel="noopener">Tmux、Luit 杂谈</a>过程如下。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget -c ftp:<span class="comment">//invisible-island.net/luit/luit.tar.gz</span></span><br><span class="line">tar -xzvf luit<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">cd luit-<span class="number">20141204</span>/</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>其使用可以man一下，或者参考<a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.cmds3/luit.htm" target="_blank" rel="noopener">luit 命令</a>，下面简单给出两个示例。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">luit </span>-encoding gbk ssh relay-mechine</span><br><span class="line"><span class="comment"># 这样登录远程机器用的就是GBK编码了</span></span><br></pre></td></tr></table></figure>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">luit </span>-encoding gbk mysql -u mysql_user -p </span><br><span class="line"><span class="comment">#这样连接数据库用的也是GBK编码</span></span><br></pre></td></tr></table></figure>
<p>最后不得不吐槽一下我司，是因为出于历史原因吗，固守GBK阵营？</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.cmds3/luit.htm" target="_blank" rel="noopener">luit 命令</a></li>
<li><a href="https://blog.jamespan.me/2015/06/12/luit-with-tmux" target="_blank" rel="noopener">Tmux、Luit 杂谈</a></li>
<li><a href="http://blog.chenxiaosheng.com/posts/2013-10-29/mac_osx_iterm2_utf8_gbk_switch.html" target="_blank" rel="noopener">Mac OSX iTerm2 终端UTF-8和GBK编码自由切换</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Encoding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python中解析命令行参数]]></title>
      <url>http://dequn.github.io/2017/09/02/parse-command-line-args-in-python/</url>
      <content type="html"><![CDATA[<p>Python中常用的获取命令行参数的方法有三种，分别可适用于不同的场景。</p>
<h1 id="直接从sys-argv中获取"><a href="#直接从sys-argv中获取" class="headerlink" title="直接从sys.argv中获取"></a>直接从sys.argv中获取</h1><p>sys.agrv保存了命令行的参数列表，其中，<code>sys.argv[0]</code>保存的是脚本的名称，所以要获取自己传入的参数时，需要从第二个元素开始，参数的顺序与<code>sys.argv</code>中一致。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># m1.<span class="keyword">py</span></span><br><span class="line">import sys</span><br><span class="line"><span class="keyword">print</span> <span class="string">'The length of sys.argv is %d'</span> % <span class="built_in">len</span>(sys.<span class="built_in">argv</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Argument list: '</span>,str(sys.<span class="built_in">argv</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python m1.py <span class="keyword">first</span> <span class="keyword">second</span> <span class="keyword">third</span></span><br><span class="line">The <span class="built_in">length</span> <span class="keyword">of</span> sys.argv <span class="keyword">is</span> <span class="number">4</span></span><br><span class="line">Argument <span class="built_in">list</span>:  ['m1.py', '<span class="keyword">first</span>', '<span class="keyword">second</span>', '<span class="keyword">third</span>']</span><br></pre></td></tr></table></figure>
<p><strong>获这种方法适用于参数较少的时候，使用者按照固定顺序将所需参数传入即可，同时，取的参数都是str类型，需要用户自行转换为所需类型。</strong></p>
<h1 id="使用getopt-getopt获取参数"><a href="#使用getopt-getopt获取参数" class="headerlink" title="使用getopt.getopt获取参数"></a>使用getopt.getopt获取参数</h1><p>当参数比较多的时候我们可能需要明确指定参数名称，又或者我们可能需要一些可选参数，使用第一种方法就不是那么方便了，所以我们可以用getopt来解析参数，其调用方式如下所示。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">getopt</span><span class="selector-class">.getopt</span>(<span class="selector-tag">args</span>, <span class="selector-tag">options</span>, <span class="selector-attr">[long_options]</span>)</span><br></pre></td></tr></table></figure></p>
<ul>
<li>args是将被解析的参数列表</li>
<li>options是需要识别的参数名列表，当然不一定非得有参数，比如-h用来输出帮助信息，当有对应参数的时候，需要在标识符后边添加一个分号”:”。</li>
<li>long_options可选参数是长参数名列表，如–long-name，当有参数传入的时候，需要在右边添加等号”=”。</li>
</ul>
<p>函数返回一个二元组，第一个元素是（option,value)列表，第二个元素是未识别的参数列表。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#m2.<span class="keyword">py</span></span><br><span class="line">#codin<span class="variable">g:utf</span>-<span class="number">8</span></span><br><span class="line">import sys, getopt</span><br><span class="line"></span><br><span class="line">opts, left_args = getopt.getopt(sys.<span class="built_in">argv</span>[<span class="number">1</span>:], <span class="string">'i:h'</span>, [<span class="string">'in='</span>,<span class="string">'help'</span>]) #第一个参数是脚本名，不传入</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">opt</span>, val in <span class="keyword">opt</span><span class="variable">s:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">opt</span> == <span class="string">'-h'</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'不含参数Help Info'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">opt</span> == <span class="string">'--help'</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'不含参数Help Info2'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">opt</span> == <span class="string">'-i'</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'短参数-i: '</span>, val</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">opt</span> == <span class="string">'--in'</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'长参数--ifile: '</span>, val</span><br><span class="line"><span class="keyword">print</span> <span class="string">'未识别参数：'</span>, str(left_args)</span><br></pre></td></tr></table></figure>
<p>运行结果<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python m2<span class="selector-class">.py</span> -<span class="selector-tag">i</span> short_arg --<span class="keyword">in</span>=long_arg -h --help left_arg</span><br><span class="line">短参数-<span class="selector-tag">i</span>:  short_arg</span><br><span class="line">长参数--ifile:  long_arg</span><br><span class="line">不含参数Help Info</span><br><span class="line">不含参数Help Info2</span><br><span class="line">未识别参数： [<span class="string">'left_arg'</span>]</span><br></pre></td></tr></table></figure></p>
<p>这种方法已经能够应对大多数情况了，不过获取的val仍是str类型。</p>
<h1 id="使用argparse模块解析参数"><a href="#使用argparse模块解析参数" class="headerlink" title="使用argparse模块解析参数"></a>使用argparse模块解析参数</h1><p>argparse 模块最大的特点就是可以建立用户友好的命令行接口，可以实现指定需要传入的参数，自动解析sys.argv，自动生成帮助信息、错误信息等。如果要使用getopt来达到同样的效果，就需要写很多很多的代码啦。</p>
<p>argparse 通过ArgumentParser对象实现参数的解析，可以很友好地实现帮助信息、参数传入前缀、参数冲突等特性，其通过add_argument方法添加具体的参数——包括位置参数和可选参数等，同时可以指定这些参数的个数、转换类型、默认值、限定枚举值、是否必须以及别名等信息。argparse的使用会比上述两个复杂一些，但是其功能更强大、使用更友好一些。具体使用方法可以单独写一篇文章了，但是官方文档已经给出了很详细的示例了，所以这里就不在赘述，感兴趣的可以参阅<a href="https://docs.python.org/2.7/library/argparse.html" target="_blank" rel="noopener">argparse — Parser for command-line options, arguments and sub-commands</a>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上述三个方法从简单到复杂，功能从单一到丰富，开发人员可根据需要选择。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.tutorialspoint.com/python/python_command_line_arguments.htm" target="_blank" rel="noopener">Python Command Line Arguments</a></li>
<li><a href="https://docs.python.org/2.7/library/argparse.html" target="_blank" rel="noopener">argparse — Parser for command-line options, arguments and sub-commands</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> args </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符集、字符编码以及Python中编码的那些事]]></title>
      <url>http://dequn.github.io/2017/08/19/charset-encoding-and-in-python/</url>
      <content type="html"><![CDATA[<p>总会遇到乱码的问题，也总是按照网上的教程一步一步操作，解决的过程就像碰运气，从来没有总结过，再次遇到的时候还是不知道是什么问题，所以，花一点时间，总结一下。</p>
<h1 id="字符集和字符编码"><a href="#字符集和字符编码" class="headerlink" title="字符集和字符编码"></a>字符集和字符编码</h1><p><strong>字符集</strong>是一个系统支持的抽象字符的集合。这个集合是有限集合，包括文字、标点和数字等，由于计算机内部全部都是数字存储，所以字符集本身也是一个符号与数字之间的映射关系，比如ASCII字符集中大写字母A的编号是65。存储或传输的时候计算机根据字符集将人能看懂的字符换算成计算机能看懂的数字，输出的时候再换算成人能看懂的字符。</p>
<p><strong>字符编码</strong>，计算机系统内部全部采用二进制，那么将数字转换成二进制的时候采用什么规则呢，比如采用几位，高位代表什么，低位代表什么等，这就是所谓的编码规则。</p>
<p><strong>乱码</strong>，计算机按照指定或默认的编码规则对bit位进行解码，由于与存储或接收时使用的编码规则不一致，就导致了翻译出来的字符不是原来的字符，造成所谓的乱码，即我们人类看不懂。</p>
<h1 id="常用的字符集和字符编码"><a href="#常用的字符集和字符编码" class="headerlink" title="常用的字符集和字符编码"></a>常用的字符集和字符编码</h1><p>常见的字符集有ASCII，能表示128个字符，扩展ASCII能表示256个字符，GBXXX字符集是我国专家设计的一套字符集，还有包括繁体字的汉字字符集BIG5，这些字符集同时规定了编码规则，所以他们<strong>同时也是字符编码</strong>，需要说明的是，他们都是兼容ASCII编码的。</p>
<h1 id="Unicode-和-UTF-8"><a href="#Unicode-和-UTF-8" class="headerlink" title="Unicode 和 UTF-8"></a>Unicode 和 UTF-8</h1><p>最容易搞混的是Unicode和UTF-8了，因为像上面那样每个语言或者地区都搞一套，在互联网中普及非常不便，于是就出现了<strong>Unicode字符集</strong>，目前已经超过了十万字符，可以包括多种文字，这个字符集规定了符号系统到数字的映射，但是并没有规定统一的编码规则。</p>
<p>UTF-8，UTF-16，UTF-32都是Unicode的编码规则，其中UTF-32同意采用4个字节表示字符，空间浪费较大，所以不常见，UTF-8是一种变长的编码方式，因为文本的重点不在于关注编码规则的细节，所以就不再赘述，具体实现可以参见其他作者的文章。</p>
<p><strong>所以，我们常见的GBXXX,ASCII,BIG5等本身即是指代字符集，也是字符编码，而Unicode只是字符集，UTF-8只是字符编码。</strong></p>
<h1 id="Python-中的编码"><a href="#Python-中的编码" class="headerlink" title="Python 中的编码"></a>Python 中的编码</h1><p>这里主要有三个问题：</p>
<ol>
<li>str和unicode类型有什么区别？</li>
<li>源文件开头的#coding:utf-8是做什么用的，跟源文件的编码有什么关系？</li>
<li>源文件的编码对程序有没有影响？</li>
<li>file = open(‘xxx’),file.read()是怎样对文件进行解码的？</li>
</ol>
<p>首先来看第一个问题，再Python2中，通过<code>s1=&#39;str字符串&#39;</code>得到的是str对象，而<code>s2=u&#39;unicode字符串&#39;</code>得到的是unicode对象，这两种都是<code>basestring</code>类型的子类，从官方文档<a href="https://docs.python.org/2/howto/unicode.html" target="_blank" rel="noopener">Unicode HOWTO</a>中的解释</p>
<blockquote>
<p>Python represents Unicode strings as either 16- or 32-bit integers, depending on how the Python interpreter was compiled.</p>
</blockquote>
<p>可以看出，unicode字符串可以看做直接存储的是该字符对应的Unicode数字码，在<a href="http://wklken.me/posts/2013/08/31/python-extra-coding-intro.html#str-he-unicode" target="_blank" rel="noopener">PYTHON-进阶-编码处理小结</a>一文中，还对比了用<code>len()</code>求两者长度的区别，其中，<code>len(&#39;中文&#39;)</code>得到的结果为6，而<code>len(u&#39;中文&#39;)</code>得到的结果才是实际意义上的2。在<a href="https://pythonhosted.org/kitchen/unicode-frustrations.html" target="_blank" rel="noopener">Overcoming frustration: Correctly using unicode in python2</a>中也解释了str类型和unicode类型的不同，str类型是实际上bytes序列，<code>len(str)</code>所得到的也是序列的长度，而不是实际意义上的字符串长度。</p>
<blockquote>
<p>In python, the unicode type stores an abstract sequence of code points. Each code point represents a grapheme. By contrast, byte str stores a sequence of bytes which can then be mapped to a sequence of code points. Each unicode encoding (UTF-8, UTF-7, UTF-16, UTF-32, etc) maps different sequences of bytes to the unicode code points.</p>
</blockquote>
<p>Python开发者通常会写<code>#coding: utf-8</code>或者类似的encoding hint在源文件的前两行（也只有在前两行才起作用，并且该编码必须兼容ASCII，UTF-16就不能正常工作）。 很多人明白的一点就是：<strong>如果源代码文件中出现了非ASCII字符集中的字符，我们需要写这样的注释</strong>。 但是对于像我这样的新手来说，常常会有一个问题，这句话的作用是什么，又和源文件本身的编码什么关系？</p>
<p>在Python2.1中，Unicode字符串只能采用”unicode-escape”的方式，比如需要定义”中文”两个字，须得<code>s = u&#39;\u4e2d\u6587&#39;</code>，而不能直接出现<code>s = u&#39;中文&#39;</code>这样的代码，这就对使用非拉丁字符的开发者非常不友好，所以就有了<a href="https://www.python.org/dev/peps/pep-0263/" target="_blank" rel="noopener">PEP263</a>，该网页中也解释了该lint的作用，即<strong>使用指定的编码将源代码中的字符串字面量转换成unicode，而这与源文件编码本身并没有直接关系</strong>。</p>
<blockquote>
<p>This PEP proposes to introduce a syntax to declare the encoding of a Python source file. The encoding information is then used by the Python parser to interpret the file using the given encoding. <strong>Most notably this enhances the interpretation of Unicode literals in the source code and makes it possible to write Unicode literals using e.g. UTF-8 directly in an Unicode aware editor</strong>.</p>
</blockquote>
<blockquote>
<p>…</p>
</blockquote>
<blockquote>
<p>In Python 2.1, Unicode literals can only be written using the Latin-1 based encoding “unicode-escape”. This makes the programming environment rather unfriendly to Python users who live and work in non-Latin-1 locales such as many of the Asian countries. <strong>Programmers can write their 8-bit strings using the favorite encoding, but are bound to the “unicode-escape” encoding for <em>Unicode literals</em> </strong>.</p>
</blockquote>
<p>有的读者可能看到了，刚才的引用中明明提到了</p>
<blockquote>
<p>The encoding information is then used by the Python parser to interpret the file using the given encoding.</p>
</blockquote>
<p>怎么能说与源文件的编码无关呢？</p>
<p>这里就需要了解Python解释器工作的流程了，在<a href="https://www.python.org/dev/peps/pep-0263/" target="_blank" rel="noopener">PEP263</a>中有说明：</p>
<blockquote>
<p>Python’s tokenizer/compiler combo will need to be updated to work as follows:<br>A. read the file<br>B. decode it into Unicode assuming a fixed per-file encoding<br>C. convert it into a UTF-8 byte string<br>D. tokenize the UTF-8 content<br>E. compile it, creating Unicode objects from the given Unicode data and creating string objects from the Unicode literal data by first reencoding the UTF-8 data into 8-bit string data using the given file encoding</p>
</blockquote>
<p>注意：步骤B中的encoding指的不是我们声明的<code>coding:encoding</code>，而是源文件保存在磁盘上的编码，我们用到的编码只在步骤E中使用到，下面的实验中也证明了这一点。</p>
<p>最后需要说明的是open(‘file’).read()得到的按字节读取的str类型，可以参考<a href="http://wklken.me/posts/2013/08/31/python-extra-coding-intro.html#str-he-unicode" target="_blank" rel="noopener">PYTHON-进阶-编码处理小结</a>。</p>
<p>现在有两个文件及其运行结果，因为我的终端环境为UTF-8，所以GB18030的str输出始终是乱码的。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#utf8.<span class="keyword">py</span></span><br><span class="line">#codin<span class="variable">g:utf</span>-<span class="number">8</span></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'UTF-8源py中的str中文字符'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="keyword">u</span><span class="string">'UTF-8源py中的unicode中文字符'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">'./utf8text'</span>,<span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="keyword">file</span>.readline()</span><br><span class="line">    <span class="keyword">file</span>.<span class="keyword">close</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">'./gb18030text'</span>,<span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="keyword">file</span>.readline().decode(<span class="string">'gb18030'</span>)</span><br><span class="line">    <span class="keyword">file</span>.<span class="keyword">close</span>()</span><br><span class="line"></span><br><span class="line"># 运行:<span class="keyword">python</span> utf8.<span class="keyword">py</span></span><br><span class="line"></span><br><span class="line">UTF-<span class="number">8</span>源<span class="keyword">py</span>中的str中文字符</span><br><span class="line">UTF-<span class="number">8</span>源<span class="keyword">py</span>中的unicode中文字符</span><br><span class="line">UTF8文件中的编码</span><br><span class="line"></span><br><span class="line">GB18030�ļ��еı���</span><br></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#gb18030.<span class="keyword">py</span></span><br><span class="line">#codin<span class="variable">g:</span> GB18030</span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'GB18030源py中的str中文'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="keyword">u</span><span class="string">'GB18030源py中的unicode中文'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">'./utf8text'</span>,<span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="keyword">file</span>.readline()</span><br><span class="line">    <span class="keyword">file</span>.<span class="keyword">close</span>()</span><br><span class="line">    <span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">'./gb18030text'</span>,<span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="keyword">file</span>.readline()</span><br><span class="line">    <span class="keyword">file</span>.<span class="keyword">close</span>()</span><br><span class="line"></span><br><span class="line">#python gb18030.<span class="keyword">py</span></span><br><span class="line">GB18030Դ<span class="keyword">py</span>�е�str����</span><br><span class="line">GB18030源<span class="keyword">py</span>中的unicode中文</span><br><span class="line">UTF8文件中的编码</span><br><span class="line"></span><br><span class="line">GB18030�ļ��еı���</span><br></pre></td></tr></table></figure>
<p>还有一个文件utf8gb18030.py，它的源文件编码为UTF-8，但是我在头部声明了<code>coding:utf-8</code>，来看一下这个文件的运行结果为什么：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#codin<span class="variable">g:</span> GB18030</span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'str:UTF-8源py中的中文字符,但是coding声明为GB18033'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="keyword">u</span><span class="string">'unicode:UTF-8源py中的中文字符,但是coding声明为GB18033'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">'./utf8text'</span>,<span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="keyword">file</span>.readline()</span><br><span class="line">    <span class="keyword">file</span>.<span class="keyword">close</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">'./gb18030text'</span>,<span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="keyword">file</span>.readline()</span><br><span class="line">    <span class="keyword">file</span>.<span class="keyword">close</span>()</span><br><span class="line"></span><br><span class="line"># <span class="keyword">python</span> utf8gb18030.<span class="keyword">py</span></span><br><span class="line">str:UTF-<span class="number">8</span>源<span class="keyword">py</span>中的中文字符,但是coding声明为GB18033</span><br><span class="line">unicode:UTF-<span class="number">8</span>婧恜<span class="keyword">y</span>涓殑涓枃瀛楃,浣嗘槸coding澹版槑涓篏B18033</span><br><span class="line">UTF8文件中的编码</span><br><span class="line"></span><br><span class="line">GB18030�ļ��еı���</span><br></pre></td></tr></table></figure>
<p>我们知道，unicode对象在print到时候会根据sys.out的默认编码进行encode()的，所以不应该出现乱码情况，但是在第三次试验中，本该乱码的str没有问题，不该出现乱码的unicode却乱码了，这说明在上述解释器运行的过程中，步骤B和步骤E使用的不是同一编码，否则运行结果中unicode是不会乱码的。虽然两者不必相等，但是我们也看到了，这会带来更大的困扰，更难定位问题所在，所以<strong>一定要保证源文件的编码与声明的<code>#coding:encoding</code>一致，否则很难跳出坑的</strong>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>作为一个非纯Latin-1开发者，一定要在头部声明encoding hint。</li>
<li>为了避免不必要的麻烦，声明的encoding hint 一定要与源文件的编码一致。</li>
<li>在程序内部最好统一处理为unicode进行，在输出的时候在进行encode，如file.readline().decode(‘你的文件编码’)得到unicode，在写文件的时候可以指定unicode_str.encode(‘你需要的编码’)。</li>
<li>字面量字符串只是用u’xxx’得到unicode。</li>
<li>str可以decode得到unicode，unicode可以encode得到str，其他方向的编解码是不可行的！</li>
</ol>
<p>难免出错，还请不吝指教。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode和UTF-8</a><br><a href="http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html" target="_blank" rel="noopener">字符集和字符编码（Charset &amp; Encoding）</a><br><a href="cn.nytimes.com/culture/20150123/t23questions">关于Python脚本开头两行的：#!/usr/bin/python和# -<em>- coding: utf-8 -</em>-的作用 – 指定文件编码类型</a><br><a href="https://www.python.org/dev/peps/pep-0263/" target="_blank" rel="noopener">PEP 263 – Defining Python Source Code Encodings</a><br><a href="https://pythonhosted.org/kitchen/unicode-frustrations.html" target="_blank" rel="noopener">Overcoming frustration: Correctly using unicode in python2</a><br><a href="https://docs.python.org/2/howto/unicode.html" target="_blank" rel="noopener">Unicode HOWTO</a><br><a href="http://stormhouse.github.io/posts/2013/character-encoding-python/" target="_blank" rel="noopener">python中的字符编码</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> charset </tag>
            
            <tag> encode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[d3-example-of-different-data-structures]]></title>
      <url>http://dequn.github.io/2017/03/31/d3-example-of-different-data-structures/</url>
      <content type="html"><![CDATA[<style>
img{height:200px;}
</style>


<p>A simple list of chart types and data structure.</p>
<h1 id="Single-property"><a href="#Single-property" class="headerlink" title="Single property"></a>Single property</h1><h2 id="Box-Plots"><a href="#Box-Plots" class="headerlink" title="Box Plots"></a>Box Plots</h2><ul>
<li>Description: Use for Statistics: the smallest value, lower quartile, median, upper quartile,<br>and largest value.</li>
<li>Example:None.</li>
</ul>
<h2 id="Bubble-Chart"><a href="#Bubble-Chart" class="headerlink" title="Bubble Chart"></a>Bubble Chart</h2><ul>
<li>Description: Statistics, the area of circel stands for the count of a value, proper<br>to large amount of values than <strong>Bar Chart</strong>.</li>
<li>Example: <img src="https://camo.githubusercontent.com/dbaf877e0e81e571ae42fa1f6e1115bf052f72ca/687474703a2f2f64336a732e6f72672f65782f627562626c652e706e67" alt=""></li>
</ul>
<h2 id="Bullet-Chart"><a href="#Bullet-Chart" class="headerlink" title="Bullet Chart"></a>Bullet Chart</h2><ul>
<li>Description: A variation on a bar chart, compare a quantitative measure anainst<br>qualiative ranges and related markders.</li>
<li>Example: <img src="https://camo.githubusercontent.com/490b4c309e5ecb769b3969bed04b3b49bf516065/687474703a2f2f64336a732e6f72672f65782f62756c6c65742e706e67" alt=""></li>
</ul>
<h2 id="Calendar-Chart"><a href="#Calendar-Chart" class="headerlink" title="Calendar Chart"></a>Calendar Chart</h2><ul>
<li>Description: Values are visualized as colored cells per day, Use for compartion<br>between moths/years while having a day value detail.</li>
<li>Example: <img src="https://camo.githubusercontent.com/bc2b1c93d21e80d23c99da8ebd59617e94581327/687474703a2f2f64336a732e6f72672f65782f63616c656e6461722e706e67" alt=""></li>
<li>Example: <img src="https://camo.githubusercontent.com/fb70dfff84f2b442e89a6799e13343eda2387dc1/68747470733a2f2f676973742e6769746875622e636f6d2f746a6465636b652f353535383038342f7261772f7468756d626e61696c322e706e67" alt=""></li>
</ul>
<h2 id="Circular-heat-chart"><a href="#Circular-heat-chart" class="headerlink" title="Circular heat chart"></a><a href="http://prcweb.co.uk/circularheatchart/" target="_blank" rel="noopener">Circular heat chart</a></h2><ul>
<li>Description: A head map with a circular layout.</li>
<li>Example: <img src="http://prcweb.co.uk/img/rainfall-1980-2012.jpg" alt=""></li>
<li>Example: <img src="https://github.com/nicgirault/circosJS/raw/master/doc/temperatures.png" alt=""></li>
</ul>
<h2 id="A-3d-exmaple-for-one-property"><a href="#A-3d-exmaple-for-one-property" class="headerlink" title="A 3d exmaple for one property"></a>A 3d exmaple for one property</h2><p><img src="https://camo.githubusercontent.com/be49e2d5950922a2b221d6578fb2fe0f84b69384/687474703a2f2f616e696d61746564646174612e636f2e756b2f696d672f64332d67616c6c6572792f756b74656d70657261747572656c696e6573332e6a7067" alt=""></p>
<h1 id="A-and-B"><a href="#A-and-B" class="headerlink" title="A and B"></a>A and B</h1><h2 id="Chord-Diagram"><a href="#Chord-Diagram" class="headerlink" title="Chord Diagram"></a>Chord Diagram</h2><ul>
<li>Description: Show directed relationships among a group of entities.</li>
<li>Example: <img src="https://camo.githubusercontent.com/cc8ad10f5975dff97a5d6801269f8203101b20b9/687474703a2f2f64336a732e6f72672f65782f63686f72642e706e67" alt="abc"></li>
</ul>
<h2 id="Force-Directed-Graph"><a href="#Force-Directed-Graph" class="headerlink" title="Force-Directed Graph"></a>Force-Directed Graph</h2><ul>
<li>Description: Shows character co-occurence, related character in closer<br>proximity and unrelated characters are farther apart.</li>
<li>Example: <img src="https://camo.githubusercontent.com/d7b97d7c0873e949f827918763174efcca6c4a5f/687474703a2f2f64336a732e6f72672f65782f666f7263652e706e67" alt=""></li>
<li>Variants: <a href="https://bl.ocks.org/mbostock/4600693" target="_blank" rel="noopener">Curved Links</a>, <a href="http://bost.ocks.org/mike/fisheye/" target="_blank" rel="noopener">Fisheye<br>Distoration</a>, <a href="http://bost.ocks.org/mike/miserables/" target="_blank" rel="noopener">Matrix diagram</a><br>, <a href="http://mbostock.github.io/d3/talk/20111116/force-collapsible.html" target="_blank" rel="noopener">Collapse Force layout</a><br>, <a href="http://bl.ocks.org/MoritzStefaner/1377729" target="_blank" rel="noopener">Force-based label</a></li>
</ul>
<h2 id="Sector-Comparation"><a href="#Sector-Comparation" class="headerlink" title="Sector Comparation"></a><a href="http://www.brightpointinc.com/united-states-trade-deficit/" target="_blank" rel="noopener">Sector Comparation</a></h2><ul>
<li>Description: Comparation between two main properties with some sub propritis.</li>
<li>Example: <img src="https://camo.githubusercontent.com/c2826f9a0c78f2f0404b094c891348b72d38d54e/687474703a2f2f7777772e627269676874706f696e74696e632e636f6d2f696e7465726163746976652f696d616765732f446566696369745f32303270782e706e67" alt=""></li>
</ul>
<h1 id="A-B-and-C"><a href="#A-B-and-C" class="headerlink" title="A, B and C"></a>A, B and C</h1><h2 id="Circle-gram"><a href="#Circle-gram" class="headerlink" title="Circle gram"></a>Circle gram</h2><ul>
<li>Description:(X,Y)-&gt;Z, Z use circle and the area stands for Z value.</li>
<li>Example: <img src="https://camo.githubusercontent.com/d5cc8b32409a9d498d83ce13c3f13ec7ac664601/687474703a2f2f6e657572616c656e67722e636f6d2f61736966722f6a6f75726e616c732f6a6f75726e616c732e706e67" alt=""><br><img src="https://camo.githubusercontent.com/3fb6699cd8462e7a82b69c04ac5cb37b968c0f09/687474703a2f2f64336a732e6f72672f65782f66616365626f6f6b2d69706f2e706e67" alt=""></li>
</ul>
<h1 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h1><p>The following charts are used for showing data which has a tree data structure.</p>
<h2 id="Dendrogram"><a href="#Dendrogram" class="headerlink" title="Dendrogram"></a>Dendrogram</h2><ul>
<li>Description: Leaf nodes of the tree at the same depth, are aligned on the<br>right edge.</li>
<li>Example: <img src="https://camo.githubusercontent.com/e1a1948f0bcfa095d54793afd3ab96af97731773/687474703a2f2f64336a732e6f72672f65782f636c75737465722e706e67" alt=""></li>
</ul>
<h2 id="Hierarchical-Edge-Bundling"><a href="#Hierarchical-Edge-Bundling" class="headerlink" title="Hierarchical Edge Bundling"></a>Hierarchical Edge Bundling</h2><ul>
<li>Exampel: <img src="https://camo.githubusercontent.com/75572c7b80dabb1a0984bd8ea9d3ee16c5200fe3/687474703a2f2f64336a732e6f72672f65782f62756e646c652e706e67" alt=""></li>
</ul>
<h2 id="Treemap"><a href="#Treemap" class="headerlink" title="Treemap"></a>Treemap</h2><ul>
<li>Description: A treemap recursively subdivideds area into rectangles, the area<br>of any node in the tree corresponds to its value.</li>
<li>Example: <img src="https://camo.githubusercontent.com/e6612268ca90a8c2f6d1da62f85d7d86616c37de/687474703a2f2f64336a732e6f72672f65782f747265656d61702e706e67" alt=""></li>
</ul>
<h2 id="Partition-layout"><a href="#Partition-layout" class="headerlink" title="Partition layout"></a>Partition layout</h2><ul>
<li>Description: A treemap recursively subdivideds in horizational.</li>
<li>Example: <img src="https://camo.githubusercontent.com/48f41725f95dad3f65f65e5f47c1b70e932be48c/687474703a2f2f64336a732e6f72672f65782f706172746974696f6e2d7a6f6f6d2e706e67" alt=""></li>
</ul>
<h2 id="Circle-packing"><a href="#Circle-packing" class="headerlink" title="Circle packing"></a>Circle packing</h2><ul>
<li>Description: Use containment to represent the hierarchy, the area of circle<br>can stand for item value, it better reveals the hierarchy than treemap.</li>
<li>Example: <img src="https://camo.githubusercontent.com/428c04c95f2a18ce7178d9d6135f1eab8df10ebd/687474703a2f2f64336a732e6f72672f65782f7061636b2e706e67" alt=""></li>
<li>Variants: <a href="http://mbostock.github.com/d3/talk/20111116/pack-hierarchy.html" target="_blank" rel="noopener">Zoomable Pack layout</a></li>
</ul>
<h2 id="Sunburst"><a href="#Sunburst" class="headerlink" title="Sunburst"></a>Sunburst</h2><ul>
<li>Description: A treemap has a radial layout, all the root nodes are at the<br>center.</li>
<li>Exampel: <img src="https://camo.githubusercontent.com/1415e2af369262e466534480edbc7baa883e5b58/687474703a2f2f64336a732e6f72672f65782f73756e62757273742e706e67" alt=""></li>
<li>Variants: <a href="http://www.jasondavies.com/coffee-wheel/" target="_blank" rel="noopener">Zoomable Sunburst</a>, <a href="http://bl.ocks.org/kerryrodden/7090426" target="_blank" rel="noopener">Sequences sunburst</a></li>
</ul>
<h2 id="Node-Link-Tree"><a href="#Node-Link-Tree" class="headerlink" title="Node-Link Tree"></a>Node-Link Tree</h2><ul>
<li>Description: The depth of nodes is computed by distance from the root, leading<br>to a ragged appearance.</li>
<li>Example: <img src="https://camo.githubusercontent.com/e646acd936244a6db8a140fb0e1e421d95b97d8e/687474703a2f2f64336a732e6f72672f65782f747265652e706e67" alt=""></li>
</ul>
<h1 id="A-B-C-…-gt-D-E-F-…-with-intermediate-nodes"><a href="#A-B-C-…-gt-D-E-F-…-with-intermediate-nodes" class="headerlink" title="A, B , C, … -&gt; D, E, F, … with intermediate nodes."></a>A, B , C, … -&gt; D, E, F, … with intermediate nodes.</h1><h2 id="Sankey-Diagrams"><a href="#Sankey-Diagrams" class="headerlink" title="Sankey Diagrams"></a><a href="https://bost.ocks.org/mike/sankey/" target="_blank" rel="noopener">Sankey Diagrams</a></h2><ul>
<li>Description: Sankey diagrams visualize the magnitude of flow between nodes in<br>a network. This intricate diagram shows a possible scenario for UK energy<br>production and consumption in 2050: energy supplies are on the left, and<br>demands are on the right. Intermediate nodes group related forms of production<br>and show how energy is converted and transmitted before it is consumed (or<br>lost!). The thickness of each link encodes the amount of flow from source to<br>target.</li>
<li>Example: <img src="https://camo.githubusercontent.com/d9abb5b2b474c0e37728abedb9ba722f8b6e4f24/687474703a2f2f64336a732e6f72672f65782f73616e6b65792e706e67" alt=""></li>
</ul>
<h1 id="Compare-n-properties"><a href="#Compare-n-properties" class="headerlink" title="Compare n properties"></a>Compare n properties</h1><h2 id="Time-Series-Comparation"><a href="#Time-Series-Comparation" class="headerlink" title="Time Series Comparation"></a>Time Series Comparation</h2><ul>
<li>Description: None.</li>
<li>Example: <img src="https://camo.githubusercontent.com/aa4653694ba96e7991206963a698584169d54204/68747470733a2f2f676973742e6769746875622e636f6d2f6d6172756662642f373139313334302f7261772f616230353765656639323237653534393834333163303330633661643530343863623332366133612f7468756d626e61696c2e706e67" alt=""></li>
</ul>
<h2 id="Streamgraph"><a href="#Streamgraph" class="headerlink" title="Streamgraph"></a>Streamgraph</h2><ul>
<li>Description: None.</li>
<li>Example: <img src="https://camo.githubusercontent.com/3cbc8c7898d1336e83e499cb66274c15e63f65bf/687474703a2f2f64336a732e6f72672f65782f73747265616d2e706e67" alt=""></li>
</ul>
<h2 id="Bar-Line-Scatter-Stacked-bar-etc"><a href="#Bar-Line-Scatter-Stacked-bar-etc" class="headerlink" title="Bar, Line, Scatter, Stacked bar, etc."></a>Bar, Line, Scatter, Stacked bar, etc.</h2><h2 id="Radial-plot"><a href="#Radial-plot" class="headerlink" title="Radial plot"></a>Radial plot</h2><ul>
<li>Description: Boxplot for continuous data.</li>
<li>Example: <img src="https://camo.githubusercontent.com/f17a69dcf4d6cf3020fc77016844d6c46ae5419a/687474703a2f2f626c2e6f636b732e6f72672f646176696477636c696e2f7261772f61643564313364623236306361656666653962332f7468756d626e61696c2e706e67" alt=""></li>
</ul>
<h2 id="Radar-Chart"><a href="#Radar-Chart" class="headerlink" title="Radar Chart"></a>Radar Chart</h2><ul>
<li>Description: Comparation between n properties, all of them have the save<br>sacle.</li>
<li>Example: <img src="https://raw.githubusercontent.com/nbremer/thumbnails/master/D3%20Radar%20Chart%20Redesign.png" alt=""></li>
</ul>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="Choropleth"><a href="#Choropleth" class="headerlink" title="Choropleth"></a><a href="https://bl.ocks.org/mbostock/4060606" target="_blank" rel="noopener">Choropleth</a></h2><ul>
<li>Description: Color stands for value and showd in a geo-map.</li>
<li>Example: <img src="https://camo.githubusercontent.com/0afefbc191693b8ecaea58cda0b587a908fc0174/687474703a2f2f64336a732e6f72672f65782f63686f726f706c6574682e706e67" alt=""></li>
</ul>
<p>Not all, visit <a href="https://github.com/d3/d3/wiki/Gallery" target="_blank" rel="noopener">https://github.com/d3/d3/wiki/Gallery</a> for more examples.</p>
]]></content>
      
        <categories>
            
            <category> Others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> d3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[就折腾到这儿吧]]></title>
      <url>http://dequn.github.io/2016/12/27/jiu-zhe-teng-dao-zhe-er-ba/</url>
      <content type="html"><![CDATA[<p>上上周从百度搜索部Rank组面试回来之后，就有点不安，三面的面试官直接告诉我这面的表现不好，让她很担心。说这句话分明是让我很担心，核心部门还是很值得期待的。一周都没有音信，想必是挂掉了，不曾想今天接到HR电话联系offer事宜，终于可以把心放肚子里了。</p>
<p>今年四月份的时候面了一次腾讯实习，不意外地终止在一面。回来之后那个惶恐啊，突然间发现以自身的能力什么工作都找不到，但同时还欠着小论文没写，刚换了题目还没有看文献，一下子都不知道该做什么了。接下来的几个月也是最痛苦的，东一棒槌西一榔头，压根没有主心骨。</p>
<p>好在暑期的时候终于把小论文凑完了，赶紧刷算法，面试也都陆陆续续的开始了，准备了不到一个月，就进入秋招高峰期，也就没有再静心准备了。笔试一个接着一个，面试仍还是倒在一面。腾讯地图部门提前批感觉还不错，结果不行，微店一面感觉不好，挂掉…从来不知道二面是什么样子，更担心——妈的这得到什么时候才能找到工作。</p>
<p>面京东的时候比较顺利，虽然在一二面中已经知道岗位不是我想做的，但为了保底也要面下去，滑稽的是HR面挂了…真是见鬼了，短短5分钟的电面，我想犯错都难啊。后来华为也是，两面觉得非常顺利，不料仍然是failed，莫非真如师兄所说的：我犯了低级错误？但已然不记得了…</p>
<p>百度是第一个给offer的公司，也是唯一一个给了两次offer的。9月份校招面试机器学习，一面就挂了，面试官觉得coding还不错，推荐我去面开发测试，并给了一点职业规划的建议（真是好人啊，哈哈），后来顺利通过开发测试的三轮面试，所以说多数人当天都是三轮面试，我却面了四轮，也是够有趣的。之后觉得岗位不太合适就拒绝掉了，需要说明的是我一直是以岗位为目标的，对公司没有什么要求，所以后面一个小公司给了数据挖掘的岗位觉得还不错就签了，搜狗面试要我进去做web开发，犹豫了一下之后就以“目前还没有在web开发上有较清晰的职业规划”婉拒了，也就不意外的无果而终了。</p>
<p>现在想来真是作，为什么非得一根筋的非得去面数据挖掘\机器学习，压根没有任何相关的项目经验怎么去面！在签了小公司的数据挖掘岗位后进入观望阶段，赶紧的补补课，事实上囫囵吐枣半懂不懂地学习了一段时间后就也没再坚持。直到看到百度搜索部门的补招信息，并意外的有面试机会，真心不容易。一二面还不错，三面面试官在说了我表现不好之后还补充一句：其实你的简历在机器筛选的时候就没能通过，后来看你项目经历涉及的方面比较多，所以才又给提出来看看你的综合能力…</p>
<p>简历平平，因为能力、经历实在是太一般，也难怪很多公司始终没给我面试的机会。大师兄没少给加油打气，导致我自己都快相信他说的了（肯定没问题！），思考后才明白:鼓励不是你已经做到了，而是需要做到的，我们太容易认为那些鼓励的话都已是事实了。</p>
<p>这已经是我能折腾到的最好结果了，纯粹是撞运气的结果，论真实力怎么也不可能胜任的。虽然我也是个百度黑，很多人也骂它，但能“委身”于这样的现实也很满足了。接下来就是有个明确的规划和计划，总不能跳离的时候还是平平吧？</p>
<p>感谢给我内推的师兄、师姐和一些个招聘平台，感谢老板给我开放、自由的时间和空间，感谢周围的小伙伴儿，最后感谢一下面试官吧。</p>
]]></content>
      
        <categories>
            
            <category> 个人日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Zeppelin 安装配置的一些问题]]></title>
      <url>http://dequn.github.io/2016/11/20/zeppelin-installation-and-settings/</url>
      <content type="html"><![CDATA[<h1 id="1-版本问题"><a href="#1-版本问题" class="headerlink" title="1.版本问题"></a>1.版本问题</h1><p>Zeppelin 从0.6.1版本开始，默认是基于 Spark 2.x 和 Scala 2.11版本进行编译的，亲测 Zeppelin 0.6.2与 Spark 1.6.x 版本是不兼容的，导致 Saprk Interpreters 不能正确运行，如果需要安装在老版本上的，需要自己从源码编译，可以指定 Spark、Hadoop等版本参数，可以参考 <a href="http://zeppelin.apache.org/docs/snapshot/install/build.html" target="_blank" rel="noopener">http://zeppelin.apache.org/docs/snapshot/install/build.html</a> ，如果是0.6.0版本，可与 Spark 1.6.x 之前的兼容运行。</p>
<h1 id="2-Phoenix-thin-连接问题"><a href="#2-Phoenix-thin-连接问题" class="headerlink" title="2.Phoenix-thin 连接问题"></a>2.Phoenix-thin 连接问题</h1><p><strong><em>2017年1月3号更新</em></strong>：</p>
<p>Phoenix for Spark 2.x Integration的补丁已经出来了，可以直接加载为DataFrame而不用通过JDBC的方式连接数据库了，会获得更高的效率。Pheonix for Spark 2.x 版本的问题可以参见<a href="https://issues.apache.org/jira/browse/PHOENIX-3333" target="_blank" rel="noopener">https://issues.apache.org/jira/browse/PHOENIX-3333</a>，如何使用可以参见文章<a href="http://dequn.github.io/2016/11/08/phoenix-spark-setting/">Spark 连接 Phoenix 配置</a>。</p>
<hr>
<p>Zeppelin 从0.6.0版本开始支持 Phoenix 连接，<a href="http://www.phoenix.apache.org" target="_blank" rel="noopener">Phoenix</a>默认是在jdbc interpreter 中配置的，配置过程可以参考 <a href="https://zeppelin.apache.org/docs/0.6.2/interpreter/jdbc.html#phoenix" target="_blank" rel="noopener">https://zeppelin.apache.org/docs/0.6.2/interpreter/jdbc.html#phoenix</a> ，<strong>注意一定要在Dependencies中添加artifact 依赖，如果从 maven远程库下载太慢，可以直接填写本地<code>phoenix-&lt;version&gt;-thin-client.jar</code>文件路径，或者把 jar 文件复制到路径<code>ZEPPELIN_HOME/interpreter/jdbc</code>下。</strong></p>
<p>但是如果使用的是phoenix-thin 连接，会报错误</p>
<blockquote>
<p>No suitable driver found for <a href="http://localhost:8765" target="_blank" rel="noopener">http://localhost:8765</a></p>
</blockquote>
<p>原因可以参见 <a href="https://github.com/apache/zeppelin/pull/1442" target="_blank" rel="noopener">https://github.com/apache/zeppelin/pull/1442</a> ，提供我已经编译好的 <a href="http://obqjd695a.bkt.clouddn.com/zeppelin-jdbc-0.6.2.jar" target="_blank" rel="noopener">zeppelin-jdbc-0.6.2.jar</a>，替换掉 <strong><code>ZEPPELIN_HOME/interpreter/jdbc</code></strong> 下边对应的同名文件即可。</p>
<h3 id="文件下载-zeppelin-jdbc-0-6-2-jar"><a href="#文件下载-zeppelin-jdbc-0-6-2-jar" class="headerlink" title="文件下载:zeppelin-jdbc-0.6.2.jar"></a>文件下载:<a href="http://obqjd695a.bkt.clouddn.com/zeppelin-jdbc-0.6.2.jar" target="_blank" rel="noopener">zeppelin-jdbc-0.6.2.jar</a></h3><h1 id="3-zeppelin中用-scala-加载-jdbc-数据问题"><a href="#3-zeppelin中用-scala-加载-jdbc-数据问题" class="headerlink" title="3.zeppelin中用 scala 加载 jdbc 数据问题"></a>3.zeppelin中用 scala 加载 jdbc 数据问题</h1><p><strong><em>2017年1月3号更新</em></strong>：</p>
<p>好久没有使用，重新折腾了一下，发现<strong>org.apache.hadoop.tracing.SpanReceiverHost.get(xxx)报错</strong>是由于Zeppelin提供的Hadoop版本和Spark编译时指定的版本不一致引起，只需要使用$SPARK_HOME/jars/hadoop-annotations-2.7.3.jar、hadoop-auth-2.7.3.jar、hadoop-common-2.7.3.jar替换掉$ZEPPELIN_HOME/lib下的对应文件即可。具体可以参考<a href="http://blog.csdn.net/lsshlsw/article/details/53768756" target="_blank" rel="noopener">Zeppelin 0.6.2 使用spark2.x 的一些错误处理</a>。</p>
<hr>
<p>刚开始使用的是Spark 2.0.1，使用下面的代码用 jdbc 读取数据库中的数据，发现总是报错，第一个关于 xxx.hive.ql.xxx 的错误，在 interpreter 的配置中将<code>zeppelin.spark.useHiveContext</code>项设置为<code>false</code>即可，<del>如果后面org.apache.hadoop.tracing.SpanReceiverHost.get(xxx)还继续报错，可以 <strong>升级 Spark2.0.2试试</strong> ，我是无意在笔记本上使用 Spark2.0.2 发现的 。</del></p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">val <span class="keyword">jdbcDf </span>= spark.read</span><br><span class="line">.format(<span class="string">"jdbc"</span>)</span><br><span class="line">.option(<span class="string">"driver"</span>,<span class="string">"org.apache.phoenix.queryserver.client.Driver"</span>)</span><br><span class="line">.option(<span class="string">"url"</span>,<span class="string">"jdbc:phoenix:thin:url=http://localhost:8765;serialization=PROTOBUF"</span>)</span><br><span class="line">.option(<span class="string">"dbtable"</span>,<span class="string">"bigjoy.imos"</span>)</span><br><span class="line">.load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">java.lang.RuntimeException: </span><span class="keyword">java.lang.RuntimeException: </span>Unable to <span class="keyword">instantiate </span><span class="keyword">org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:522)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.client.HiveClientImpl.&lt;init&gt;(HiveClientImpl.scala:189)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">  <span class="built_in">at</span> sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.<span class="keyword">java:62)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.<span class="keyword">java:45)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.client.IsolatedClientLoader.createClient(IsolatedClientLoader.scala:258)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveUtils$.newClientForMetadata(HiveUtils.scala:359)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveUtils$.newClientForMetadata(HiveUtils.scala:263)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSharedState.metadataHive$lzycompute(HiveSharedState.scala:39)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSharedState.metadataHive(HiveSharedState.scala:38)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSharedState.externalCatalog$lzycompute(HiveSharedState.scala:46)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSharedState.externalCatalog(HiveSharedState.scala:45)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSessionState.catalog$lzycompute(HiveSessionState.scala:50)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSessionState.catalog(HiveSessionState.scala:48)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSessionState$$anon$1.&lt;init&gt;(HiveSessionState.scala:63)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSessionState.analyzer$lzycompute(HiveSessionState.scala:63)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSessionState.analyzer(HiveSessionState.scala:62)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:49)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.Dataset$.ofRows(Dataset.scala:64)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.SparkSession.baseRelationToDataFrame(SparkSession.scala:382)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:143)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:122)</span></span><br><span class="line"><span class="keyword"> </span> ... <span class="number">47</span> elided</span><br><span class="line">Caused <span class="keyword">by: </span><span class="keyword">java.lang.RuntimeException: </span>Unable to <span class="keyword">instantiate </span><span class="keyword">org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance(MetaStoreUtils.java:1523)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.&lt;init&gt;(RetryingMetaStoreClient.java:86)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:132)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:104)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.ql.metadata.Hive.createMetaStoreClient(Hive.java:3005)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.ql.metadata.Hive.getMSC(Hive.java:3024)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:503)</span></span><br><span class="line"><span class="keyword"> </span> ... <span class="number">69</span> more</span><br><span class="line">Caused <span class="keyword">by: </span><span class="keyword">java.lang.reflect.InvocationTargetException: </span><span class="keyword">java.lang.NoSuchMethodError: </span><span class="keyword">org.apache.hadoop.tracing.SpanReceiverHost.get(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Lorg/apache/hadoop/tracing/SpanReceiverHost;</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">  <span class="built_in">at</span> sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.<span class="keyword">java:62)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.<span class="keyword">java:45)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance(MetaStoreUtils.java:1521)</span></span><br><span class="line"><span class="keyword"> </span> ... <span class="number">75</span> more</span><br><span class="line">Caused <span class="keyword">by: </span><span class="keyword">java.lang.NoSuchMethodError: </span><span class="keyword">org.apache.hadoop.tracing.SpanReceiverHost.get(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Lorg/apache/hadoop/tracing/SpanReceiverHost;</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hdfs.DFSClient.&lt;init&gt;(DFSClient.java:634)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hdfs.DFSClient.&lt;init&gt;(DFSClient.java:619)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hdfs.DistributedFileSystem.initialize(DistributedFileSystem.java:149)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2596)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:91)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2630)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2612)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem.get(FileSystem.java:370)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem.get(FileSystem.java:169)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem.get(FileSystem.java:354)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.Path.getFileSystem(Path.java:296)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.Warehouse.getFs(Warehouse.java:104)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.Warehouse.getDnsPath(Warehouse.java:140)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.Warehouse.getDnsPath(Warehouse.java:146)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.Warehouse.getWhRoot(Warehouse.java:159)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.Warehouse.getDefaultDatabasePath(Warehouse.java:177)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.createDefaultDB_core(HiveMetaStore.java:600)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.createDefaultDB(HiveMetaStore.java:620)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.init(HiveMetaStore.java:461)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.RetryingHMSHandler.&lt;init&gt;(RetryingHMSHandler.java:66)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.RetryingHMSHandler.getProxy(RetryingHMSHandler.java:72)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.HiveMetaStore.newRetryingHMSHandler(HiveMetaStore.java:5762)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.HiveMetaStoreClient.&lt;init&gt;(HiveMetaStoreClient.java:199)</span></span><br><span class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient.&lt;init&gt;(SessionHiveMetaStoreClient.java:74)</span></span><br><span class="line"><span class="keyword"> </span> ... <span class="number">80</span> more</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1]: <a href="http://zeppelin.apache.org/docs/snapshot/install/build.html" target="_blank" rel="noopener">Zeppelin 源码编译</a><br>[2]: <a href="https://zeppelin.apache.org/docs/0.6.2/interpreter/jdbc.html#phoenix" target="_blank" rel="noopener">Zeppelin Phoenix Interpreter 配置</a><br>[3]: <a href="https://github.com/apache/zeppelin/pull/1442" target="_blank" rel="noopener">ZEPPELIN-1459: Zeppelin JDBC URL properties mangled</a><br>[4]: <a href="http://blog.csdn.net/lsshlsw/article/details/53768756" target="_blank" rel="noopener">Zeppelin 0.6.2 使用spark2.x 的一些错误处理</a></p>
]]></content>
      
        <categories>
            
            <category> Zeppelin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Phoenix </tag>
            
            <tag> Spark </tag>
            
            <tag> Zeppelin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Intellij IDEA 中调试 Spark Application]]></title>
      <url>http://dequn.github.io/2016/11/19/debug-spark-in-intellij/</url>
      <content type="html"><![CDATA[<p>Spark 新手一名，同样也是 Scala 菜鸟，由于对这两个都不是特别熟悉，所以希望能在 IDE中 coding 和 debug，但是调试 Spark 程序和往常接触过的不一样，并且有一些观念上的错误，总结一下。</p>
<h1 id="坑一：网络代理"><a href="#坑一：网络代理" class="headerlink" title="坑一：网络代理"></a>坑一：网络代理</h1><p>程序写好以后，可以直接 debug 的(只限于 spark.master= local[*]的场景)，由于使用了 ShadowSocks 全局代理翻墙，最初一直报错，Google 了好大会儿也没找到问原因，后来才猛的想起代理还开着，而 hosts 文件中恰恰没有 localhost 映射到127.0.0.1中，修改 hosts，解决。直接 debug 可以使用较小的数据进行测试，不是非得网上众多教程那样得 sbt package -&gt; spark-submit -&gt; Remote Debug 那样不方便。</p>
<h1 id="坑二：worksheet-运行？"><a href="#坑二：worksheet-运行？" class="headerlink" title="坑二：worksheet 运行？"></a>坑二：worksheet 运行？</h1><p>虽然 spark-shell也提供了交互式命令行，尝试代码非常方便，不用每次都 debug 启动 sprak，那样效率太低。然而保存代码就比较麻烦了，因此想着能不能使用 scala worksheet来运行，这样结果也即时可见，代码也不会丢失，尝试了一番，发现不行，有高手解释为：spark 的 REPL 解释器和 Scala 的不一样，因此里边是运行不了 spark 程序的。难道就没有其他办法了吗？有的，采用Scala Console 代替，在文件上右键点击，选择 Run Scala Console 即可，可以与把文件里的代码发送给 console 运行，虽然不如 worksheet 方便，但也好过 spark-sheel 或者每次都启动 debug了。</p>
<h1 id="坑三：debug-on-spark-cluster"><a href="#坑三：debug-on-spark-cluster" class="headerlink" title="坑三：debug on spark cluster"></a>坑三：debug on spark cluster</h1><p>这个和坑一有些类似，在老板的三台机器上搭建了一个小集群，并以 standlone cluster 方式运行，于是就直接在 cluster 上debug 吧，获取 sparkContext 的方式如代码所示<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val spark = SparkSession.builder().<span class="literal">master</span>(<span class="string">"spark://192.168.6.131:7077"</span>).appName(<span class="string">"bigjoy"</span>).getOrCreate()</span><br></pre></td></tr></table></figure></p>
<p>在控制台中的 Log 如下，不断地停掉和开启 Executor，心想也不至于吧，数据量没那么大呀！</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARN TaskSchedulerImpl: Initial job has<span class="built_in"> not </span>accepted any resources;<span class="built_in"> check </span>your cluster UI to ensure that workers are registered<span class="built_in"> and </span>have sufficient resources</span><br></pre></td></tr></table></figure>
<p>于是去检查 spark UI 的 log, 看到下面的错误</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.UndeclaredThrowableException</span></span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.security</span><span class="selector-class">.UserGroupInformation</span><span class="selector-class">.doAs</span>(UserGroupInformation<span class="selector-class">.java</span>:<span class="number">1713</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.deploy</span><span class="selector-class">.SparkHadoopUtil</span><span class="selector-class">.runAsSparkUser</span>(SparkHadoopUtil<span class="selector-class">.scala</span>:<span class="number">70</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.executor</span><span class="selector-class">.CoarseGrainedExecutorBackend</span>$.run(CoarseGrainedExecutorBackend<span class="selector-class">.scala</span>:<span class="number">174</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.executor</span><span class="selector-class">.CoarseGrainedExecutorBackend</span>$.main(CoarseGrainedExecutorBackend<span class="selector-class">.scala</span>:<span class="number">270</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.executor</span><span class="selector-class">.CoarseGrainedExecutorBackend</span><span class="selector-class">.main</span>(CoarseGrainedExecutorBackend.scala)</span><br><span class="line">Caused by: org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.SparkException</span>: Exception thrown <span class="keyword">in</span> awaitResult</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.RpcTimeout</span>$<span class="variable">$anonfun</span>$<span class="number">1</span>.applyOrElse(RpcTimeout<span class="selector-class">.scala</span>:<span class="number">77</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.RpcTimeout</span>$<span class="variable">$anonfun</span>$<span class="number">1</span>.applyOrElse(RpcTimeout<span class="selector-class">.scala</span>:<span class="number">75</span>)</span><br><span class="line">	at scala<span class="selector-class">.runtime</span><span class="selector-class">.AbstractPartialFunction</span><span class="selector-class">.apply</span>(AbstractPartialFunction<span class="selector-class">.scala</span>:<span class="number">36</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.RpcTimeout</span>$<span class="variable">$anonfun</span><span class="variable">$addMessageIfTimeout</span>$<span class="number">1</span>.applyOrElse(RpcTimeout<span class="selector-class">.scala</span>:<span class="number">59</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.RpcTimeout</span>$<span class="variable">$anonfun</span><span class="variable">$addMessageIfTimeout</span>$<span class="number">1</span>.applyOrElse(RpcTimeout<span class="selector-class">.scala</span>:<span class="number">59</span>)</span><br><span class="line">	at scala.PartialFunction<span class="variable">$OrElse</span>.apply(PartialFunction<span class="selector-class">.scala</span>:<span class="number">167</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.RpcTimeout</span><span class="selector-class">.awaitResult</span>(RpcTimeout<span class="selector-class">.scala</span>:<span class="number">83</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.RpcEnv</span><span class="selector-class">.setupEndpointRefByURI</span>(RpcEnv<span class="selector-class">.scala</span>:<span class="number">88</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.executor</span><span class="selector-class">.CoarseGrainedExecutorBackend</span>$<span class="variable">$anonfun</span><span class="variable">$run</span>$<span class="number">1</span>.apply<span class="variable">$mcV</span><span class="variable">$sp</span>(CoarseGrainedExecutorBackend<span class="selector-class">.scala</span>:<span class="number">188</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.deploy</span><span class="selector-class">.SparkHadoopUtil</span>$<span class="variable">$anon</span>$<span class="number">1</span>.run(SparkHadoopUtil<span class="selector-class">.scala</span>:<span class="number">71</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.deploy</span><span class="selector-class">.SparkHadoopUtil</span>$<span class="variable">$anon</span>$<span class="number">1</span>.run(SparkHadoopUtil<span class="selector-class">.scala</span>:<span class="number">70</span>)</span><br><span class="line">	at java<span class="selector-class">.security</span><span class="selector-class">.AccessController</span><span class="selector-class">.doPrivileged</span>(Native Method)</span><br><span class="line">	at javax<span class="selector-class">.security</span><span class="selector-class">.auth</span><span class="selector-class">.Subject</span><span class="selector-class">.doAs</span>(Subject<span class="selector-class">.java</span>:<span class="number">422</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.security</span><span class="selector-class">.UserGroupInformation</span><span class="selector-class">.doAs</span>(UserGroupInformation<span class="selector-class">.java</span>:<span class="number">1698</span>)</span><br><span class="line">	... <span class="number">4</span> more</span><br><span class="line">Caused by: java<span class="selector-class">.io</span><span class="selector-class">.IOException</span>: Failed to connect to /<span class="number">192.168</span>.<span class="number">1.105</span>:<span class="number">51340</span></span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.network</span><span class="selector-class">.client</span><span class="selector-class">.TransportClientFactory</span><span class="selector-class">.createClient</span>(TransportClientFactory<span class="selector-class">.java</span>:<span class="number">228</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.network</span><span class="selector-class">.client</span><span class="selector-class">.TransportClientFactory</span><span class="selector-class">.createClient</span>(TransportClientFactory<span class="selector-class">.java</span>:<span class="number">179</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.netty</span><span class="selector-class">.NettyRpcEnv</span><span class="selector-class">.createClient</span>(NettyRpcEnv<span class="selector-class">.scala</span>:<span class="number">197</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.netty</span><span class="selector-class">.Outbox</span>$<span class="variable">$anon</span>$<span class="number">1</span>.call(Outbox<span class="selector-class">.scala</span>:<span class="number">191</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.netty</span><span class="selector-class">.Outbox</span>$<span class="variable">$anon</span>$<span class="number">1</span>.call(Outbox<span class="selector-class">.scala</span>:<span class="number">187</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.FutureTask</span><span class="selector-class">.run</span>(FutureTask<span class="selector-class">.java</span>:<span class="number">266</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.ThreadPoolExecutor</span><span class="selector-class">.runWorker</span>(ThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">1142</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.ThreadPoolExecutor</span><span class="variable">$Worker</span>.run(ThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">617</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">745</span>)</span><br><span class="line">Caused by: java<span class="selector-class">.net</span><span class="selector-class">.NoRouteToHostException</span>: No route to host: /<span class="number">192.168</span>.<span class="number">1.105</span>:<span class="number">51340</span></span><br><span class="line">	at sun<span class="selector-class">.nio</span><span class="selector-class">.ch</span><span class="selector-class">.SocketChannelImpl</span><span class="selector-class">.checkConnect</span>(Native Method)</span><br><span class="line">	at sun<span class="selector-class">.nio</span><span class="selector-class">.ch</span><span class="selector-class">.SocketChannelImpl</span><span class="selector-class">.finishConnect</span>(SocketChannelImpl<span class="selector-class">.java</span>:<span class="number">717</span>)</span><br><span class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.socket</span><span class="selector-class">.nio</span><span class="selector-class">.NioSocketChannel</span><span class="selector-class">.doFinishConnect</span>(NioSocketChannel<span class="selector-class">.java</span>:<span class="number">224</span>)</span><br><span class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.nio</span><span class="selector-class">.AbstractNioChannel</span><span class="variable">$AbstractNioUnsafe</span>.finishConnect(AbstractNioChannel<span class="selector-class">.java</span>:<span class="number">289</span>)</span><br><span class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.nio</span><span class="selector-class">.NioEventLoop</span><span class="selector-class">.processSelectedKey</span>(NioEventLoop<span class="selector-class">.java</span>:<span class="number">528</span>)</span><br><span class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.nio</span><span class="selector-class">.NioEventLoop</span><span class="selector-class">.processSelectedKeysOptimized</span>(NioEventLoop<span class="selector-class">.java</span>:<span class="number">468</span>)</span><br><span class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.nio</span><span class="selector-class">.NioEventLoop</span><span class="selector-class">.processSelectedKeys</span>(NioEventLoop<span class="selector-class">.java</span>:<span class="number">382</span>)</span><br><span class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.nio</span><span class="selector-class">.NioEventLoop</span><span class="selector-class">.run</span>(NioEventLoop<span class="selector-class">.java</span>:<span class="number">354</span>)</span><br><span class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.SingleThreadEventExecutor</span>$<span class="number">2</span>.run(SingleThreadEventExecutor<span class="selector-class">.java</span>:<span class="number">111</span>)</span><br><span class="line">	... <span class="number">1</span> more</span><br></pre></td></tr></table></figure>
<p>看到 IP:192.168.1.105 后猛然想起，个人使用的笔记本网络连接的是办公室的路由器，而办公室的路由器的 ip 才是和集群的机器 Ip 在同一局域网中，中间跨了级！办公室的路由器又没有设置端口映射，难怪找不到！改为使用单位的无线路由（和集群一个局域网）后就没有此错误了！或者也可以设置一下小路由器的端口映射！</p>
<h1 id="坑四：sbt-或-maven-中的依赖版本（包括小版本）一定要与集群一致"><a href="#坑四：sbt-或-maven-中的依赖版本（包括小版本）一定要与集群一致" class="headerlink" title="坑四：sbt 或 maven 中的依赖版本（包括小版本）一定要与集群一致"></a>坑四：sbt 或 maven 中的依赖版本（包括小版本）一定要与集群一致</h1><p>使用坑三中的 debug on cluster, 由于很早建立的 maven 工程，采用的是 org.apache.spark:spark-core_2.1:2.0.1依赖，后来搭建集群的时候2.0.2版本已经发布，所以采用了最新的，由于大版本一致，所以就没有在意，debug 的时候报以下错误：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.io.InvalidClassException: org.apache.spark.executor.TaskMetrics; <span class="keyword">local</span> <span class="built_in">class</span> incompatible: stream classdesc serialVersionUID = <span class="number">-6966587383730940799</span>, <span class="keyword">local</span> <span class="built_in">class</span> serialVersionUID = <span class="number">-2231953621568687904</span></span><br></pre></td></tr></table></figure>
<p>此问题由小版本不一致导致，说来也正常，向下兼容很正常，但向上的，呵呵，所以保持一致吧！</p>
<h1 id="坑五：找不到类？"><a href="#坑五：找不到类？" class="headerlink" title="坑五：找不到类？"></a>坑五：找不到类？</h1><p>由于工程采用 maven 构建，我使用了 phoenix 的依赖，当 spark.master=local[*]的时候，调试没有任何问题，但是当把 spark.master 设置为 spark://spark-master:7077也就是采用集群的时候，会提示除 spark 自带的（core, sql,mllib, stream）库之外，其他的都提示找不到，解决方案除了 <strong> 1）参考网上的远程调试外</strong> ，现提供另一种方式，<strong> 2)类似于 Hadoop的调试方式</strong></p>
<h2 id="1-设置-artifact"><a href="#1-设置-artifact" class="headerlink" title="1.设置 artifact"></a>1.设置 artifact</h2><p>File -&gt; Project Structre, 在 Artifacts 里边新建一个 jar 包，选择主类，在 Output Layout 中可以删除 spark 相关的（因为集群中已经有了，其他集群中CASSPATH 包含的都可以省掉，减少 jar包体积），最后确认即可。</p>
<p><img src="http://obqjd695a.bkt.clouddn.com/new-artifact.png" alt=""><br><img src="http://obqjd695a.bkt.clouddn.com/artifact-setting.png" alt=""><br><img src="http://obqjd695a.bkt.clouddn.com/artifact-jar-setting.png" alt=""></p>
<h2 id="2-spark-添加-jar-依赖"><a href="#2-spark-添加-jar-依赖" class="headerlink" title="2.spark 添加 jar 依赖"></a>2.spark 添加 jar 依赖</h2><p>只需要个 sparkContext 添加 jar包即可，代码如下</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> val spark = SparkSession.builder().master(<span class="string">"spark://192.168.6.131:7077"</span>).appName(<span class="string">"bigjoy"</span>).getOrCreate()</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意路径是编译后的路径</span></span><br><span class="line">    spark<span class="selector-class">.sparkContext</span><span class="selector-class">.addJar</span>(<span class="string">"/Users/dq/IdeaProjects/subject/out/artifacts/analysis_jar/analysis.jar"</span>)</span><br></pre></td></tr></table></figure>
<p>在debug 前，先 Build -&gt; Build Artifacts -&gt; xxx.jar，把代码中的路径替换为实际的路径，然后就可以像其他普通的代码一样调试了，不过发现运行的比较慢，因为没有与远程调试的进行对比，所以哪个更好一些就暂不能下结论了，不过这个免去了上传 jar 包、spark-submit、remote debug 等过程，简单一些。</p>
<p>就先总结这么多吧！</p>
]]></content>
      
        <categories>
            
            <category> Spark </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spark </tag>
            
            <tag> Intellij IDEA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spark 连接 Phoenix 配置]]></title>
      <url>http://dequn.github.io/2016/11/08/phoenix-spark-setting/</url>
      <content type="html"><![CDATA[<p><strong><em>2017年1月3号更新：</em></strong></p>
<p>在Spark 2.x版本中更改了DataFrame的定义，而Phoenix4.9及以前(4.10后官方版本会修复）是在Spark1.x的环境下开发的，因此如果使用Spark2.x的环境，不能正常使用Phoenix Spark Interprter, 具体问题可以参考 <a href="https://issues.apache.org/jira/browse/PHOENIX-3333" target="_blank" rel="noopener">https://issues.apache.org/jira/browse/PHOENIX-3333</a>，这里给出本人利用链接中的补丁编译后的phoenix，其他参考1.x版本中的配置方式即可。</p>
<p><a href="http://obqjd695a.bkt.clouddn.com/phoenix-4.9.0-HBase-1.2-server.jar" target="_blank" rel="noopener">phoenix-4.9.0-HBase-1.2-server.jar</a></p>
<p><a href="http://obqjd695a.bkt.clouddn.com/phoenix-4.9.0-HBase-1.2-client.jar" target="_blank" rel="noopener">phoenix-4.9.0-HBase-1.2-client.jar</a></p>
<hr>
<p>Phoenix 官方文档给出了如何配置Spark 连接的说明，但是由于版本更新比较快，教程已经有些过时了。</p>
<p>环境配置：</p>
<blockquote>
<p>Spark 1.5.2<br>Phoenix 4.8.0<br>HBase 1.1.2</p>
</blockquote>
<p>如果在 HBase上配置过 Phoenix ，服务端就不需要做任何改动了。</p>
<p>在<strong> Phoenix 4.8</strong> 版本中，已经没有官方示例中的<code>phoenix-&lt;version&gt;-client-spark.jar</code>的文件了，所有的客户端需要的 jar 只有一个<strong> <code>phoenix-&lt;version&gt;-client.jar</code></strong> ！</p>
<p>连接在 Spark 中连接Phoenix 也有两种方式：</p>
<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>spark-shell 启动时添加 phoenix jar.</p>
<p>启动spark-shell 是添加参数–jars 即可<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spark-shell --jars /usr/local/phoenix/phoenix<span class="number">-4.8</span><span class="number">.0</span>-HBase<span class="number">-1.1</span>-client.jar</span><br><span class="line"># ....</span><br><span class="line"># ....</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.phoenix.spark._</span><br><span class="line"></span><br><span class="line"># 这一句不报错的话就说明搞定了</span><br></pre></td></tr></table></figure></p>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>配置 spark-defaults.conf</p>
<p>如果不想每次启动都添加 –jars 参数，可以配置$SPARK_HOME/conf 下边的spark-defaults.conf文件，添加下面两个配置项，注意 jar 文件路径与名称的正确性。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spark<span class="selector-class">.executor</span><span class="selector-class">.extraClassPath</span>      /usr/local/phoenix/phoenix-<span class="number">4.8</span>.<span class="number">0</span>-HBase-<span class="number">1.1</span>-client.jar</span><br><span class="line">spark<span class="selector-class">.driver</span><span class="selector-class">.extraClassPath</span>      /usr/local/phoenix/phoenix-<span class="number">4.8</span>.<span class="number">0</span>-HBase-<span class="number">1.1</span>-client.jar</span><br></pre></td></tr></table></figure></p>
<p>这样再启动spark-shell，就可以直接导入需要的包了，注意 SparkContext sc 和 SQLContext sqlContext 都已经是设置好了的，可以直接用。其他可以参考官方给出的示例。</p>
]]></content>
      
        <categories>
            
            <category> Phoenix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spark </tag>
            
            <tag> Phoenix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pyenv安装多版本 Python 过程中提示警告]]></title>
      <url>http://dequn.github.io/2016/11/02/pyenv-install-with-warnings/</url>
      <content type="html"><![CDATA[<p>在使用 pyenv 安装多版本 Python 时，有时候会遇到警告<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">WARNING:</span> The Python bz2 extension was not compiled. Missing the bzip2 <span class="class"><span class="keyword">lib</span>?</span></span><br><span class="line"><span class="symbol">WARNING:</span> The Python readline extension was not compiled. Missing the GNU readline <span class="class"><span class="keyword">lib</span>?</span></span><br><span class="line"><span class="symbol">WARNING:</span> The Python sqlite3 extension was not compiled. Missing the SQLite3 <span class="class"><span class="keyword">lib</span>?</span></span><br></pre></td></tr></table></figure></p>
<p>只需要根据提示安装就行了（CentOS7环境下):<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install </span>readline readline-devel readline-static -y</span><br><span class="line">yum <span class="keyword">install </span>openssl openssl-devel openssl-static -y</span><br><span class="line">yum <span class="keyword">install </span>sqlite-devel -y</span><br><span class="line">yum <span class="keyword">install </span><span class="keyword">bzip2-devel </span><span class="keyword">bzip2-libs </span>-y</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pyenv </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MacVim自动切换中英文输入法]]></title>
      <url>http://dequn.github.io/2016/10/28/macvim-auto-im/</url>
      <content type="html"><![CDATA[<p>中文用户的使用 VIM 最痛苦的就是来回切换输入法了，还好，在 OS 系统下使用 MacVim 可以设置在命令模式下禁用输入法，这样有了自动切换的效果，设置如下：</p>
<p><strong>第一步</strong>.在.vimrc 中设置<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> noimd</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">imi</span>=2</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">ims</span>=2</span><br></pre></td></tr></table></figure></p>
<p><strong>第二步</strong>.在 MacVim 的 Preferences 中的 Advanced 标签中，<strong>取消勾选 Draw marked text line</strong>。</p>
<p>这样就可以达到一个自动切换的效果（只是在命令行模式下给禁用掉了而已），这个要比设置 vimim 好用多了，vimim 延迟太大，使用非常不方便。</p>
<p>参考：<br>[1].<a href="https://www.v2ex.com/t/45772" target="_blank" rel="noopener">https://www.v2ex.com/t/45772</a></p>
]]></content>
      
        <categories>
            
            <category> Others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VIM </tag>
            
            <tag> MacVim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MapReduce 在 Map 阶段写数据库，没有 Reducer]]></title>
      <url>http://dequn.github.io/2016/10/27/mapreduce-output-to-hbase-at-mapper-phase-without-reducer/</url>
      <content type="html"><![CDATA[<p>手里有一张txt数据表，现在要入库(Phoenix + HBase)，因为需要对数据做一定的处理后再写入数据库，加上数据量不小，所以就想着用 MapReduce 来加速一下入库过程。</p>
<p>拿到一条数据处理后就可以直接入库了，那就没有必要写 Reducer 了，直接全部在 Mapper 里边完成，所以很自然地定义 DBWritable 类，作为 Mapper 的 OutputKeyClass 就行，如下这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.db.DBWritable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by dq on 10/27/16.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDBWritable</span> <span class="keyword">implements</span> <span class="title">Writable</span>, <span class="title">DBWritable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getter and setter ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(PreparedStatement preparedStatement)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">preparedStatement.setInt(<span class="number">1</span>, id);</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>, name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>坑在这里</strong>:其中，<code>write(DataOutput dataOutput), readFields(DataInput dataInput)</code> 是 Writable 接口里边的函数，由于我是写数据库的，就简单的想着没有必要实现了，留空不处理，我也不读数据库，readFields(Result resultSet)就也不写啦。</p>
<p>Mapper 类是这样写的：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static <span class="class"><span class="keyword">class</span> <span class="title">TestMapper</span> <span class="keyword">extends</span> <span class="title">Mapper&lt;LongWritable</span>, <span class="title">Text</span>,<span class="title">NullWritable</span>, <span class="title">TestDBWritable&gt;</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> void map(<span class="type">LongWritable</span> key, <span class="type">Text</span> value, <span class="type">Context</span> context) <span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">InterruptedException</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">TestDBWritable</span> t = <span class="keyword">new</span> <span class="type">TestWritable</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"></span><br><span class="line">context.write(<span class="type">NullWritable</span>.get(), t);</span><br><span class="line"></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后是定义 Job<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="keyword">job</span>.setMapOutputKeyClass(NullWritable.<span class="keyword">class</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">job</span>.setMapOutputValueClass(TestDBWritable.<span class="keyword">class</span>)<span class="comment">;</span></span><br><span class="line"><span class="comment">//....</span></span><br></pre></td></tr></table></figure></p>
<p>满心欢喜地赶紧运行，还好没错，好有成就感地去查一下数据库，发现里边只是多了一个 id 为0，name 为 NULL 的记录罢了， 擦，发生了什么？还好之前搭建的是可以本地调试的环境，打个断点，看一下TestDBWritable 类的 write() 函数执行过程，发现 id 只是初始值，name 全部为NULL！ 顺着<code>context.write()</code>一路查下去，也没有发现 map 输出的时候把值给丢了呀，但进去 write 就变空值，这是肿么回事？</p>
<p>后来想了一下是不是因为 Writable 的两个函数没有实现的原因，带着侥幸心理实现这两个函数<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        dataOutput.writeInt(id);</span><br><span class="line">        dataOutput.writeUTF(name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = dataInput.readInt();</span><br><span class="line">        <span class="keyword">this</span>.name = dataInput.readUTF();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>为了验证一下是不是执行了这两个函数，打上了断点调试一下，发现果然，在执行 context.write()后，执行的值 Writable 的 write 函数，然而并没有接着执行 DBWritable 的 write 函数，而是直到所有的输入数据都执行完毕后，首先执行 readFields 函数，然后又 write。单看此执行路径，<strong>虽然没有定义 reducer，但 Hadoop 还是给我们执行了一个默认的,所以在 map 输出的时候会执行写入缓冲区的 write()函数，在 reducer 里边会执行 read()</strong> 。所以如果不实现那两个函数，Reducer 取到的就是空值。</p>
<p>在网上搜索了一写其他资料，发现情况确实如此，可以参看[<a href="http://blog.csdn.net/yongjian_luo/article/details/9962047" title="Mapreduce不设置reduce，只执行map的输出结果" target="_blank" rel="noopener">1</a>]。</p>
<p>因为 Mapper 的 outkey 是 NullWritable,所有的数据都会发送到同一个节点上进行 Reduce[<a href="https://www.quora.com/Whats-the-key-value-output-of-map-function-if-I-use-context-write-NullWritable-get-new-Text-1" title="What&#39;s the &lt;key, value&gt; output of map function if I use context.write (NullWritable.get(),new Text(1))?" target="_blank" rel="noopener">2</a>]，速度非常慢，这无疑是与初衷相背的，更好的解决办法是参照[<a href="http://blog.csdn.net/yongjian_luo/article/details/9962047" title="Mapreduce不设置reduce，只执行map的输出结果" target="_blank" rel="noopener">1</a>]中的第四条，将 reduce 的数量设置为0，这样 mapper 就不再执行 Writable 的两个函数，会直接写入数据库。</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">job.setNumReduceTasks(<span class="number">0</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><strong>总结:</strong><br>1.如果不设置 Reducer，Hadoop 还是会默认执行一个的，所以最好明确设置 Reducer 的数量为0，这样可以在 Map 阶段就执行输出。<br>2.Map 的 OutputKeyClass 为 NullWritable 的时候，所有的 Reduce 都会发送给一个结点计算，所以不要用 NullWritable 作为Map 的OutputKeyClass.</p>
<p><strong>参考:</strong></p>
<p>[1]:<a href="http://blog.csdn.net/yongjian_luo/article/details/9962047" title="Mapreduce不设置reduce，只执行map的输出结果" target="_blank" rel="noopener">Mapreduce不设置reduce，只执行map的输出结果</a><br>[2]:<a href="https://www.quora.com/Whats-the-key-value-output-of-map-function-if-I-use-context-write-NullWritable-get-new-Text-1" title="What&#39;s the &lt;key, value&gt; output of map function if I use context.write (NullWritable.get(),new Text(1))?" target="_blank" rel="noopener">What’s the &lt;key, value&gt; output of map function if I use context.write (NullWritable.get(),new Text(1))?</a></p>
]]></content>
      
        <categories>
            
            <category> HBase </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> MapReduce </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用 Phoenix 跑 MapReduce 任务-官方例子]]></title>
      <url>http://dequn.github.io/2016/10/07/phoenix-mapreduce-example/</url>
      <content type="html"><![CDATA[<p>Phoenix 提供了 MapReduce 工作任务的支持，并且官方给出了例子，一起来编码运行一下。</p>
<h1 id="1新建-maven-工程"><a href="#1新建-maven-工程" class="headerlink" title="1新建 maven 工程"></a>1新建 maven 工程</h1><p>在 pom.xml 中添加以下内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.phoenix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>phoenix-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7.0-HBase-1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="2新建一个-StockWritable-的-Java-类"><a href="#2新建一个-StockWritable-的-Java-类" class="headerlink" title="2新建一个 StockWritable 的 Java 类"></a>2新建一个 <code>StockWritable</code> 的 Java 类</h1><p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.db.DBWritable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dq on 10/7/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockWritable</span> <span class="keyword">implements</span> <span class="title">DBWritable</span>, <span class="title">Writable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String stockName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStockName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stockName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStockName</span><span class="params">(String stockName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stockName = stockName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span>[] getRecordings() &#123;</span><br><span class="line">        <span class="keyword">return</span> recordings;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRecordings</span><span class="params">(<span class="keyword">double</span>[] recordings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.recordings = recordings;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMaxPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxPrice</span><span class="params">(<span class="keyword">double</span> maxPrice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxPrice = maxPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[] recordings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> maxPrice;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(PreparedStatement preparedStatement)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, <span class="keyword">this</span>.stockName);</span><br><span class="line">        preparedStatement.setDouble(<span class="number">2</span>, <span class="keyword">this</span>.maxPrice);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.stockName = resultSet.getString(<span class="string">"STOCK_NAME"</span>);</span><br><span class="line">        <span class="keyword">this</span>.year = resultSet.getInt(<span class="string">"RECORDING_YEAR"</span>);</span><br><span class="line">        <span class="keyword">this</span>.recordings = (<span class="keyword">double</span>[]) resultSet.getArray(<span class="string">"RECORDINGS_QUARTER"</span>).getArray();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3Mapper-Reducer"><a href="#3Mapper-Reducer" class="headerlink" title="3Mapper, Reducer"></a>3Mapper, Reducer</h1><p>新建一个 PhoenixMapRed 类，实现 map(), reduce(), 并且添加主函数</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.<span class="type">Configuration</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.<span class="type">HBaseConfiguration</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.mapreduce.<span class="type">TableMapReduceUtil</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.<span class="type">DoubleWritable</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.<span class="type">NullWritable</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.<span class="type">Text</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.<span class="type">Job</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.<span class="type">Mapper</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.<span class="type">Reducer</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.phoenix.mapreduce.<span class="type">PhoenixOutputFormat</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.phoenix.mapreduce.util.<span class="type">PhoenixMapReduceUtil</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dq on 10/7/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">PhoenixMapRed</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static <span class="class"><span class="keyword">class</span> <span class="title">StockMapper</span> <span class="keyword">extends</span> <span class="title">Mapper&lt;NullWritable</span>, <span class="title">StockWritable</span>, <span class="title">Text</span>, <span class="title">DoubleWritable&gt;</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Text</span> stock = <span class="keyword">new</span> <span class="type">Text</span>();</span><br><span class="line">        <span class="type">DoubleWritable</span> price = <span class="keyword">new</span> <span class="type">DoubleWritable</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> void map(<span class="type">NullWritable</span> key, <span class="type">StockWritable</span> value, <span class="type">Context</span> context) <span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">InterruptedException</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> name = value.getStockName();</span><br><span class="line">            double[] recordings = value.getRecordings();</span><br><span class="line"></span><br><span class="line">            double maxRecording = <span class="type">Double</span>.<span class="type">MIN_VALUE</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (double d : recordings) &#123;</span><br><span class="line">                maxRecording = <span class="type">Math</span>.max(maxRecording, d);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            stock.set(name);</span><br><span class="line">            price.set(maxRecording);</span><br><span class="line"></span><br><span class="line">            context.write(stock, price);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static <span class="class"><span class="keyword">class</span> <span class="title">StockReducer</span> <span class="keyword">extends</span> <span class="title">Reducer&lt;Text</span>, <span class="title">DoubleWritable</span>, <span class="title">NullWritable</span>, <span class="title">StockWritable&gt;</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> void reduce(<span class="type">Text</span> key, <span class="type">Iterable</span>&lt;<span class="type">DoubleWritable</span>&gt; values, <span class="type">Context</span> context) <span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">InterruptedException</span> &#123;</span><br><span class="line"></span><br><span class="line">            double maxPrice = <span class="type">Double</span>.<span class="type">MIN_VALUE</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">DoubleWritable</span> <span class="keyword">val</span> : values) &#123;</span><br><span class="line">                maxPrice = <span class="type">Math</span>.max(maxPrice, <span class="keyword">val</span>.get());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">StockWritable</span> stockWritable = <span class="keyword">new</span> <span class="type">StockWritable</span>();</span><br><span class="line">            stockWritable.setStockName(key.toString());</span><br><span class="line">            stockWritable.setMaxPrice(maxPrice);</span><br><span class="line"></span><br><span class="line">            context.write(<span class="type">NullWritable</span>.get(), stockWritable);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(<span class="type">String</span>[] args) <span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">ClassNotFoundException</span>, <span class="type">InterruptedException</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Configuration</span> conf = <span class="type">HBaseConfiguration</span>.create();</span><br><span class="line"></span><br><span class="line">        <span class="type">Job</span> job = <span class="type">Job</span>.getInstance(conf, <span class="string">"stock"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> selectQuery = <span class="string">"SELECT STOCK_NAME,RECORDING_YEAR,RECORDINGS_QUARTER FROM STOCK "</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">PhoenixMapReduceUtil</span>.setInput(job, <span class="type">StockWritable</span>.<span class="keyword">class</span>, <span class="string">"STOCK"</span>, selectQuery);</span><br><span class="line">        <span class="type">PhoenixMapReduceUtil</span>.setOutput(job, <span class="string">"STOCK_STATS"</span>, <span class="string">"STOCK_NAME,MAX_RECORDING"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        job.setMapperClass(<span class="type">StockMapper</span>.<span class="keyword">class</span>);</span><br><span class="line">        job.setReducerClass(<span class="type">StockReducer</span>.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">        job.setOutputFormatClass(<span class="type">PhoenixOutputFormat</span>.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        job.setMapOutputKeyClass(<span class="type">Text</span>.<span class="keyword">class</span>);</span><br><span class="line">        job.setMapOutputValueClass(<span class="type">DoubleWritable</span>.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">        job.setOutputKeyClass(<span class="type">NullWritable</span>.<span class="keyword">class</span>);</span><br><span class="line">        job.setOutputValueClass(<span class="type">StockWritable</span>.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TableMapReduceUtil</span>.addDependencyJars(job);</span><br><span class="line">        job.waitForCompletion(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意，代码中的<code>PhoenixMapReduceUtil.setOutput(job, &quot;STOCK_STATS&quot;, &quot;STOCK_NAME,MAX_RECORDING&quot;);</code>一句与官方文档不一样，官方上的应该是老代码，运行时有错误。</strong></p>
<h1 id="4数据表建立，数据导入，略。"><a href="#4数据表建立，数据导入，略。" class="headerlink" title="4数据表建立，数据导入，略。"></a>4数据表建立，数据导入，略。</h1><h1 id="5编译"><a href="#5编译" class="headerlink" title="5编译"></a>5编译</h1><p>编译的过程是一个比较复杂的过程，官方的例子并没有给出过程，在使用<code>javac</code>编译前，需要将<code>phoenix-4.8.0-HBase-1.1-client.jar</code>添加到<code>CLASSPATH</code>中,编译后会生成4个文件，再使用 <code>jar</code>命令生成 .jar 文件。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export CLASSPATH=/usr/local/hbase/lib/phoenix-<span class="number">4.8</span>.<span class="number">0</span>-HBase-<span class="number">1.1</span>-client<span class="selector-class">.jar</span>:<span class="variable">$CLASSPATH</span></span><br><span class="line"></span><br><span class="line">javac PhoenixMapRed.java</span><br><span class="line">#生成<span class="number">4</span>个文件 PhoenixMapRed<span class="selector-class">.class</span> PhoenixMapRed<span class="variable">$StockMapper</span><span class="selector-class">.class</span> PhoenixMapRed<span class="variable">$StockReducer</span><span class="selector-class">.class</span>  StockWritable.class</span><br><span class="line"></span><br><span class="line">jar -cvf PhoenixMapRed<span class="selector-class">.jar</span> PhoenixMapRed<span class="selector-class">.class</span> PhoenixMapRed<span class="variable">$StockMapper</span><span class="selector-class">.class</span> PhoenixMapRed<span class="variable">$StockReducer</span><span class="selector-class">.class</span>  StockWritable.class</span><br></pre></td></tr></table></figure>
<h1 id="6运行"><a href="#6运行" class="headerlink" title="6运行"></a>6运行</h1><p>如果现在直接执行<code>hadoop jar PhoenixMapRed.jar PhoenixMapRed</code>的话，会抛出异常：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.lang</span><span class="selector-class">.NoClassDefFoundError</span>: org/apache/hadoop/hbase/HBaseConfiguration</span><br><span class="line">	at PhoenixMapRed.main(PhoenixMapRed<span class="selector-class">.java</span>:<span class="number">73</span>)</span><br><span class="line">	at sun<span class="selector-class">.reflect</span><span class="selector-class">.NativeMethodAccessorImpl</span><span class="selector-class">.invoke0</span>(Native Method)</span><br><span class="line">	at sun<span class="selector-class">.reflect</span><span class="selector-class">.NativeMethodAccessorImpl</span><span class="selector-class">.invoke</span>(NativeMethodAccessorImpl<span class="selector-class">.java</span>:<span class="number">62</span>)</span><br><span class="line">	at sun<span class="selector-class">.reflect</span><span class="selector-class">.DelegatingMethodAccessorImpl</span><span class="selector-class">.invoke</span>(DelegatingMethodAccessorImpl<span class="selector-class">.java</span>:<span class="number">43</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.Method</span><span class="selector-class">.invoke</span>(Method<span class="selector-class">.java</span>:<span class="number">498</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.run</span>(RunJar<span class="selector-class">.java</span>:<span class="number">221</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.main</span>(RunJar<span class="selector-class">.java</span>:<span class="number">136</span>)</span><br><span class="line">Caused by: java<span class="selector-class">.lang</span><span class="selector-class">.ClassNotFoundException</span>: org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.HBaseConfiguration</span></span><br><span class="line">	at java<span class="selector-class">.net</span><span class="selector-class">.URLClassLoader</span><span class="selector-class">.findClass</span>(URLClassLoader<span class="selector-class">.java</span>:<span class="number">381</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.ClassLoader</span><span class="selector-class">.loadClass</span>(ClassLoader<span class="selector-class">.java</span>:<span class="number">424</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.ClassLoader</span><span class="selector-class">.loadClass</span>(ClassLoader<span class="selector-class">.java</span>:<span class="number">357</span>)</span><br></pre></td></tr></table></figure>
<p>这次需要将<code>phoenix-4.8.0-HBase-1.1-client.jar</code>添加到 <code>HADOOP_CLASSPATH</code>中，然后再执行任务。</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_CLASSPATH</span>=/usr/local/hbase/lib/phoenix-4.8.0-HBase-1.1-client.jar:$HADOOP_CLASSPATH</span><br><span class="line">hadoop jar PhoenixMapRed.jar PhoenixMapRed</span><br><span class="line"><span class="comment">#...执行正常</span></span><br></pre></td></tr></table></figure>
<h1 id="7结果查看"><a href="#7结果查看" class="headerlink" title="7结果查看"></a>7结果查看</h1><p>在phoenix 的 sqlline 环境中执行查询，会看到结果</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0: jdbc:phoenix:localhost&gt; select * from stock<span class="emphasis">_stats;</span></span><br><span class="line"><span class="emphasis">+-------------+----------------+</span></span><br><span class="line"><span class="emphasis">| STOCK_</span>NAME  | MAX<span class="emphasis">_RECORDING  |</span></span><br><span class="line"><span class="emphasis">+-------------+----------------+</span></span><br><span class="line"><span class="emphasis">| AAPL        | 200.26         |</span></span><br><span class="line"><span class="emphasis">| CSCO        | 27.98          |</span></span><br><span class="line"><span class="emphasis">| GOOG        | 697.37         |</span></span><br><span class="line"><span class="emphasis">| MSFT        | 35.96          |</span></span><br><span class="line"><span class="emphasis">| YHOO        | 41.22          |</span></span><br><span class="line"><span class="emphasis">+-------------+----------------+</span></span><br><span class="line"><span class="emphasis">5 rows selected (0.298 seconds)</span></span><br></pre></td></tr></table></figure>
<p>至此，该例子成功运行。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="http://phoenix.apache.org/phoenix_mr.html" target="_blank" rel="noopener">Phoenix Map Reduce</a><br>2.<a href="http://stackoverflow.com/questions/30801364/mapreduce-hadoop-2-6-0-hbase-1-0-1-1-class-not-found-exception" target="_blank" rel="noopener">MapReduce (Hadoop-2.6.0)+ HBase-1.0.1.1 class not found exception</a></p>
]]></content>
      
        <categories>
            
            <category> Phoenix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MapReduce </tag>
            
            <tag> Phoenix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Phoenix Secondary Index初探之Local Index]]></title>
      <url>http://dequn.github.io/2016/09/02/Phoenix-Secondary-Index-Exploration-Local-Index/</url>
      <content type="html"><![CDATA[<p>上一篇探索了 Phoenix 的 Global Index，这一次来看一看 Local Index 的实现原理。</p>
<p>首先需要说明的是实验采用的 Phoenix 版本号是4.8，从4.8开始，Phoenix 的Local Index 不再采用新建数据表的方式，从官方的描述中可以看出这一点变化：</p>
<blockquote>
<p>Unlike global indexes, all local indexes of a table are stored in a single, separate shared table prior to 4.8.0 version. From 4.8.0 onwards we are storing all local index data in the separate shadow column families in the same data table. </p>
</blockquote>
<p>不过什么是 <strong>shadow column families</strong>? 这一点确实把我弄蒙了，百度 Google 都没有搜出相关的概念，先不管那么多了，先心无旁骛的直奔目标吧。</p>
<p>需要说明的另一点是由于上一次采用的表数据量有些大，在建立 Local Index总是出错，使用 <code>!tables</code> 命令查看索引表总是处于 <strong>BUILDING</strong> 状态，所以这次新建了一个表进行试验，原理明白就好。</p>
<h1 id="1-新建数据表、索引和插入数据"><a href="#1-新建数据表、索引和插入数据" class="headerlink" title="1.新建数据表、索引和插入数据"></a>1.新建数据表、索引和插入数据</h1><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> zdq.test (id BIGINT <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>, X INTEGER, Y INTEGER, Z INTEGER, M DECIMAL, N SMALLINT);</span><br><span class="line">ALTER TABLE zdq.test set IMMUTABLE_ROWS = true; # can not set local <span class="keyword">index</span> <span class="keyword">if</span> IMMUTABLE_ROWS = fasle <span class="keyword">or</span> need <span class="keyword">set</span> hbse-site.xml</span><br><span class="line"><span class="keyword">CREATE</span> LOCAL <span class="keyword">INDEX</span> X_IDX <span class="keyword">ON</span> zdq.test (x);</span><br><span class="line"><span class="keyword">CREATE</span> LOCAL <span class="keyword">INDEX</span> Y_IDX <span class="keyword">ON</span> zdq.test (y);</span><br><span class="line"><span class="keyword">CREATE</span> LOCAL <span class="keyword">INDEX</span> Z_IDX <span class="keyword">ON</span> zdq.test (z);</span><br><span class="line"><span class="keyword">UPSERT</span> <span class="keyword">INTO</span> zdq.test (id, x, y, z, m, n) <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">UPSERT</span> <span class="keyword">INTO</span> zdq.test (id, x, y, z, m, n) <span class="keyword">VALUES</span> (<span class="number">123456</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>使用 <code>!tables</code> 查看一下数据表，发现多了<strong>四个表</strong>,一个主数据表，三个索引表。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+------------+--------------+-------------+---------------+----------+------------+----------------------------+-----------------+--------------+-----------------+---------------+---------------+--------+</span><br><span class="line">|<span class="string"> TABLE_CAT  </span>|<span class="string"> TABLE_SCHEM  </span>|<span class="string"> TABLE_NAME  </span>|<span class="string">  TABLE_TYPE   </span>|<span class="string"> REMARKS  </span>|<span class="string"> TYPE_NAME  </span>|<span class="string"> SELF_REFERENCING_COL_NAME  </span>|<span class="string"> REF_GENERATION  </span>|<span class="string"> INDEX_STATE  </span>|<span class="string"> IMMUTABLE_ROWS  </span>|<span class="string"> SALT_BUCKETS  </span>|<span class="string"> MULTI_TENANT  </span>|<span class="string"> VIEW_S </span>|</span><br><span class="line">+------------+--------------+-------------+---------------+----------+------------+----------------------------+-----------------+--------------+-----------------+---------------+---------------+--------+</span><br><span class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> X_IDX       </span>|<span class="string"> INDEX         </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string"> ACTIVE       </span>|<span class="string"> true            </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Y_IDX       </span>|<span class="string"> INDEX         </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string"> ACTIVE       </span>|<span class="string"> true            </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Z_IDX       </span>|<span class="string"> INDEX         </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string"> ACTIVE       </span>|<span class="string"> true            </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> SYSTEM       </span>|<span class="string"> CATALOG     </span>|<span class="string"> SYSTEM TABLE  </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string">              </span>|<span class="string"> false           </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> SYSTEM       </span>|<span class="string"> FUNCTION    </span>|<span class="string"> SYSTEM TABLE  </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string">              </span>|<span class="string"> false           </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> SYSTEM       </span>|<span class="string"> SEQUENCE    </span>|<span class="string"> SYSTEM TABLE  </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string">              </span>|<span class="string"> false           </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> SYSTEM       </span>|<span class="string"> STATS       </span>|<span class="string"> SYSTEM TABLE  </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string">              </span>|<span class="string"> false           </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> IMOS        </span>|<span class="string"> TABLE         </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string">              </span>|<span class="string"> true            </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> TEST        </span>|<span class="string"> TABLE         </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string">              </span>|<span class="string"> true            </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</span><br><span class="line">+------------+--------------+-------------+---------------+----------+------------+----------------------------+-----------------+--------------+-----------------+---------------+---------------+--------+</span><br></pre></td></tr></table></figure>
<p>在 HBase Shell 中使用 <code>list</code> 命令查看一下，<strong>和 Global Index 不一样的是，只多出了一个表 ‘ZDQ.TEST’</strong>。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">hbase</span><span class="params">(main)</span></span>:<span class="number">001</span>:<span class="number">0</span>&gt; list</span><br><span class="line">TABLE</span><br><span class="line">BIGJOY.IMOS</span><br><span class="line">BIGJOY.POIS</span><br><span class="line">BIGJOY.POIS_MAC_IDX</span><br><span class="line">SYSTEM.CATALOG</span><br><span class="line">SYSTEM.FUNCTION</span><br><span class="line">SYSTEM.SEQUENCE</span><br><span class="line">SYSTEM.STATS</span><br><span class="line">ZDQ.TEST</span><br><span class="line"><span class="number">8</span> row(s) <span class="keyword">in</span> <span class="number">0.2320</span> seconds</span><br><span class="line"></span><br><span class="line">=&gt; [<span class="string">"BIGJOY.IMOS"</span>, <span class="string">"BIGJOY.POIS"</span>, <span class="string">"BIGJOY.POIS_MAC_IDX"</span>, <span class="string">"SYSTEM.CATALOG"</span>, <span class="string">"SYSTEM.FUNCTION"</span>, <span class="string">"SYSTEM.SEQUENCE"</span>, <span class="string">"SYSTEM.STATS"</span>, <span class="string">"ZDQ.TEST"</span>]</span><br><span class="line"><span class="function"><span class="title">hbase</span><span class="params">(main)</span></span>:<span class="number">002</span>:<span class="number">0</span>&gt;</span><br></pre></td></tr></table></figure>
<h1 id="2-数据表、索引表结构探究"><a href="#2-数据表、索引表结构探究" class="headerlink" title="2.数据表、索引表结构探究"></a>2.数据表、索引表结构探究</h1><p>查看三个索引表的主键！<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">0: jdbc:phoenix:localhost&gt; !primarykeys zdq.z_idx</span><br><span class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</span><br><span class="line">|<span class="string"> TABLE_CAT  </span>|<span class="string"> TABLE_SCHEM  </span>|<span class="string"> TABLE_NAME  </span>|<span class="string"> COLUMN_NAME  </span>|<span class="string"> KEY_SEQ  </span>|<span class="string"> PK_NAME  </span>|<span class="string"> ASC_OR_DESC  </span>|<span class="string"> DATA_TYPE  </span>|<span class="string"> TYPE_NAME  </span>|<span class="string"> COLUMN_SIZE  </span>|<span class="string"> TYPE_ID  </span>|<span class="string"> VIEW_CONSTANT  </span>|</span><br><span class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</span><br><span class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Z_IDX       </span>|<span class="string"> 0:Z          </span>|<span class="string"> 2        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 3          </span>|<span class="string"> DECIMAL    </span>|<span class="string"> null         </span>|<span class="string"> 3        </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Z_IDX       </span>|<span class="string"> :ID          </span>|<span class="string"> 3        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> -5         </span>|<span class="string"> BIGINT     </span>|<span class="string"> null         </span>|<span class="string"> -5       </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Z_IDX       </span>|<span class="string"> _INDEX_ID    </span>|<span class="string"> 1        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 5          </span>|<span class="string"> SMALLINT   </span>|<span class="string"> null         </span>|<span class="string"> 5        </span>|<span class="string">                </span>|</span><br><span class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</span><br><span class="line">0: jdbc:phoenix:localhost&gt; !primarykeys zdq.x_idx</span><br><span class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</span><br><span class="line">|<span class="string"> TABLE_CAT  </span>|<span class="string"> TABLE_SCHEM  </span>|<span class="string"> TABLE_NAME  </span>|<span class="string"> COLUMN_NAME  </span>|<span class="string"> KEY_SEQ  </span>|<span class="string"> PK_NAME  </span>|<span class="string"> ASC_OR_DESC  </span>|<span class="string"> DATA_TYPE  </span>|<span class="string"> TYPE_NAME  </span>|<span class="string"> COLUMN_SIZE  </span>|<span class="string"> TYPE_ID  </span>|<span class="string"> VIEW_CONSTANT  </span>|</span><br><span class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</span><br><span class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> X_IDX       </span>|<span class="string"> 0:X          </span>|<span class="string"> 2        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 3          </span>|<span class="string"> DECIMAL    </span>|<span class="string"> null         </span>|<span class="string"> 3        </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> X_IDX       </span>|<span class="string"> :ID          </span>|<span class="string"> 3        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> -5         </span>|<span class="string"> BIGINT     </span>|<span class="string"> null         </span>|<span class="string"> -5       </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> X_IDX       </span>|<span class="string"> _INDEX_ID    </span>|<span class="string"> 1        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 5          </span>|<span class="string"> SMALLINT   </span>|<span class="string"> null         </span>|<span class="string"> 5        </span>|<span class="string">                </span>|</span><br><span class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</span><br><span class="line">0: jdbc:phoenix:localhost&gt; !primarykeys zdq.y_idx</span><br><span class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</span><br><span class="line">|<span class="string"> TABLE_CAT  </span>|<span class="string"> TABLE_SCHEM  </span>|<span class="string"> TABLE_NAME  </span>|<span class="string"> COLUMN_NAME  </span>|<span class="string"> KEY_SEQ  </span>|<span class="string"> PK_NAME  </span>|<span class="string"> ASC_OR_DESC  </span>|<span class="string"> DATA_TYPE  </span>|<span class="string"> TYPE_NAME  </span>|<span class="string"> COLUMN_SIZE  </span>|<span class="string"> TYPE_ID  </span>|<span class="string"> VIEW_CONSTANT  </span>|</span><br><span class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</span><br><span class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Y_IDX       </span>|<span class="string"> 0:Y          </span>|<span class="string"> 2        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 3          </span>|<span class="string"> DECIMAL    </span>|<span class="string"> null         </span>|<span class="string"> 3        </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Y_IDX       </span>|<span class="string"> :ID          </span>|<span class="string"> 3        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> -5         </span>|<span class="string"> BIGINT     </span>|<span class="string"> null         </span>|<span class="string"> -5       </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Y_IDX       </span>|<span class="string"> _INDEX_ID    </span>|<span class="string"> 1        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 5          </span>|<span class="string"> SMALLINT   </span>|<span class="string"> null         </span>|<span class="string"> 5        </span>|<span class="string">                </span>|</span><br><span class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</span><br></pre></td></tr></table></figure></p>
<p>发现三个索引表中除了<strong>被索引的字段</strong>字段不同外，其他组成并且在主键中的顺序都是一样的，下面看一下执行计划！</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">0: jdbc:phoenix:localhost&gt; explain select * <span class="keyword">from</span> zdq.test where x = 1;</span><br><span class="line">+---------------------------------------------------------------------------+</span><br><span class="line">|                                   PLAN                                    |</span><br><span class="line">+---------------------------------------------------------------------------+</span><br><span class="line">|<span class="built_in"> CLIENT </span>1-CHUNK PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER ZDQ.TEST [1,1]  |</span><br><span class="line">|    <span class="built_in"> SERVER FILTER </span>BY FIRST KEY ONLY                                       |</span><br><span class="line">+---------------------------------------------------------------------------+</span><br><span class="line">2 rows selected (0.064 seconds)</span><br><span class="line">0: jdbc:phoenix:localhost&gt; explain select * <span class="keyword">from</span> zdq.test where y &gt; 3;</span><br><span class="line">+-----------------------------------------------------------------------------------+</span><br><span class="line">|                                       PLAN                                        |</span><br><span class="line">+-----------------------------------------------------------------------------------+</span><br><span class="line">|<span class="built_in"> CLIENT </span>1-CHUNK PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER ZDQ.TEST [2,3] - [2,*]  |</span><br><span class="line">|    <span class="built_in"> SERVER FILTER </span>BY FIRST KEY ONLY                                               |</span><br><span class="line">+-----------------------------------------------------------------------------------+</span><br><span class="line">2 rows selected (0.067 seconds)</span><br><span class="line">0: jdbc:phoenix:localhost&gt; explain select * <span class="keyword">from</span> zdq.test where z &lt; 2;</span><br><span class="line">+-----------------------------------------------------------------------------------+</span><br><span class="line">|                                       PLAN                                        |</span><br><span class="line">+-----------------------------------------------------------------------------------+</span><br><span class="line">|<span class="built_in"> CLIENT </span>1-CHUNK PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER ZDQ.TEST [3,*] - [3,2]  |</span><br><span class="line">|    <span class="built_in"> SERVER FILTER </span>BY FIRST KEY ONLY                                               |</span><br><span class="line">+-----------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<p>从给出的执行计划中可以看出，三次查询都是进行的<strong>RANGE SCAN</strong>,但是注意到 <code>[1,1],[2,3] - [2,*],[3,*] - [3,2]</code>的不同，虽然对其中含义不完全确定，可以知道的是中括号的第二个数和查询约束相关，第一个数吗，是索引建立的顺序？这样也可以与索引表的 primary key 组成的<code>_INDEX_ID</code>的字面意义对应，猜测而已，接下来看一下在 HBase Shell 中的结果吧！</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):004:0&gt; scan 'ZDQ.TEST'</span><br><span class="line">ROW                                                  COLUMN+CELL</span><br><span class="line"> <span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>C1<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009      column=L#0:_0, timestamp=1472824360985, value=_0</span><br><span class="line"> <span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>C1<span class="symbol">\x</span>05<span class="symbol">\x</span>00<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@   column=L#0:_0, timestamp=1472824362230, value=_0</span><br><span class="line"> <span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>C1<span class="symbol">\x</span>03<span class="symbol">\x</span>00<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009      column=L#0:_0, timestamp=1472824360985, value=_0</span><br><span class="line"> <span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>C1<span class="symbol">\x</span>06<span class="symbol">\x</span>00<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@   column=L#0:_0, timestamp=1472824362230, value=_0</span><br><span class="line"> <span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>C1<span class="symbol">\x</span>04<span class="symbol">\x</span>00<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009      column=L#0:_0, timestamp=1472824360985, value=_0</span><br><span class="line"> <span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>C1<span class="symbol">\x</span>07<span class="symbol">\x</span>00<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@   column=L#0:_0, timestamp=1472824362230, value=_0</span><br><span class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009                          column=0:M, timestamp=1472824360985, value=<span class="symbol">\x</span>C1<span class="symbol">\x</span>02</span><br><span class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009                          column=0:N, timestamp=1472824360985, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00</span><br><span class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009                          column=0:X, timestamp=1472824360985, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01</span><br><span class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009                          column=0:Y, timestamp=1472824360985, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>02</span><br><span class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009                          column=0:Z, timestamp=1472824360985, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>03</span><br><span class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009                          column=0:_0, timestamp=1472824360985, value=x</span><br><span class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@                       column=0:M, timestamp=1472824362230, value=<span class="symbol">\x</span>C1<span class="symbol">\x</span>03</span><br><span class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@                       column=0:N, timestamp=1472824362230, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>01</span><br><span class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@                       column=0:X, timestamp=1472824362230, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>04</span><br><span class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@                       column=0:Y, timestamp=1472824362230, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>05</span><br><span class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@                       column=0:Z, timestamp=1472824362230, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>06</span><br><span class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@                       column=0:_0, timestamp=1472824362230, value=x</span><br><span class="line">8 row(s) in 0.0570 seconds</span><br></pre></td></tr></table></figure>
<p>注意到，我们只插入了两行，应该只有两个主键才对，HBase Shell 中我们看到了<strong>8个主键</strong>,含有<code>0:M,0:N,0:X,0:Y,0:Z</code>的两行无疑是我们执行 <code>UPSERT</code> 命令插入的，剩下的六行是什么鬼？</p>
<p>以<code>\x00\x00\xC1\x02\x00\x80\x00\x00\x00\x00\x0009</code> 和 <code>\x00\x00\xC1\x05\x00\x80\x00\x00\x00\x00\x01\xE2@</code> 为例，很快我们就可以发现这两行的后半截 <code>\x80\x00\x00\x00\x00\x0009</code> 就是原数据表的主键了，这与 <code>!primarykeys</code> 中看到的 <code>:ID</code>的 <code>KEY_SEQ = 3</code> 是一致的。</p>
<p>剩下前边的 <code>\x00\x00\xC1\x02\x00</code> 和 <code>\x00\x00\xC1\x05\x00</code> ,不过代表什么意思就得猜了，索引表主键查看的结果中，被索引字段(姑且还这么叫吧)是被放在了第二位的 <code>KEY_SEQ = 2</code> ，并且是 <code>Decimal</code>类型的，这就是为什么在创建表的时候多了一个 Decimal 类型的字段 <code>M</code>,在 HBase Shell 中的查询结果有这么一行<code>\x80\x00\x00\x00\x00\x00\x04\xD2                    column=0:M, timestamp=1472822139596, value=\xC1\x02</code>,看 M 的值对比<code>\x00\x00\xC1\x02\x00</code>，发现出后边多了一个 <code>\x00</code>之外，其余是吻合的，即 X = M，前缀 <code>\x00\x00</code> <code>\x00\x01</code> <code>\x00\x02</code> 应该就是三个索引的编号了，如果在创建第四个索引，就还会多出 N 行，N 为原始数据的行数，经过实践确实如此，只是中间的一个 <code>\x00</code> 是做什么用的还不清楚！</p>
<p>从这里大概可以猜出 <strong>shadow column families</strong>的意思了，应该就是指在同一个表中添加主键构成不同的行作为索引。</p>
<h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h1><p>经过以上实验，总结 Phoenix 的 Local Index ：</p>
<ul>
<li>从 Phoenix 4.8 版本开始，Local Index 和原始数据是存在于一个表中的！</li>
<li>Local Index 先范围扫描约束，根据得到的 <code>:ID</code> 再查询原始数据，所以 Local Index 是可以用在任意字段的查询中都有作用！</li>
<li>shadow column families 应该就是一个小 trick 而已，弄得概念很高大上，如果我理解错了还望指正。</li>
<li>Local Index 查询至少经过一次 RANGE SCAN 和 GET ，所以效率上肯定不如 Global Index 高。</li>
<li>疑问1：Local Index 是保证了索引表和原始表在同一个 RegionServer 上的，如果在一个表中，行健组成又不同，Phoenix 是如何实现这一点的？</li>
<li>官方文档说：如果一个 Local Index 被使用，所用的 Region 都要被检查是否有满足约束的数据，所以读取效率很低呐！</li>
</ul>
<p>最后，发现 Phoenix 把各种 Data Type 的都变成 Hexacdemical 字符串了，很不利于人来查看，虽然在 Phoenix 的交互命令行中是类如 RDMBS 的可读的，但在这次实验中也发现了这些 Hexacdemical 太不友好，如果有必要并且找到比较好的解决方案的话，大家给提供些帮助如何使 hexacdemical readable?</p>
]]></content>
      
        <categories>
            
            <category> Phoenix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HBase </tag>
            
            <tag> Secondary Index </tag>
            
            <tag> Phoenix </tag>
            
            <tag> Local Index </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Phoenix Secondary Index初探之Global Index]]></title>
      <url>http://dequn.github.io/2016/08/29/Phoenix-Secondary-Index-Exploration-Global-Index/</url>
      <content type="html"><![CDATA[<p>上篇我们提到了HBase建立二级索引的原理，但是当我们自己建立二级索引，就需要做额外很多工作，我们需要定义Coprocessor，在数据更新的时候更新索引，查询时先去检索索引表等，定义这些Coprocessor不仅费时费力，而且一般使用者不能保证程序的高效性、健壮性等。还好，已经有不少构建在HBase上的插件——个人觉得称之为插件更为合理，已经帮我们做了这些工作，Phoenix就是其中一种。</p>
<p>Phoenix提供的二级索引按索引对象可以分为Covered Indexes 和 Functional Indexes，Covered Indexed就是对原始数据进行所以，Functional Indexes就是就原始数据进行处理后再索引，区别从<a href="https://phoenix.apache.org/secondary_indexing.html" target="_blank" rel="noopener">官方给出的两个例子</a>就可以很明显的看出，不再讨论。</p>
<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Covered Indexes</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> my_index <span class="keyword">ON</span> my_table (v1,v2) <span class="keyword">INCLUDE</span>(v3)</span><br><span class="line"></span><br><span class="line"># Functional Indexes</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> UPPER_NAME_IDX <span class="keyword">ON</span> EMP (<span class="built_in">UPPER</span>(FIRST_NAME||<span class="string">' '</span>||LAST_NAME))</span><br><span class="line"><span class="keyword">SELECT</span> EMP_ID <span class="keyword">FROM</span> EMP <span class="keyword">WHERE</span> <span class="built_in">UPPER</span>(FIRST_NAME||<span class="string">' '</span>||LAST_NAME)=<span class="string">'JOHN DOE'</span></span><br></pre></td></tr></table></figure>
<p>另外Phoenix的索引分为<strong>Global Indexes</strong> 和 <strong>Local Indexes</strong>,官方文档提到，Global Index适合适用于<strong>读多写少</strong>的场景，Local Index适合<strong>频繁写</strong>的场景，那么这两种索引到底有什么区别呢？</p>
<h1 id="1-建立数据表，明确需求"><a href="#1-建立数据表，明确需求" class="headerlink" title="1 建立数据表，明确需求"></a>1 建立数据表，明确需求</h1><p>因为是课题需要，已经存在一张数据表<code>BIGJOY.IMOS</code>，大概有400万行的数据，最初就是使用Phoenix建立的，给大家看一下该表的结构，注意该cell不是HBase的Cell，不要混淆。</p>
<table>
<thead>
<tr>
<th>COLUMN_NAME</th>
<th>DATA_TYPE</th>
<th>TYPE_NAME</th>
</tr>
</thead>
<tbody>
<tr>
<td>ID</td>
<td>1</td>
<td>CHAR</td>
</tr>
<tr>
<td>FLOOR</td>
<td>1</td>
<td>CHAR</td>
</tr>
<tr>
<td>TIME</td>
<td>93</td>
<td>TIMESTAMP</td>
</tr>
<tr>
<td>MAC</td>
<td>1</td>
<td>CHAR</td>
</tr>
<tr>
<td>X</td>
<td>4</td>
<td>INTEGER</td>
</tr>
<tr>
<td>Y</td>
<td>4</td>
<td>INTEGER</td>
</tr>
<tr>
<td>CELL</td>
<td>1</td>
<td>CHAR</td>
</tr>
</tbody>
</table>
<p><strong>需求:</strong>1.根据mac和time约束查询cell;2.根据cell和time约束查询mac。以需求1为例，探索Phoenix Secondary Index的工作原理。</p>
<h1 id="2-对比案例"><a href="#2-对比案例" class="headerlink" title="2 对比案例"></a>2 对比案例</h1><p>为了方便和严谨，本文建立索引前后进行了下面的八个查询，也是从这八个查询探究Phoenix Secondary Index，下面就先列出这8个查询语句。</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>SQl</th>
<th>查询结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>select cell from bigjoy.imos where mac = &#39;28E14CA61635&#39;;</code></td>
<td>28条记录</td>
</tr>
<tr>
<td>2</td>
<td><code>select time from bigjoy.imos where mac = &#39;28E14CA61635&#39;;</code></td>
<td>28条记录</td>
</tr>
<tr>
<td>3</td>
<td><code>select floor from bigjoy.imos where mac = &#39;28E14CA61635&#39;;</code></td>
<td>28条记录</td>
</tr>
<tr>
<td>4</td>
<td><code>select * from bigjoy.imos where mac = &#39;28E14CA61635&#39;;</code></td>
<td>28条记录</td>
</tr>
<tr>
<td>5</td>
<td><code>select mac from bigjoy.imos where time = to_date(&#39;2014-04-01 20:39:42.000&#39;);</code></td>
<td>223条记录</td>
</tr>
<tr>
<td>6</td>
<td><code>select cell from bigjoy.imos where time = to_date(&#39;2014-04-01 20:39:42.000&#39;);</code></td>
<td>223条记录</td>
</tr>
<tr>
<td>7</td>
<td><code>select cell from bigjoy.imos where mac = &#39;28E14CA61635&#39; and time = to_date(&#39;2014-04-01 20:39:42.000&#39;);</code></td>
<td>1条记录</td>
</tr>
<tr>
<td>8</td>
<td><code>select * from bigjoy.imos where mac = &#39;28E14CA61635&#39; and time = to_date(&#39;2014-04-01 20:39:42.000&#39;);</code></td>
<td>1条记录</td>
</tr>
</tbody>
</table>
<h1 id="3-建立mac-time全局索引"><a href="#3-建立mac-time全局索引" class="headerlink" title="3 建立mac-time全局索引"></a>3 建立mac-time全局索引</h1><p>下面建立针对mac的索引</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> bigjoy.mac_idx <span class="keyword">on</span> bigjoy.imos (mac,<span class="keyword">time</span>) <span class="keyword">include</span> (cell)</span><br><span class="line"># <span class="keyword">global</span> <span class="keyword">index</span> default.</span><br></pre></td></tr></table></figure>
<h1 id="4-效率对比"><a href="#4-效率对比" class="headerlink" title="4 效率对比"></a>4 效率对比</h1><p>针对2中的8条SQL，再次进行查询，与建立索引前的对比如下表:</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>建立索引前(秒)</th>
<th>建立索引后(秒)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>7.236</td>
<td>0.175</td>
</tr>
<tr>
<td>2</td>
<td>6.553</td>
<td>0.029</td>
</tr>
<tr>
<td>3</td>
<td>7.581</td>
<td>6.826</td>
</tr>
<tr>
<td>4</td>
<td>7.171</td>
<td>6.616</td>
</tr>
<tr>
<td>5</td>
<td>7.129</td>
<td>9.926</td>
</tr>
<tr>
<td>6</td>
<td>7.258</td>
<td>7.039</td>
</tr>
<tr>
<td>7</td>
<td>7.632</td>
<td>0.026</td>
</tr>
<tr>
<td>8</td>
<td>7.682</td>
<td>7.383</td>
</tr>
</tbody>
</table>
<p>可以看出，建立索引是选择的是(mac,time)字段,并且包含了cell字段，以mac为约束查询time或cell字段效率提升很大，但当查询floor字段或者包含其他字段的时候，索引的存在并没有提升效率，以time为约束的查询在索引建立前后也没有效率上的改变。</p>
<p>下面就深入分析一下原因。</p>
<h2 id="4-1-查看一下数据表有木有变化"><a href="#4-1-查看一下数据表有木有变化" class="headerlink" title="4.1 查看一下数据表有木有变化"></a>4.1 查看一下数据表有木有变化</h2><p>索引建立好后，先使用Phoenix的 <code>!tables</code> 命令查看一下所用的数据表，从结果中可以看出多出了一个<strong>BIGJOY.MAC_IDX</strong>的数据表，如图所示。</p>
<p><img src="http://obqjd695a.bkt.clouddn.com/phoenix%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95%E5%90%8E%E5%A4%9A%E5%87%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E8%A1%A8.PNG" alt="使用Phoenix建立索引后多出一个数据表"></p>
<h2 id="4-2-探索索引表的结构"><a href="#4-2-探索索引表的结构" class="headerlink" title="4.2 探索索引表的结构"></a>4.2 探索索引表的结构</h2><p>首先看一下该表都有哪些字段呀！</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0: jdbc:phoenix:localhost&gt; !describe bigjoy.mac_idx</span><br><span class="line">+------------+--------------+-------------+--------------+------------+------------+--------------+----------------+-----------------+-----------------+-----+</span><br><span class="line">|<span class="string"> TABLE_CAT  </span>|<span class="string"> TABLE_SCHEM  </span>|<span class="string"> TABLE_NAME  </span>|<span class="string"> COLUMN_NAME  </span>|<span class="string"> DATA_TYPE  </span>|<span class="string"> TYPE_NAME  </span>|<span class="string"> COLUMN_SIZE  </span>|<span class="string"> BUFFER_LENGTH  </span>|<span class="string"> DECIMAL_DIGITS  </span>|<span class="string"> NUM_PREC_RADIX  </span>|<span class="string"> NUL </span>|</span><br><span class="line">+------------+--------------+-------------+--------------+------------+------------+--------------+----------------+-----------------+-----------------+-----+</span><br><span class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> 0:MAC        </span>|<span class="string"> 12         </span>|<span class="string"> VARCHAR    </span>|<span class="string"> 12           </span>|<span class="string"> null           </span>|<span class="string"> null            </span>|<span class="string"> null            </span>|<span class="string"> 1   </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> 0:TIME       </span>|<span class="string"> 3          </span>|<span class="string"> DECIMAL    </span>|<span class="string"> null         </span>|<span class="string"> null           </span>|<span class="string"> null            </span>|<span class="string"> null            </span>|<span class="string"> 1   </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> :ID          </span>|<span class="string"> 1          </span>|<span class="string"> CHAR       </span>|<span class="string"> 26           </span>|<span class="string"> null           </span>|<span class="string"> null            </span>|<span class="string"> null            </span>|<span class="string"> 0   </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> 0:CELL       </span>|<span class="string"> 1          </span>|<span class="string"> CHAR       </span>|<span class="string"> 4            </span>|<span class="string"> null           </span>|<span class="string"> null            </span>|<span class="string"> null            </span>|<span class="string"> 1   </span>|</span><br><span class="line">+------------+--------------+-------------+--------------+------------+------------+--------------+----------------+-----------------+-----------------+-----+</span><br></pre></td></tr></table></figure>
<p>注意，Phoenix把原来的TimeStamp类型的时间变成了Decimal，应该是用整数的时间戳来表示时间了，这样运算起来简单！</p>
<p>接下来看一下该表的主键构成<code>!primarykeys bigjoy.mac_idx</code>，结果如下。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+-+</span><br><span class="line">|<span class="string"> TABLE_CAT  </span>|<span class="string"> TABLE_SCHEM  </span>|<span class="string"> TABLE_NAME  </span>|<span class="string"> COLUMN_NAME  </span>|<span class="string"> KEY_SEQ  </span>|<span class="string"> PK_NAME  </span>|<span class="string"> ASC_OR_DESC  </span>|<span class="string"> DATA_TYPE  </span>|<span class="string"> TYPE_NAME  </span>|<span class="string"> COLUMN_SIZE  </span>|<span class="string"> </span>|</span><br><span class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+-+</span><br><span class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> 0:MAC        </span>|<span class="string"> 1        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 12         </span>|<span class="string"> VARCHAR    </span>|<span class="string"> 12           </span>|<span class="string"> </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> 0:TIME       </span>|<span class="string"> 2        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 3          </span>|<span class="string"> DECIMAL    </span>|<span class="string"> null         </span>|<span class="string"> </span>|</span><br><span class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> :ID          </span>|<span class="string"> 3        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 1          </span>|<span class="string"> CHAR       </span>|<span class="string"> 26           </span>|<span class="string"> </span>|</span><br><span class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+-+</span><br></pre></td></tr></table></figure>
<p>可以看出，该表的主键是由0:MAC,0:TIME,:ID按顺序构成的，不过:ID是什么玩意儿，是原数据表的主键？为了验证猜想，请接着看(｡･ω･)</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0: jdbc:phoenix:localhost&gt; select * from bigjoy.mac<span class="emphasis">_idx limit 1;</span></span><br><span class="line"><span class="emphasis">+---------------+------------------+-----------------------------+---------+</span></span><br><span class="line"><span class="emphasis">|     0:MAC     |      0:TIME      |             :ID             | 0:CELL  |</span></span><br><span class="line"><span class="emphasis">+---------------+------------------+-----------------------------+---------+</span></span><br><span class="line"><span class="emphasis">| 000000000C00  | 1.396363024E+12  | 02281396334224000000000C00  | 228     |</span></span><br><span class="line"><span class="emphasis">+---------------+------------------+-----------------------------+---------+</span></span><br><span class="line"><span class="emphasis">1 row selected (0.123 seconds)</span></span><br></pre></td></tr></table></figure>
<p>这里也可以看出该索引表（是真的能被用户看到的表哈）包含了4个字段，前三个刚才讲了，是构成主键的组成部分，0:CELL很好理解，就是创建索引时include 后边的cell字段了。有:ID了不是，好的，去hbase shell中利用:ID查询一下数据！</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):038:0&gt; get 'BIGJOY.IMOS','02281396334224000000000C00'</span><br><span class="line">COLUMN                                   CELL                                                                                                                 </span><br><span class="line"> 0:CELL                                  timestamp=1470667019714, value=228        </span><br><span class="line"> 0:FLOOR                                 timestamp=1470667019714, value=20010    </span><br><span class="line"> 0:MAC                                   timestamp=1470667019714, value=000000000C00</span><br><span class="line"> 0:TIME                                  timestamp=1470667019714, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>01E<span class="symbol">\x</span>1D<span class="symbol">\x</span>B8<span class="symbol">\x</span>D6<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00</span><br><span class="line"> 0:X                                     timestamp=1470667019714, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>01<span class="symbol">\x</span>85<span class="symbol">\x</span>1D</span><br><span class="line"> 0:Y                                     timestamp=1470667019714, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>01<span class="symbol">\x</span>82<span class="symbol">\x</span>E8</span><br><span class="line"> 0:_0                                    timestamp=1470667019714, value=x                                                                                     </span><br><span class="line">7 row(s) in 0.0260 seconds</span><br></pre></td></tr></table></figure>
<p>嗯，果不其然呀，<strong> :ID在索引表中参与构成主键，首先是保证了索引表主键的唯一性，因此Global Index是密集索引，另外，它对查询也是有帮助的</strong>，埋个伏笔，下面会提到！</p>
<h2 id="4-3-查询计划解读"><a href="#4-3-查询计划解读" class="headerlink" title="4.3 查询计划解读"></a>4.3 查询计划解读</h2><h3 id="4-3-1-Phoenix提供了Explain命令，解释执行计划，下面先看mac约束的对比吧，咣当咣当真是够长的-￣ˇ￣"><a href="#4-3-1-Phoenix提供了Explain命令，解释执行计划，下面先看mac约束的对比吧，咣当咣当真是够长的-￣ˇ￣" class="headerlink" title="4.3.1 Phoenix提供了Explain命令，解释执行计划，下面先看mac约束的对比吧，咣当咣当真是够长的(￣ˇ￣)"></a>4.3.1 Phoenix提供了Explain命令，解释执行计划，下面先看mac约束的对比吧，咣当咣当真是够长的(￣ˇ￣)</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">0: jdbc:phoenix:localhost&gt; explain select cell from bigjoy.imos where mac = <span class="emphasis">'28E14CA61635'</span>;</span><br><span class="line"><span class="code">+-----------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">|                                                   PLAN                                                    |</span><br><span class="line"><span class="code">+-----------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| CLIENT 1-CHUNK 0 ROWS 0 BYTES PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER BIGJOY.MAC<span class="emphasis">_IDX ['28E14CA61635']  |</span></span><br><span class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">1 row selected (0.584 seconds)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">0: jdbc:phoenix:localhost&gt; explain select time from bigjoy.imos where mac = '28E14CA61635';</span></span><br><span class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">|                                                   PLAN                                                    |</span></span><br><span class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">| CLIENT 1-CHUNK 0 ROWS 0 BYTES PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER BIGJOY.MAC_</span>IDX [<span class="emphasis">'28E14CA61635'</span>]  |</span><br><span class="line">|     SERVER FILTER BY FIRST KEY ONLY                                                                       |</span><br><span class="line"><span class="code">+-----------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">2 rows selected (0.038 seconds)</span><br><span class="line"></span><br><span class="line">0: jdbc:phoenix:localhost&gt; explain select * from bigjoy.imos where mac = <span class="emphasis">'28E14CA61635'</span>;</span><br><span class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">|                                                 PLAN                                                 |</span><br><span class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| CLIENT 6-CHUNK 22526956 ROWS 1258291413 BYTES PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER BIGJOY.IMOS  |</span><br><span class="line">|     SERVER FILTER BY MAC = <span class="emphasis">'28E14CA61635'</span>                                                            |</span><br><span class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">2 rows selected (0.038 seconds)</span><br><span class="line"></span><br><span class="line">0: jdbc:phoenix:localhost&gt; explain select * from bigjoy.imos where mac = <span class="emphasis">'28E14CA61635'</span>;</span><br><span class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">|                                                 PLAN                                                 |</span><br><span class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| CLIENT 6-CHUNK 22526956 ROWS 1258291413 BYTES PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER BIGJOY.IMOS  |</span><br><span class="line">|     SERVER FILTER BY MAC = <span class="emphasis">'28E14CA61635'</span>                                                            |</span><br><span class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">2 rows selected (0.036 seconds)</span><br></pre></td></tr></table></figure>
<p>看到这里就明白了吧，当查询cell字段的时候，是直接去索引表了提取出了cell的值；但当包含了创建索引表时没有提供的字段的时候，Phoenix就是回到原数据表进行全表扫描了，不过是最终在服务器端进行了Filter过滤而已，关于为什么使用了Filter还是进行的全表扫描哦，可以参见<a href="http://dequn.github.io/2016/08/24/right-way-to-use-hbase-rowfilter_and_accelerate_hbase_query/">HBase RowFilter 的使用误区及如何加快 HBase 查询速度</a>！</p>
<h3 id="4-3-2-那么接下来看一下time约束的索引查询计划！"><a href="#4-3-2-那么接下来看一下time约束的索引查询计划！" class="headerlink" title="4.3.2 那么接下来看一下time约束的索引查询计划！"></a>4.3.2 那么接下来看一下time约束的索引查询计划！</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">0: jdbc:phoenix:localhost&gt; explain select cell from bigjoy.imos where time = to<span class="emphasis">_date('2014-04-01 20:39:42.000');</span></span><br><span class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">|                                          PLAN                                           |</span></span><br><span class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">| CLIENT 4-CHUNK 0 ROWS 0 BYTES PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER BIGJOY.MAC_</span>IDX  |</span><br><span class="line">|     SERVER FILTER BY TO<span class="emphasis">_TIMESTAMP("TIME") = TIMESTAMP '2014-04-01 20:39:42.000'         |</span></span><br><span class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">2 rows selected (0.062 seconds)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">0: jdbc:phoenix:localhost&gt; explain select * from bigjoy.imos where time = to_</span>date(<span class="emphasis">'2014-04-01 20:39:42.000'</span>);</span><br><span class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">|                                                 PLAN                                                 |</span><br><span class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| CLIENT 6-CHUNK 22526956 ROWS 1258291413 BYTES PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER BIGJOY.IMOS  |</span><br><span class="line">|     SERVER FILTER BY TIME = TIMESTAMP <span class="emphasis">'2014-04-01 20:39:42.000'</span>                                      |</span><br><span class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">2 rows selected (0.039 seconds)</span><br></pre></td></tr></table></figure>
<p>可以看出，仅有time约束的时候，不管进行的是cell查询还是包含其他字段的查询，都是进行全表扫描，不过一个是扫描索引表，一个是原数据表罢了！所以效率没有提升</p>
<h3 id="4-3-3-最后，同时进行mac和time约束查询，从时间对比上就可以猜想是进行了索引表的查询，当然，查询目标不能包含创建索引表时未包含的字段-事实也是如此。"><a href="#4-3-3-最后，同时进行mac和time约束查询，从时间对比上就可以猜想是进行了索引表的查询，当然，查询目标不能包含创建索引表时未包含的字段-事实也是如此。" class="headerlink" title="4.3.3 最后，同时进行mac和time约束查询，从时间对比上就可以猜想是进行了索引表的查询，当然，查询目标不能包含创建索引表时未包含的字段,事实也是如此。"></a>4.3.3 最后，同时进行mac和time约束查询，从时间对比上就可以猜想是进行了索引表的查询，当然，查询目标不能包含创建索引表时未包含的字段,事实也是如此。</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">0: jdbc:phoenix:localhost&gt; explain select cell from bigjoy.imos where mac = <span class="emphasis">'28E14CA61635'</span> and time = to<span class="emphasis">_date('2014-04-01 20:39:42.000');</span></span><br><span class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">|                                                            PLAN                                                             |</span></span><br><span class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">| CLIENT 1-CHUNK 0 ROWS 0 BYTES PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER BIGJOY.MAC_</span>IDX [<span class="emphasis">'28E14CA61635'</span>,1,396,384,782,000]  |</span><br><span class="line"><span class="code">+-----------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">1 row selected (0.049 seconds)</span><br><span class="line"></span><br><span class="line">0: jdbc:phoenix:localhost&gt; explain select * from bigjoy.imos where mac = <span class="emphasis">'28E14CA61635'</span> and time = to<span class="emphasis">_date('2014-04-01 20:39:42.000');</span></span><br><span class="line"><span class="emphasis">+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">|                                                 PLAN                                                 |</span></span><br><span class="line"><span class="emphasis">+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">| CLIENT 6-CHUNK 22526956 ROWS 1258291413 BYTES PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER BIGJOY.IMOS  |</span></span><br><span class="line"><span class="emphasis">|     SERVER FILTER BY (MAC = '28E14CA61635' AND TIME = TIMESTAMP '2014-04-01 20:39:42.000')           |</span></span><br><span class="line"><span class="emphasis">+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">2 rows selected (0.034 seconds)</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-4-还有，看一下官方给出的Index-Hint方法，可以看出，-ID参与索引表的构成，也是为了实现这一个目的，先查索引表，在根据ID查原表！"><a href="#4-3-4-还有，看一下官方给出的Index-Hint方法，可以看出，-ID参与索引表的构成，也是为了实现这一个目的，先查索引表，在根据ID查原表！" class="headerlink" title="4.3.4 还有，看一下官方给出的Index Hint方法，可以看出，:ID参与索引表的构成，也是为了实现这一个目的，先查索引表，在根据ID查原表！"></a>4.3.4 还有，看一下官方给出的<a href="https://phoenix.apache.org/secondary_indexing.html" target="_blank" rel="noopener">Index Hint</a>方法，可以看出，:ID参与索引表的构成，也是为了实现这一个目的，先查索引表，在根据ID查原表！</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0: jdbc:phoenix:localhost&gt; explain select /<span class="strong">*+ INDEX(bigjoy.imos mac_idx) *</span>/ * from bigjoy.imos where mac = <span class="emphasis">'28E14CA61635'</span>;</span><br><span class="line"><span class="code">+-------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">|                                                       PLAN                                                        |</span><br><span class="line"><span class="code">+-------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| CLIENT 6-CHUNK 22526956 ROWS 1258291413 BYTES PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER BIGJOY.IMOS               |</span><br><span class="line">|     SKIP-SCAN-JOIN TABLE 0                                                                                        |</span><br><span class="line">|         CLIENT 1-CHUNK 0 ROWS 0 BYTES PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER BIGJOY.MAC<span class="emphasis">_IDX ['28E14CA61635']  |</span></span><br><span class="line"><span class="emphasis">|             SERVER FILTER BY FIRST KEY ONLY                                                                       |</span></span><br><span class="line"><span class="emphasis">|     DYNAMIC SERVER FILTER BY "BIGJOY.IMOS.ID" IN ($25.$27)                                                        |</span></span><br><span class="line"><span class="emphasis">+-------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">5 rows selected (0.041 seconds)</span></span><br></pre></td></tr></table></figure>
<h2 id="4-4-什么时候索引发挥作用，什么时候索引不发挥作用（都是指全局索引）？"><a href="#4-4-什么时候索引发挥作用，什么时候索引不发挥作用（都是指全局索引）？" class="headerlink" title="4.4 什么时候索引发挥作用，什么时候索引不发挥作用（都是指全局索引）？"></a>4.4 什么时候索引发挥作用，什么时候索引不发挥作用（都是指全局索引）？</h2><p>通过以上几个例子对比和查询计划分析，并且结合索引表的主键构成(谁让HBase有且只有主键的字典序索引呢)，查询字段只包括创建索引时的字段并且约束条件中包括<strong>构成索引表主键的第一个字段</strong>时，索引表时发挥作用的，其他情况下全局索引不能加快查询速度，这也和官方文档给出的解释是一样样的！</p>
<p>文中使用的例子只包括两个字段约束，如果有三个字段呢,结果又如何？如：(field1, field2, field3)，可以猜想使用field1, field1 + field2, field1 + field3, field1 + field2 + field3进行约束查询，该索引表才会发挥作用！感兴趣的可以去尝试一下！</p>
<p>为什么是这样？还是因为HBase只有字典序的主键索引啊，如果不使用field1进行约束，那么将不能确定索引表中行健的扫描范围，所以仍然要进行全局扫描（索引表或者原数据表），同理，如果查询结果一下，使用field1 + field2 约束理论上是要优于 field1 + field3的，不过既然查询结果都一样了，那么field2 和 field3应该是没有约束作用的，除非field3 == field3。感兴趣的也可以尝试一下！</p>
<h1 id="5总结"><a href="#5总结" class="headerlink" title="5总结"></a>5总结</h1><ul>
<li>Global Index 是密集索引；</li>
<li>要想索引发挥作用，必须包含创建索引是的第一个字段进行约束；</li>
<li>索引字段从前到后，约束越多，查询效率越高（中间不能跳过索引字段），这样可以快速缩小扫描范围；</li>
<li>查询一定不能有索引字段之外的其他字段，不然得去扫描原表；</li>
<li>不满足上一条结论的要求时，官方文档提供的<a href="https://phoenix.apache.org/secondary_indexing.html" target="_blank" rel="noopener">Index Hint</a>方法，是根据索引表得到原表主键，再去原表中根据主键查询其他字段！</li>
</ul>
<p>Local Index 就留着下一次写吧！</p>
]]></content>
      
        <categories>
            
            <category> Phoenix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HBase </tag>
            
            <tag> Secondary Index </tag>
            
            <tag> Phoenix </tag>
            
            <tag> Global Index </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HBase 二级索引实现原理]]></title>
      <url>http://dequn.github.io/2016/08/29/HBase-Secondary-Index-Theory/</url>
      <content type="html"><![CDATA[<p>项目中要用到HBase的二级索引，所谓的二级索引，就是对除了RowKey之外的其他列进行索引，因为HBase本身只支持Rowkey的索引，如果要以其他列的数据为约束进行查询，就需要我们做一点点小工作了，即建立二级索引。</p>
<p>在HBase中建立二级索引的思想就是：<strong> 新建一个数据表即索引表，以需要建立索引的列为主键，把其他需要查询的数据存储在该表中，或者存储对应的原数据表主键，最后需要使用此索引的时候，就来到这个表里边进行查询原数据或者主键，如果是主键的话再回到原表中根据主键查询，最终得到结果 </strong>。该索引表也可以是密集的，也可以是稀疏的，索引表中存储原始数据还是原主键就看个人需求，平衡空间和时间上的考量。</p>
<p>华为曾经在2013年开源了一个项目<a href="https://github.com/Huawei-Hadoop/hindex" target="_blank" rel="noopener">Huawei-hadoop/index</a>,不过最近两年都没有更新过了，应该是被停掉了，因为现在有很多例如Phoenix , Pig, Hive等可以利用，没必要自己花精力去维护，但是当时提出该索引的时候可是引起了不小的轰动，同时有两篇PPT，可以帮助理解二级索引的工作原理，有兴趣的读者可以下载研究，总好的过看我写的这些字！</p>
<ul>
<li><a href="http://obqjd695a.bkt.clouddn.com/HBase_Secondary_Index.pdf" target="_blank" rel="noopener">HBase – Secondary Index.pdf</a></li>
<li><a href="http://obqjd695a.bkt.clouddn.com/HuaWei_Secondary_Index_of_HBase.pdf" target="_blank" rel="noopener">HuaWei_Secondary_Index_of_HBase.pdf</a></li>
</ul>
<p>下一篇写Phoenix 的二级索引！</p>
]]></content>
      
        <categories>
            
            <category> HBase </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HBase </tag>
            
            <tag> Secondary Index </tag>
            
            <tag> hindex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HBase RowFilter 的使用误区及如何加快 HBase 查询速度]]></title>
      <url>http://dequn.github.io/2016/08/24/right-way-to-use-hbase-rowfilter_and_accelerate_hbase_query/</url>
      <content type="html"><![CDATA[<p>在做实验的时候，对比一下 HBase 与 PostgreSQL的查询速度，发现 PostgreSQL 只需要300毫秒左后的查询放在 HBase 中竟然需要5秒左右，这效率也差太多了吧！也排除了是数据库连接等操作的耗时，这就需要深入的找一下原因了。原 HBase 代码如下,设置了两个 PrefixFilter 用来过滤，目的是找到某一个 mac 从 beginTime 到 endTime 的数据：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FilterList fl = <span class="keyword">new</span> <span class="type">FilterList</span>(FilterList.Operator.MUST_PASS_ALL);<span class="comment">// must between beginTime and endTime</span></span><br><span class="line">BinaryPrefixComparator comp = <span class="keyword">new</span> <span class="type">BinaryPrefixComparator</span>(Bytes.toBytes(<span class="keyword">String</span>.format(<span class="string">"%s%d"</span>, mac, beginTimeStamp)));</span><br><span class="line">RowFilter filter = <span class="keyword">new</span> <span class="type">RowFilter</span>(CompareFilter.CompareOp.GREATER_OR_EQUAL, comp);</span><br><span class="line">BinaryPrefixComparator comp2 = <span class="keyword">new</span> <span class="type">BinaryPrefixComparator</span>(Bytes.toBytes(<span class="keyword">String</span>.format(<span class="string">"%s%d"</span>, mac, endTimeStamp)));</span><br><span class="line">RowFilter filter2 = <span class="keyword">new</span> <span class="type">RowFilter</span>(CompareFilter.CompareOp.LESS_OR_EQUAL, comp2);</span><br><span class="line">fl.addFilter(filter);</span><br><span class="line">fl.addFilter(filter2);</span><br><span class="line">Scan scan = <span class="keyword">new</span> <span class="type">Scan</span>();</span><br><span class="line">scan.setFilter(fl);</span><br><span class="line"><span class="comment">//....other colde here</span></span><br></pre></td></tr></table></figure>
<p>owkey 不是字典有序有索引的吗，查找两个前缀限制夹出来的行应该很快的啊，不然 Rowkey 索引是做什么用的？一步一步找原因，需要搞清楚 Filter 到底是做什么用的！经过一番搜索，在 <a href="http://stackoverflow.com/questions/10942638/should-i-user-prefixfilter-or-rowkey-range-scan-in-hbase" title="Should I user prefixfilter or rowkey range scan in hbase" target="_blank" rel="noopener">StackOverFlow</a> [1] 上找到一个回答，意思是 Filter 是非常慢的，要进行全表扫描的，如果想要快速的查询数据，得设置 STARTROW 和 ENDROW，原文:</p>
<blockquote>
<p>HBase filters - even row filters - are really slow, since in most cases these do a complete table scan, and then filter on those results. Have a look at this discussion: <a href="http://grokbase.com/p/hbase/user/115cg0d7jh/very-slow-scan-performance-using-filters" target="_blank" rel="noopener">http://grokbase.com/p/hbase/user/115cg0d7jh/very-slow-scan-performance-using-filters</a></p>
</blockquote>
<blockquote>
<p>Row key range scans however, are indeed much faster - they do the equivalent of a filtered table scan. This is because the row keys are stored in sorted order (this is one of the basic guarantees of HBase, which is a BigTable-like solution), so the range scans on row keys are very fast. More explanation here: <a href="http://www.quora.com/How-feasible-is-real-time-querying-on-HBase-Can-it-be-achieved-through-a-programming-language-such-as-Python-PHP-or-JSP" target="_blank" rel="noopener">http://www.quora.com/How-feasible-is-real-time-querying-on-HBase-Can-it-be-achieved-through-a-programming-language-such-as-Python-PHP-or-JSP</a></p>
</blockquote>
<blockquote>
<p>UPDATE: turns out that PrefixFilter does do a full table scan until it passes the prefix used in the filter (if it finds it). The recommendation for fast performance using a PrefixFilter seems to be to specify a start_row parameter in addition to the PrefixFilter. See related 2013 discussion on the hbase-user mailing list.</p>
</blockquote>
<p>另外找到一个比较明确的<a href="https://www.ibm.com/support/knowledgecenter/SSPT3X_2.1.2/com.ibm.swg.im.infosphere.biginsights.analyze.doc/doc/r0057923.html" title="IBM Knowledge Center - HBase Module" target="_blank" rel="noopener">解释如下</a> [2]：</p>
<blockquote>
<p>Filters push row selection criteria out to the HBase region servers for processing so that rows can be filtered remotely and in parallel (when more than one region server is involved). Using these functions helps you to avoid sending rows to the client that are not needed.</p>
</blockquote>
<p>好吧，原来是跟我理解的有偏差，这里边的 Filter 作用并不能直接用来索引到要检索的数据，从描述中可以看出，<strong> 只使用 Filter 的话，还是要进行全表扫描，只是符合 Filter 的数据才会被发送到 Client </strong>，从 <a href="https://hbase.apache.org/apidocs/org/apache/hadoop/hbase/filter/RowFilter.html" title="Class RowFilter" target="_blank" rel="noopener">HBase Java API DOC</a> [3]也可以看出：</p>
<blockquote>
<p>If an already known row range needs to be scanned, use CellScanner start and stop rows directly rather than a filter.</p>
</blockquote>
<p>原因找到了，就按照说明添加一个开始行键和结束行健吧,行健根据自己的需要进行设置！</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//....</span></span><br><span class="line">scan.setStartRow(Bytes.toBytes(<span class="keyword">String</span>.<span class="keyword">format</span>(<span class="string">"%s%d0000"</span>, mac, beginTimeStamp)));</span><br><span class="line">scan.setStopRow(Bytes.toBytes(<span class="keyword">String</span>.<span class="keyword">format</span>(<span class="string">"%s%d0300"</span>, mac, endTimeStamp)));</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<p>经过改进，同样的查询时间就降至毫秒的数量级了。另外还有一个 WhileMatchFilter 的 Warpper 类，作用是自动结束扫描，需要的朋友可以使用一下，可以参见<a href="https://www.safaribooksonline.com/library/view/hbase-the-definitive/9781449314682/ch04.html" title="Very slow Scan performance using Filters" target="_blank" rel="noopener">[4]</a>里边的示例，就知道如何使用了。</p>
<p>总结 ：最大的误区是错误的理解了 Filter 的作用，认为过滤在前，扫描在后，实际过程却是<strong>扫描 -&gt; 过滤</strong>，所以如果要利用 Rowkey 本身的索引，除了 get 指定行健之外，scan 必须指定开始行健和结束行健，不然进行的全部是全表扫描,无论 RowFilter 是 RegexFilter 还是 PrefixFilter 还是其他！</p>
<p>参考：</p>
<ol>
<li><a href="http://stackoverflow.com/questions/10942638/should-i-user-prefixfilter-or-rowkey-range-scan-in-hbase" title="Should I user prefixfilter or rowkey range scan in hbase" target="_blank" rel="noopener">Should I user prefixfilter or rowkey range scan in hbase</a></li>
<li><a href="https://www.ibm.com/support/knowledgecenter/SSPT3X_2.1.2/com.ibm.swg.im.infosphere.biginsights.analyze.doc/doc/r0057923.html" title="IBM Knowledge Center - HBase Module" target="_blank" rel="noopener">IBM Knowledge Center - HBase Module</a></li>
<li><a href="https://hbase.apache.org/apidocs/org/apache/hadoop/hbase/filter/RowFilter.html" title="Class RowFilter" target="_blank" rel="noopener">Class RowFilter</a></li>
<li><a href="https://www.safaribooksonline.com/library/view/hbase-the-definitive/9781449314682/ch04.html" title="Very slow Scan performance using Filters" target="_blank" rel="noopener">Very slow Scan performance using Filters</a></li>
<li><a href="http://grokbase.com/t/hbase/user/118bft6n5v/why-rowfilter-plus-binaryprefixcomparator-solution-is-so-slow" title="[HBase-user] Why RowFilter plus BinaryPrefixComparator solution is so slow" target="_blank" rel="noopener">[HBase-user] Why RowFilter plus BinaryPrefixComparator solution is so slow</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> HBase </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HBase </tag>
            
            <tag> RowFilter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HBase 找不到提示已存在的数据表]]></title>
      <url>http://dequn.github.io/2016/07/03/hbase_cannot_find_existing_table/</url>
      <content type="html"><![CDATA[<p> 今天在使用 HBase 创建数据表的时候，提示数据表已存在，但使用<code>list</code>命令又看不到该表，也无法 drop 掉。过程如下</p>
 <figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)<span class="symbol">:018</span><span class="symbol">:0</span>&gt;create 'pois','data</span><br><span class="line">Err<span class="symbol">or:</span> Table already exis<span class="symbol">ts:</span> pois!</span><br><span class="line">hbase(main)<span class="symbol">:019</span><span class="symbol">:0</span>&gt;list</span><br><span class="line">TABLE</span><br><span class="line"><span class="number">0</span> <span class="built_in">row</span>(s) in <span class="number">8.0245</span> seconds</span><br><span class="line"></span><br><span class="line">=&gt; []</span><br></pre></td></tr></table></figure>
<p> 可以看出，HBase 错误地判断了，经过一番 Google，找到了几个推荐的解决方案：</p>
<p> ## <a href="http://stackoverflow.com/questions/10586246/hbase-cannot-find-an-existing-table" target="_blank" rel="noopener">方案1:hbase cannot find an existing table</a></p>
<blockquote>
<p>1) Delete all entries in the .META table for this table manually, and</p>
</blockquote>
<blockquote>
<p>2) Delete the directory corresponding to this table from HDFS</p>
</blockquote>
<h2 id="方案2-Killing-the-HBase-zombie-table"><a href="#方案2-Killing-the-HBase-zombie-table" class="headerlink" title="方案2:Killing the HBase zombie table"></a><a href="http://arnon.me/2013/01/killing-hbase-zombie-table/" target="_blank" rel="noopener">方案2:Killing the HBase zombie table</a></h2><blockquote>
<p>1) use ** hbase hbck ** to see health-checkk</p>
<p>2) look at .META table</p>
<p>3) clear zookeeper’s  cache</p>
</blockquote>
<hr>
<h2 id="方案3-最简单"><a href="#方案3-最简单" class="headerlink" title="方案3:最简单"></a>方案3:最简单</h2><p>这两种方案对初学者来说都有一定的难度，并且容易误操作儿影响到其他的数据表，找一个简单的方法就很有必要了，那么找一找 HBase 自带的命令吧，经过试验，发现有一个命令`hbase-clean’，尝试运行，如下，</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">hbase</span><span class="literal">-</span><span class="comment">cleanup</span><span class="string">.</span><span class="comment">sh</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">Usage:</span> <span class="comment">hbase</span><span class="literal">-</span><span class="comment">cleanup</span><span class="string">.</span><span class="comment">sh</span> <span class="comment">(</span><span class="literal">-</span><span class="literal">-</span><span class="comment">cleanZk|</span><span class="literal">-</span><span class="literal">-</span><span class="comment">cleanHdfs|</span><span class="literal">-</span><span class="literal">-</span><span class="comment">cleanAll|</span><span class="literal">-</span><span class="literal">-</span><span class="comment">cleanAcls)</span></span><br></pre></td></tr></table></figure>
<p>从提示可以看出有三种模式，区别如下</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">-cleanZk   cleans hbase related data from zookeeper.</span></span><br><span class="line"><span class="ruby">--cleanHdfs cleans hbase related data from hdfs.</span></span><br><span class="line"><span class="ruby">--cleanAll  cleans hbase related data from both zookeeper <span class="keyword">and</span> hdfs.</span></span><br></pre></td></tr></table></figure>
<p>想必接下来就知道如何处理了吧！这种方式要简单的多，适合初学用户！</p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<a href="http://www.cloudera.com/documentation/enterprise/latest/topics/cdh_ig_hbase_tools.html#concept_wpc_nqv_hv" target="_blank" rel="noopener">Using HBase Command-Line Utilities</a></p>
<p>2.<a href="http://arnon.me/2013/01/killing-hbase-zombie-table/" target="_blank" rel="noopener">Killing the HBase zombie table</a></p>
<p>3.<a href="http://stackoverflow.com/questions/10586246/hbase-cannot-find-an-existing-table" target="_blank" rel="noopener">hbase cannot find an existing table</a></p>
]]></content>
      
        <categories>
            
            <category> HBase </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HBase </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HBase 协处理器之 EndPoint 简单示例]]></title>
      <url>http://dequn.github.io/2016/05/14/hbase-coprocessor-endpoint-helloworld/</url>
      <content type="html"><![CDATA[<p>关于 HBase 协处理器 Coprocessor 是什么，作用是什么，就不在多说，很多博、文档都有相关说明，Coprocessor 分为两类，一类是 Observer,另一类是 Endpoint,在看来很多博客后，发现都是比较老的一些内容，在学习过程中有不少疑惑，所以总结下来。此文只是针对 EndPoint 给出一个流程。</p>
<h1 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h1><blockquote>
<p>Hbase: v1.1.2<br>JDK: v1.8<br>Maven: v3.3.9<br>protobuf: v2.6.1</p>
</blockquote>
<p>EndPoint 的定义在 Hbase 0.96后采用的是 Google 的开源protobuf RPC, 因此本文的说明只适用于高于 0.96 的 HBase 版本，老的版本请看对应的教程。</p>
<h1 id="Mac-下-Protobuf-安装"><a href="#Mac-下-Protobuf-安装" class="headerlink" title="Mac 下 Protobuf 安装"></a>Mac 下 Protobuf 安装</h1><p>采用 HomeBrew 即可轻松安装，命令</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">home <span class="keyword">brew </span><span class="keyword">install </span>protobuf</span><br></pre></td></tr></table></figure>
<h1 id="定义-RPC"><a href="#定义-RPC" class="headerlink" title="定义 RPC"></a>定义 RPC</h1><p>新建一个 *.proto 文件，键入以下内容,本文的目的是实现一个建立关于 Mac 列的索引，简单起见，直接返回值 buildOk = 1 表示建立成功。关于 protobuf 的更多定义可以参见官方文档<a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener">https://developers.google.com/protocol-buffers/</a>.</p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">option</span> java_package = <span class="string">"lreis.bigdata.indoor.index.coprocessor"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">"BuildMacIndex"</span>;</span><br><span class="line"><span class="keyword">option</span> java_generic_services = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">option</span> optimize_for = SPEED;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">buildMacIndexRequest</span></span>&#123;</span><br><span class="line"><span class="built_in">int64</span> onlyForPresent ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">buildMacIndexResponse</span> </span>&#123;</span><br><span class="line"> <span class="keyword">optional</span> <span class="built_in">int64</span> buildOk = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">BuildMacIndexService</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">rpc</span> buildMacIndex(buildMacIndexRequest)</span></span><br><span class="line"><span class="function">  <span class="keyword">returns</span>(buildMacIndexResponse)</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>定以好之后就可以编译该文件了， 运行此命令会生成一个 BuildMacIndex 的类。</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc <span class="comment">--java_out = your_project_dest your.proto</span></span><br></pre></td></tr></table></figure>
<h1 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h1><p>由于本人使用 Maven 建立的工程，所以要完成EndPoint 的开发，需要加入以下一些依赖才可以。** 需要注意的是编译目标的版本是1.6，否则Hbase 不能正确加载生成的 Endpoint. **</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hbase.version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">hbase.version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;hbase.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;hbase.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h1 id="EndPoint-实现"><a href="#EndPoint-实现" class="headerlink" title="EndPoint 实现"></a>EndPoint 实现</h1><p>** EndPoint 必须要继承自 protobuf 中定义的 BuildMacIndexService 类，并且实现 CoprocessorService 和 Coprocessor 接口，实现其中的四个方法即可。**</p>
<ul>
<li><p>start() 方法<br>协处理器在 Region 打开的时候被 RegionServer 自动加载，并会调用器 start 接口，完成初始化工作。一般的该接口函数中仅仅需要将协处理器的运行上下文环境变量 CoprocessorEnviorment保存到本地即可。</p>
</li>
<li><p>stop()方法<br>Coprocessor 接口还定义了 stop() 接口函数。该函数在 Region 被关闭时调用，用来进行协处理器的清理工作。在本文中，我们没有任何清理工作，因此该方法一般不需要做什么。</p>
</li>
<li><p>getService()方法<br>oprocessorService 接口。该接口仅仅定义了一个接口函数 getService()。我们仅需要将本实例返回即可。HBase 的 RegionServer 在接受到客户端的调用请求时，将调用该接口获取实现了 RPC Service 的实例，因此本函数一般情况下就是返回自身实例即可。</p>
</li>
<li><p>当 Endpoint 类继承自 RPC Service 类的时候，会需要实现 proto 文件中定义buildMacIndex方法,这也是该 EndPoint 作用代码实现的方法，并且最后完成的Response 必须满足 proto 中定义的类型. 简单起见，只简单返回一个值。</p>
</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> buildMacIndex(RpcController controller, BuildMacIndex.buildMacIndexRequest request, RpcCallback&lt;BuildMacIndex.buildMacIndexResponse&gt; <span class="keyword">done</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Long l = request.getOnlyForPresent();<span class="comment">// proto 中 request 里边定义xxx,就用 getXxx 得到调用时候传过来的参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// .... 其他逻辑</span></span><br><span class="line"></span><br><span class="line">    BuildMacIndex.buildMacIndexResponse.Builder resBuilder = BuildMacIndex.buildMacIndexResponse.newBuilder();</span><br><span class="line"></span><br><span class="line">    resBuilder.setBuildOK(<span class="number">100</span>L); <span class="comment">//返回 xxx，就用 SetXxx 进行赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">done</span>.run(resBuilder.build());<span class="comment">//完成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就完成了一个 EndPoint 的定义及实现，运行 mvn clean compile 就可以打包成 jar 文件了。</p>
<h1 id="JAR文件上传及加载到-Table"><a href="#JAR文件上传及加载到-Table" class="headerlink" title="JAR文件上传及加载到 Table"></a>JAR文件上传及加载到 Table</h1><p><strong>将编译的 jar 文件上传到 $HBASE_HOME/lib 目录，如果是完全分布式，每个节点都需要有哦。</strong></p>
<h2 id="配置文件全局加载-所有-Table-都有效"><a href="#配置文件全局加载-所有-Table-都有效" class="headerlink" title="配置文件全局加载(所有 Table 都有效)"></a>配置文件全局加载(所有 Table 都有效)</h2><p>编辑 hbase-site.xml, 添加以下内容，如果加载多个,用分号隔开每个类就行了，最后需要重启 HBase 集群。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt; &lt;name&gt;hbase<span class="selector-class">.coprocessor</span><span class="selector-class">.region</span><span class="selector-class">.classes</span>&lt;/name&gt; &lt;value&gt;lreis<span class="selector-class">.bigdata</span><span class="selector-class">.indoor</span><span class="selector-class">.index</span><span class="selector-class">.coprocessor</span><span class="selector-class">.server</span><span class="selector-class">.BuildMacIndexEndpoint</span>&lt;/value&gt; &lt;/property&gt;</span><br></pre></td></tr></table></figure>
<h2 id="命令行加载方式"><a href="#命令行加载方式" class="headerlink" title="命令行加载方式"></a>命令行加载方式</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'lreis.bigdata.indoor.index.coprocessor.server.BuildMacIndexEndpoint'</span> #记住，有引号的</span><br></pre></td></tr></table></figure>
<p>如果显示</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=&gt; Ja<span class="symbol">va:</span><span class="symbol">:Lr</span>eisBigdataIndoorIndexCoprocessorServ<span class="symbol">er:</span><span class="symbol">:Bu</span>ildMacIndexEndpoint</span><br></pre></td></tr></table></figure>
<p>则说明加载成功，接着运行下面的命令</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter 'idx_mac', 'coprocessor' =&gt; '|lreis.bigdata.indoor.index.coprocessor.server.BuildMacIndexEndpoint|<span class="number">1001</span>|'</span><br></pre></td></tr></table></figure>
<p>如果显示如下，则说明修改表节定义成功</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Updating <span class="literal">all</span> regions <span class="keyword">with</span> the <span class="literal">new</span> schema<span class="params">...</span></span><br><span class="line"><span class="number">1</span>/<span class="number">1</span> regions updated.</span><br><span class="line">Done.</span><br><span class="line"><span class="number">0</span> row(s) <span class="keyword">in</span> <span class="number">2.3210</span> seconds</span><br></pre></td></tr></table></figure>
<ul>
<li>最后就可以在客户端或者 shell 的方式调用 Coprocessor 了， 简单给一个 Java API 的调用方式</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">conn = DbcFactory.getConnection().getConnection()<span class="comment">;</span></span><br><span class="line">Admin admin = conn.getAdmin()<span class="comment">;</span></span><br><span class="line">Table table = conn.getTable(TableName.valueOf(<span class="string">"idx_mac"</span>))<span class="comment">;</span></span><br><span class="line">final <span class="keyword">BuildMacIndex.buildMacIndexRequest </span>req = <span class="keyword">BuildMacIndex.buildMacIndexRequest.newBuilder().build();</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">Map&lt;byte[], </span>Long&gt; tmpRet = table.coprocessorService(<span class="keyword">BuildMacIndex.BuildMacIndexService.class, </span>null, null, new <span class="keyword">Batch.Call&lt;BuildMacIndex.BuildMacIndexService, </span>Long&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Long call(<span class="keyword">BuildMacIndex.BuildMacIndexService </span><span class="keyword">instance) </span>throws IOException &#123;</span><br><span class="line"></span><br><span class="line">ServerRpcController controller = new ServerRpcController()<span class="comment">;</span></span><br><span class="line"><span class="keyword">BlockingRpcCallback&lt;BuildMacIndex.buildMacIndexResponse&gt; </span>rpc = new <span class="keyword">BlockingRpcCallback&lt;BuildMacIndex.buildMacIndexResponse&gt;();</span></span><br><span class="line"><span class="keyword">instance.buildMacIndex(controller, </span>req, rpc)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">BuildMacIndex.buildMacIndexResponse </span>resp = rpc.get()<span class="comment">;</span></span><br><span class="line">return resp.getRowCount()<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)<span class="comment">;</span></span><br><span class="line">long ret = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">for (long l : tmpRet.values())</span><br><span class="line">ret += l<span class="comment">;</span></span><br><span class="line">System.out.println(<span class="string">"lines: "</span> + ret)<span class="comment">;</span></span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace()<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><p><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-hbase-coprocessor1/index.html" target="_blank" rel="noopener">HBase 协处理器编程详解第一部分：Server 端代码编写</a></p>
</li>
<li><p><a href="https://blogs.apache.org/hbase/entry/coprocessor_introduction" target="_blank" rel="noopener">Coprocessor Introduction : Apache HBase</a></p>
</li>
<li><p><a href="http://www.cockybook.com/?p=35" target="_blank" rel="noopener">hbase0.98 coprocessor Endpoint 之 HelloWorld</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> HBase </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HBase </tag>
            
            <tag> Endpoint </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java操作hbase报java.net.UnknownHostException错误的解决方案]]></title>
      <url>http://dequn.github.io/2016/04/26/java-hbase-java-net-UnknownHostException-jie-jue-fang-an/</url>
      <content type="html"><![CDATA[<p>今天在使用 HBase API 执行 Put 操作的时候，进程一直在等待状态，而进行 createTable 和 dropTable的时候均正常，很是郁闷！看了一下 Console 中的信息，报错</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java<span class="selector-class">.net</span><span class="selector-class">.UnknownHostException</span>: unknown host: node2<span class="selector-class">.lreis2306</span> on node2<span class="selector-class">.lreis2306</span>,</span><br></pre></td></tr></table></figure>
<p>由于node2.lreis2306的机器是我新加进去的，只是改了 hosts 中的配置，经过一番百度后，找到的解决方案：</p>
<ul>
<li>修改/etc/sysconfig/network中 HOSTNAME=与 HOSTS 中对应的机器名一致即可！</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.csdn.net/chaijunkun/article/details/44238163" target="_blank" rel="noopener">http://blog.csdn.net/chaijunkun/article/details/44238163</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> HBase </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HBase </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular 向 Controller 注入 Controller]]></title>
      <url>http://dequn.github.io/2016/04/24/angular-inject-controller-to-controller/</url>
      <content type="html"><![CDATA[<p>如何在一个Controller中取到另一个Controller？下边事stackoverflow上的一个回答。</p>
<blockquote>
<p>```<br> app.controller(‘TestCtrl2’, [‘$scope’, ‘$controller’, function ($scope, $controller) {<br>    var testCtrl1ViewModel = $scope.$new(); //You need to supply a scope while instantiating.<br>    //Provide the scope, you can also do $scope.$new(true) in order to create an isolated scope.<br>    //In this case it is the child scope of this scope.<br>    $controller(‘TestCtrl1’,{$scope : testCtrl1ViewModel });<br>    testCtrl1ViewModel.myMethod(); //And call the method on the newScope.<br> }]);</p>
</blockquote>
 <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">In</span> any <span class="keyword">case</span> you cannot call TestCtrl1.myMethod() because you have attached the <span class="function"><span class="keyword">method</span> <span class="title">on</span> <span class="title">the</span> $<span class="title">scope</span> <span class="title">and</span> <span class="title">not</span> <span class="title">on</span> <span class="title">the</span> <span class="title">controller</span> <span class="title">instance</span>.</span></span><br><span class="line"><span class="function">&gt; </span></span><br><span class="line"><span class="function">&gt; <span class="title">If</span> <span class="title">you</span> <span class="title">are</span> <span class="title">sharing</span> <span class="title">the</span> <span class="title">controller</span>, <span class="title">then</span> <span class="title">it</span> <span class="title">would</span> <span class="title">always</span> <span class="title">be</span> <span class="title">better</span> <span class="title">to</span> <span class="title">do</span>:</span>-</span><br></pre></td></tr></table></figure>
<p>.controller(‘TestCtrl1’, [‘$log’, function ($log) {<br>    this.myMethod = function () {<br>             $log.debug(“TestCtrl1 - myMethod”);<br>     }<br> }]);<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> and <span class="keyword">while</span> consuming <span class="keyword">do</span>:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></p>
<p> .controller(‘TestCtrl2’, [‘$scope’, ‘$controller’, function ($scope, $controller) {<br>      var testCtrl1ViewModel = $controller(‘TestCtrl1’);<br>      testCtrl1ViewModel.myMethod();<br> }]);<br> <code>`</code></p>
<blockquote>
<p>In the first case really the $scope is your view model, and in the second case it the controller instance itself.</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://stackoverflow.com/questions/25417162/how-do-i-inject-a-controller-into-another-controller-in-Angularjs" target="_blank" rel="noopener">http://stackoverflow.com/questions/25417162/how-do-i-inject-a-controller-into-another-controller-in-Angularjs</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Angular </tag>
            
            <tag> Controller </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular单元测试中由ui-router引起的$httpbackend unexpected request 错误解决办法]]></title>
      <url>http://dequn.github.io/2016/03/31/angular-ui-router-unit-test-unexpected-request/</url>
      <content type="html"><![CDATA[<p>在使用 Karma + Jasmine 进行angular 单元测试的时候，一直报 $httpbackend unexpected  requeest 错误 ，提示的是请求的一个html文件，后来才发现是因为用了ui-router进行路由，并且存在抽象状态的问题，记录一下解决办法。</p>
<p>下载 <a href="https://gist.github.com/wilsonwc/8358542" target="_blank" rel="noopener">stateMock.js</a>,</p>
<p>把 stateMock.js 添加到 karma.config.js 里边。</p>
<p>测试文件中：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> $state ;</span><br><span class="line"><span class="keyword">var</span> $httpbackend;</span><br><span class="line"><span class="keyword">var</span> httpHandler;</span><br><span class="line"> </span><br><span class="line">beforeEach(module(<span class="string">'stateMock'</span>));</span><br><span class="line"></span><br><span class="line">beforeEach(inject(<span class="function"><span class="keyword">function</span><span class="params">(_$state_,_$httpbackend_)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    $state = _$state_;</span><br><span class="line">    $httpbackend = _$httpbackend_;</span><br><span class="line">    </span><br><span class="line">    httpHandler = $httpbackend.when(<span class="string">'GET'</span>, <span class="string">'/service/list'</span>).respond(<span class="comment">/*xxx*/</span>)</span><br><span class="line"></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">it(<span class="string">'http'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">      </span><br><span class="line">      $state.go(<span class="string">'user.service'</span>);</span><br><span class="line">      </span><br><span class="line">      $http.get(<span class="string">'/service/list'</span>);</span><br><span class="line">      </span><br><span class="line">      $httpBackend.expectGET(<span class="string">'/service/list'</span>);          </span><br><span class="line">      </span><br><span class="line">      <span class="comment">//.....</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这样就可以避免请求了html而导致测试失败。、</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://stackoverflow.com/questions/23655307/ui-router-interfers-with-httpbackend-unit-test-angular-js/23670198#23670198" target="_blank" rel="noopener">http://stackoverflow.com/questions/23655307/ui-router-interfers-with-httpbackend-unit-test-angular-js/23670198#23670198</a></p>
<p><a href="https://github.com/meanjs/mean/issues/198" target="_blank" rel="noopener">https://github.com/meanjs/mean/issues/198</a></p>
]]></content>
      
        <categories>
            
            <category> Angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Angular </tag>
            
            <tag> ui-router </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac上安装elasticsearch-analysis-ansj-2.1.1的过程]]></title>
      <url>http://dequn.github.io/2016/03/27/install-elasticsearch-analysis-ansj-2-1-1-on-mac-OS/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/NLPchina/elasticsearch-analysis-ansj" target="_blank" rel="noopener">elasticserach-analysis-ansj</a>是一个elasticsearch的中文分词插件，基于ansj。<br>在Mac上使用brew安装的elasticsearch，如果是默认安装的话版本是2.2,由于插件不支持，所以只能卸载掉重新安装。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>uninstall elasticsearch</span><br></pre></td></tr></table></figure>
<p>使用homebrew/versions可以安装elasticsearch2.1.2的版本，仍然不能使用，不过还是要记录一下，安装其他环境指定版本的时候可以用此方法，参见<a href="https://github.com/Homebrew/homebrew-versions" target="_blank" rel="noopener">homebrew-versions</a>：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew/versions</span><br><span class="line">brew install elasticsearch21 #注意，这里的<span class="number">2.1</span>版本是<span class="number">2.1</span><span class="number">.2</span>,仍然不能满足要求！</span><br></pre></td></tr></table></figure>
<p>下面是真正elasticsearch及elasticsearch-analysis-ansj-2.1.1版本的安装：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="symbol">https:</span>/<span class="regexp">/download.elasticsearch.org/elasticsearch</span><span class="regexp">/release/org</span><span class="regexp">/elasticsearch/distribution</span><span class="regexp">/tar/elasticsearch</span><span class="regexp">/2.1.1/elasticsearch</span>-<span class="number">2.1</span>.<span class="number">1</span>.tar.gz</span><br><span class="line">tar -zxf elasticsearch-<span class="number">2.1</span>.<span class="number">1</span>.tar.gz /usr/local/Cellar/</span><br><span class="line">cd /usr/local/Cellar/elasticsearch-<span class="number">2.1</span>.<span class="number">1</span>.tar.gz/bin</span><br><span class="line">./plugin install <span class="symbol">http:</span>/<span class="regexp">/maven.nlpcn.org/org</span><span class="regexp">/ansj/elasticsearch</span>-analysis-ansj/<span class="number">2.1</span>.<span class="number">1</span>/elasticsearch-analysis-ansj-<span class="number">2.1</span>.<span class="number">1</span>-release.zip</span><br><span class="line">./ealsticsearch  <span class="comment">#运行命令即可</span></span><br></pre></td></tr></table></figure>
<p>注意最后需要把elasticsearch添加到环境变量中。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>[1]<a href="https://github.com/Homebrew/homebrew-versions" target="_blank" rel="noopener">https://github.com/Homebrew/homebrew-versions</a></p>
<p>[2]<a href="https://github.com/NLPchina/elasticsearch-analysis-ansj" target="_blank" rel="noopener">https://github.com/NLPchina/elasticsearch-analysis-ansj</a></p>
]]></content>
      
        <categories>
            
            <category> Others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[angualr中interceptors的正确配置方式]]></title>
      <url>http://dequn.github.io/2016/03/26/right-way-of-use-angualr-http-interceptors/</url>
      <content type="html"><![CDATA[<p>Interceptors是AngularJS中的<strong>拦截器</strong>，个人感觉更像是JavaEE中的<strong>过滤器</strong>，即所有事件都依次通过过滤器，过滤器处理后向下传递，再到最终到处理程序。</p>
<p>最近在网上看的博客都简单举了例子，但在本人实现过程中总是实现moduerr的错误提示，下面是出错记录：</p>
<p>Angular version：1.4.6<br>不能正确实现的方式：服务实现</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'app'</span>).factory(<span class="string">'httpInters'</span>,httpInters);</span><br><span class="line">httpInters.$inject = [<span class="string">'$q'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">httpInters</span><span class="params">($q)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		responseError:<span class="function"><span class="keyword">function</span><span class="params">(response)</span></span>&#123;</span><br><span class="line">		   <span class="comment">// your code here</span></span><br><span class="line">		&#125;,</span><br><span class="line">		requestError:<span class="function"><span class="keyword">function</span><span class="params">(req)</span></span>&#123;</span><br><span class="line">		  <span class="comment">// your code here</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">angular.module(<span class="string">'app'</span>).config(<span class="function"><span class="keyword">function</span><span class="params">($http,httpInters)</span></span>&#123;</span><br><span class="line">	 $httpProvider.interceptors.push(httpInters);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>使用上边在方式发现一直不能正确注入服务模板，因此采用匿名函数的方法来做：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'app'</span>).config(<span class="function"><span class="keyword">function</span><span class="params">($httpProvider)</span></span>&#123;</span><br><span class="line">	 $httpProvider.interceptors.push(<span class="function"><span class="keyword">function</span><span class="params">($q)</span></span>&#123;</span><br><span class="line">	      <span class="keyword">return</span> &#123;</span><br><span class="line">	      responseError:<span class="function"><span class="keyword">function</span><span class="params">(response)</span></span>&#123;</span><br><span class="line">		   <span class="comment">// your code here</span></span><br><span class="line">		   <span class="keyword">return</span> $q.reject(response);</span><br><span class="line">				&#125;</span><br><span class="line">	      &#125;</span><br><span class="line">	 &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>具体原因还没有分析，暂时先记录下来。</p>
]]></content>
      
        <categories>
            
            <category> Angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Angular </tag>
            
            <tag> Interceptor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[有话就说之女性职业选择]]></title>
      <url>http://dequn.github.io/2016/03/21/you-hua-jiu-shuo-zhi-nv-xing-zhi-ye-xuan-ze/</url>
      <content type="html"><![CDATA[<p>昨天跟一位女性朋友打电话 ，聊着聊着聊到了女性职业选择的话题上了，紧接着就是脑洞大开了，简单讲述一下我的观点。首先需要澄清的是我并没有任何歧视的意思，也更不是直男癌。所说所想也仅仅只代表自己的一些观点，可以拍砖，但不接受任何带有漫骂、人身攻击的言论。</p>
<h3 id="1-关于女性正常的职业选择与自然分工"><a href="#1-关于女性正常的职业选择与自然分工" class="headerlink" title="1.关于女性正常的职业选择与自然分工"></a>1.关于女性正常的职业选择与自然分工</h3><p>之所以重新用到了“自然分工”这个词，是从自然的角度进行考量的。从原始人类进化以来，女性在职业上的选择多是以维护家庭内部运转为中心的，少有强而对外者。远古时候，男的肌肉块儿大，就必须承担起狩猎的职责 ，女性相对而言更适合采摘等轻巧、安全的工作，到农业和游牧文明，放牧和种地等力气活儿也理所当然的由男人来做，女性做的更多的则是纺织、编织等，这也造成了女性有更多的时间待在家里，维系家庭内部的运转等更多的任务也就由女性承担。这样是很自然的一个分工，并且是结合了男女特性的不同的，不要非得跟我讲为什么，没有为什么，为什么男的是XY女的是XX？所以从这个角度来看，女性应该更容易偏向于一些轻便的、能够以家庭为重心的工作，与自然的进化也是一脉相承的。</p>
<h3 id="2-关于女性自我价值的体现"><a href="#2-关于女性自我价值的体现" class="headerlink" title="2.关于女性自我价值的体现"></a>2.关于女性自我价值的体现</h3><p>看到这里很多女性朋友估计要扔板砖了，凭什么你们男的能做我们女的不能，我们也要追求自己的人生价值。好好好，不过本少从来没说女人的价值就是为了男人，或是洗衣做饭。德国的法律有规定：夫妻双方都工作，工资低的一方要交高额的税。对，你没有看错 ，是工资低的一方！德国不至于是抽疯了让工资低的一方回家做饭吧？显而易见他们重视的是家庭教育！一个民族的家庭教育几乎决定了一个国家的未来 。言传身教，对一个孩子影响最大的也莫过于家庭教育了吧。如果选择以家庭为中心，能够源源不断地输出自己正确的观点、想法 ，我想其中的价值不容置疑吧！所以说，要体现自我价值的方法有很多，不是每个人都要出去累死累活的挣钱的。当然也有人说那工资低的一方也极有可能是男的，对，这点不否定，但请去统计一个比例。</p>
<h3 id="3-女人要独立与男人不靠谱"><a href="#3-女人要独立与男人不靠谱" class="headerlink" title="3.女人要独立与男人不靠谱"></a>3.女人要独立与男人不靠谱</h3><p>女人要独立 ，不错，是的，支持。独立就一定是经济上的独立吗？如果思想不独立、精神依赖性强，即使给你很多money，就能独立的了吗？男的不靠谱，那什么靠谱，动物园里的雄性动物更靠谱些？论怎样找一个不靠谱的男的：<br>1：男的本身不靠谱，恰恰被某选中，然后推而广之。你选了一个不靠谱的，只能说明你眼光不靠谱，那么多靠谱的怎么没选上;<br>2：男的由靠谱退化到不靠谱。这么来讲男的确实有问题，不过你俩整天在一起生活，他的思想、观点应该受你的影响更大吧，他会变得不靠谱，那么你能靠谱几分呢？</p>
<h3 id="4-吃软饭与女强人的不平等性"><a href="#4-吃软饭与女强人的不平等性" class="headerlink" title="4.吃软饭与女强人的不平等性"></a>4.吃软饭与女强人的不平等性</h3><p>如果一个男的没有女的挣钱多，则会被多数人戳脊梁骨，被带以“吃软饭”的帽子，在人群中都抬不起头来。如果一个女的是一个女强人，想必收到更多的是夸赞。按目前的情况来看，两者都是落在了一个较小概率的分布区域。为什么一个会受到鄙视而另一个受到的是仰视呢？至少其中一个是不合理的吧，且留作下面讨论。</p>
<h3 id="5-女权运动与“历史颠覆”"><a href="#5-女权运动与“历史颠覆”" class="headerlink" title="5.女权运动与“历史颠覆”"></a>5.女权运动与“历史颠覆”</h3><p>自女权运动进行的几百年来，女性的社会地位提高了很多。这正是其积极意义的所在，女人再也不是男人的附属，作为一个独立而自由的个体进入到社会的发展潮流中。女权运动的正面意义有很多，这里就不再一一来讲。<br>现在讲一些个人觉得稍微有些问题的地方。男女平等了，女性有更多的自由 ，但这更多 的自由就是要更多人想都不想的要去做一个“女强人”吗？必须放弃自己的天性去选择“独立”吗？女性取代了男性的工作，那么你们原来的工作呢，能够抛弃掉而不影响社会的正常发展吗？且看国内的家庭教育，烂到何等程度？那么多的留守儿童，孤寡老人，这些人的处境是由什么造成的呢？这里有很多其他因素，但如此之多的女性放弃了其天职而去选择同男人一样面对生存想必是其直接原因。并不是讲这些辛辛苦苦奋斗的女性不对，而是讲男人没能撑起一个家，更多短视的投入到“经济发展”中。如果女方出来作女强人，撑起一个家，男人为什么就不能接手女人之前的工作呢，而非得背一个“吃软饭”的名声？<br>也有人讲，这正是社会的发展造成的进步呀 ，女性从家庭中解放出来，这也不是原始社会了，不要拿自然分工来说事。但请问，一个运动几百年来就能颠覆数十万年的演化史吗？各位学的马哲没有讲量变积累才能引起质变吗？有人说该运动短时间内颠覆了过去女性低位的现象啊，不错，但女性低位是自然现象吗？恐怕不是的吧，不过是过去统治阶级带以及学派学说强压给无辜的女性的吧，这些外力才能维持的现象当然在内因（本身男女地位不分高低 ，只是分工不同而已）面前显得不堪一击，轰然倒塌。单从时间长度来看，短时间内自然分工发生如此天翻地覆是属于正常现象吗？</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>说了这么多，到最后我只想说：选择自由是属于所有的人！但并不是所见到的多数选择就是好的、正确的，而且此种所见也极有可能是一种假象、或者“热”。</p>
<p>本来想找些相关的论文来补充一下论据的，但由于实在是忙(lan)得(de)不(li)行(hai)，因此只留下论点，待以后有时间进行补充。</p>
]]></content>
      
        <categories>
            
            <category> 个人日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 职业选择 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular自动跳转到登录页面并跳回]]></title>
      <url>http://dequn.github.io/2016/03/20/angular-redirect-to-login-if-not-auth/</url>
      <content type="html"><![CDATA[<p>在一些页面需要登录才能访问的情况下，我们要先检测用户是否已经登录，如果已经登录，则正常访问，如果没有则自动跳转到登录页面，登录之后再自动跳转到需要访问的页面。下面就简单讲一下在Angular中如何使用ui-router来实现这一目标,仍然直接看代码。</p>
<h2 id="1-路由配置："><a href="#1-路由配置：" class="headerlink" title="1.路由配置："></a>1.路由配置：</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">angular</span><span class="selector-class">.module</span>(<span class="string">'mApp'</span>)<span class="selector-class">.config</span>(function($stateProvider)&#123;</span><br><span class="line">     $<span class="selector-tag">stateProvider</span></span><br><span class="line">     <span class="selector-class">.state</span>(<span class="string">'home'</span>,&#123;</span><br><span class="line">         <span class="comment">//home  page     </span></span><br><span class="line">      &#125;)</span><br><span class="line">     <span class="selector-class">.state</span>(<span class="string">'userpage'</span>,&#123;</span><br><span class="line">         <span class="attribute">url</span>:<span class="string">'/user'</span>,</span><br><span class="line">         <span class="attribute">authencitate</span>:true,</span><br><span class="line">         <span class="comment">//other code,such as controller </span></span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="selector-class">.state</span>(<span class="string">'login'</span>,&#123;</span><br><span class="line">         <span class="attribute">url</span>:<span class="string">'/login'</span>,</span><br><span class="line">         <span class="comment">// other code</span></span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="2-监听-stateChangeStart事件"><a href="#2-监听-stateChangeStart事件" class="headerlink" title="2.监听$stateChangeStart事件"></a>2.监听<code>$stateChangeStart</code>事件</h2><p>可以在<code>$rootScope</code>中监听 ，也可以写在一个单独的服务中，这里以<code>$rootScope</code>为例<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// other code </span></span><br><span class="line">angular.module(<span class="string">'mApp'</span>).run(run);</span><br><span class="line">run.$inject = [<span class="string">'$rootScope'</span>,<span class="string">'userService'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">($rootScope,userService)</span></span>&#123;</span><br><span class="line">    $rootScope.$on(<span class="string">'$stateChangeStart'</span>,<span class="function"><span class="keyword">function</span><span class="params">(event,toState,toParams,fromState,fromParams)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toState.authencitate &amp;&amp; !userService.isLogin())&#123;</span><br><span class="line"></span><br><span class="line">        event.preventDefault();<span class="comment">//must </span></span><br><span class="line">        $rootScope.returnState = fromState;</span><br><span class="line">        $rootScope.returnParams = fromParams;</span><br><span class="line">        $stete.go(<span class="string">'login'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-登录处的逻辑"><a href="#3-登录处的逻辑" class="headerlink" title="3.登录处的逻辑"></a>3.登录处的逻辑</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ajax 登录成功后</span></span><br><span class="line"><span class="keyword">if</span>(!$rootScope.returnState)&#123;</span><br><span class="line">$state.go(<span class="string">'home'</span>);</span><br><span class="line"><span class="comment">//用户直接进的登录页面，returnState为undefined,跳转到默认主页就行了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">   $state.go($rootScope.returnState,$rootScope.returnParams,&#123;reload:<span class="literal">true</span>,<span class="comment">/* other settings */</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里解释一下代码 ，在$stateChangeStart的监听代码中，判断一下toState,即要去的页面的authencitate是否为true,是的话意味着我们必须要登录才准许访问，如果不需要验证就正常访问（authencitate为自定义字段，什么名字都可以的）。<br>userService为定义的一个服务，包括判断是否已经登录、登录、登出逻辑。如果用户未登录并且所访问的页面需要授权，那么我们就要阻止跳转事件的正常进行<code>event.preventDefault();</code>，之后把要去的状态和参数暂存为<code>returnState</code>,<code>returnParams</code>,再人为跳转到login页面。<br>在登录逻辑中，当登录成功后，判断一下<code>returnState</code>是否为空，是的话就直接跳到网站主页，不是就<code>$state.go(returnState,returnParams)</code>就可以了。</p>
<p>通过以上配置，我们就可以实现需求：自动跳转到登录页面并在登录后自动跑回需要访问的页面。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.jonahnisenson.com/angular-js-ui-router-redirect-after-login-to-requested-url/" target="_blank" rel="noopener">1</a>.<a href="http://www.jonahnisenson.com/angular-js-ui-router-redirect-after-login-to-requested-url/" target="_blank" rel="noopener">Angular.js UI-router redirect after login to requested url</a></p>
<p><a href="http://angular-ui.github.io/ui-router/site/#/api" target="_blank" rel="noopener">2</a>.<a href="http://angular-ui.github.io/ui-router/site/#/api" target="_blank" rel="noopener">ui-router API</a></p>
]]></content>
      
        <categories>
            
            <category> Angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ui-router利用多views实现模板式开发]]></title>
      <url>http://dequn.github.io/2016/03/19/use-ui-router-multi-views-for-template-develop/</url>
      <content type="html"><![CDATA[<p>如何使用ui-router实现页面的分离呢？看代码！<br>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ui-view=&quot;header&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div ui-view=&quot;body&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div ui-view=&quot;footer&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>Js code<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$stateProvider</span><br><span class="line">     .state(<span class="string">'root'</span>, &#123;</span><br><span class="line">         abstrac<span class="variable">t:</span> true,</span><br><span class="line">         <span class="keyword">view</span><span class="variable">s:</span> &#123;</span><br><span class="line">             <span class="string">'header'</span>: &#123;</span><br><span class="line">                 templateUr<span class="variable">l:</span> <span class="string">'layout/header/header.tpl.html'</span>,</span><br><span class="line">                 controller: <span class="string">'HeaderController'</span>,</span><br><span class="line">                 controllerA<span class="variable">s:</span> <span class="string">'vm'</span></span><br><span class="line">             &#125;,</span><br><span class="line">             <span class="string">'footer'</span>: &#123;</span><br><span class="line">                 templateUr<span class="variable">l:</span> <span class="string">'layout/footer/footer'</span>,</span><br><span class="line">                 controller: <span class="string">'FooterController'</span>,</span><br><span class="line">                 controllerA<span class="variable">s:</span> <span class="string">'vm'</span></span><br><span class="line">             &#125;,</span><br><span class="line">             <span class="string">'body'</span>: &#123;</span><br><span class="line">                 templateUr<span class="variable">l:</span> <span class="string">'layout/body/body.tpl.html'</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;)</span><br><span class="line">     .state(<span class="string">'find'</span>,&#123;</span><br><span class="line">        paren<span class="variable">t:</span><span class="string">'root'</span>,</span><br><span class="line">     	templateUR<span class="variable">l:</span><span class="string">'find/find.tpl.html'</span>,</span><br><span class="line">     	controller:<span class="string">'FindControlller'</span>,</span><br><span class="line">     	//....other settings </span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure></p>
<p>记得把root状态设置成抽象的，即不能直接实例化，其他状态中需要设置parent属性为’root’,即我们的状态的父状态，这样在其他代码中写链接的时候就可以直接写成<code>ui-sref=&quot;find&quot;</code>而不用都写成<code>ui-sref=&quot;root.find&quot;</code>了。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>[1] <a href="http://stackoverflow.com/questions/27603252/angular-ui-router-multiple-named-views-for-all-states" target="_blank" rel="noopener">http://stackoverflow.com/questions/27603252/angular-ui-router-multiple-named-views-for-all-states</a><br>[2] <a href="http://angular-ui.github.io/ui-router/site/#/api" target="_blank" rel="noopener">http://angular-ui.github.io/ui-router/site/#/api</a></p>
]]></content>
      
        <categories>
            
            <category> Angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Angular </tag>
            
            <tag> ui-router </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS6.4 上安装 Oracle 12c]]></title>
      <url>http://dequn.github.io/2016/03/09/install-oracle-12c-on-cnetos6-4/</url>
      <content type="html"><![CDATA[<p>主要记录一下遇到的问题，其他参考别的博文<a href="http://www.centoscn.com/CentosServer/sql/2013/0828/1467.html" target="_blank" rel="noopener">CentOS x6.4 Oracle 12c 安装手记</a>。</p>
<h2 id="问题1：package-compact-libstdc-is-not-installed"><a href="#问题1：package-compact-libstdc-is-not-installed" class="headerlink" title="问题1：package compact-libstdc++ is not installed"></a>问题1：package compact-libstdc++ is not installed</h2><p>运行 yum list | grep compat-libstdc++<br>如果有结果列出，则直接跳过这一步就行了。<br>如果没有到<a href="http://www.rpm-find.net/linux/rpm2html/search.php?query=compat-libstdc%2B%2B-33" target="_blank" rel="noopener">http://www.rpm-find.net/linux/rpm2html/search.php?query=compat-libstdc%2B%2B-33</a> 下载一个安装就行了<br>rpm -ivh   compat-libstdc++xxxxx.rpm</p>
<p>查询的时候刻带上后边的全名就行了。</p>
<h2 id="问题2：-runInstaller-时报must-be-configured-to-display-at-least-256-colors-错误"><a href="#问题2：-runInstaller-时报must-be-configured-to-display-at-least-256-colors-错误" class="headerlink" title="问题2：./runInstaller 时报must be configured to display at least 256 colors 错误"></a>问题2：./runInstaller 时报must be configured to display at least 256 colors 错误</h2><p>退出当前终端 ，再开一个一般就行了。</p>
<h2 id="问题3：-开启vncserver的时候提示错误："><a href="#问题3：-开启vncserver的时候提示错误：" class="headerlink" title="问题3： 开启vncserver的时候提示错误："></a>问题3： 开启vncserver的时候提示错误：</h2><blockquote>
<p>WARNING: The first attempt to start Xvnc failed, possibly because the font<br>catalog is not properly configured.  Attempting to determine an appropriate<br>font path for this system and restart Xvnc using that font path …<br>Could not start Xvnc.<br>_XSERVTransSocketUNIXCreateListener: …SocketCreateListener() failed<br>_XSERVTransMakeAllCOTSServerListeners: server already running<br>….</p>
</blockquote>
<p>解决方案：换一个端口开启vncserver试试。</p>
<h2 id="问题4：安装sql-developer"><a href="#问题4：安装sql-developer" class="headerlink" title="问题4：安装sql developer"></a>问题4：安装sql developer</h2><p>从官网上下载对应版本安装既可，注意需要的jdk版本，不是jre,看清楚 ，第一次打开sql developer的时候如果没有找到需要的jdk环境变量，会提示输入一次，以后就不用再输入了。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>1.<a href="https://community.oracle.com/thread/2293534?tstart=0" target="_blank" rel="noopener">Could Not execute auto Check for DISPLAY</a><br>2.<a href="http://www.centoscn.com/CentosServer/sql/2013/0828/1467.html" target="_blank" rel="noopener">CentOS x6.4 Oracle 12c 安装手记</a><br>3.<a href="https://www.redhat.com/archives/rhelv6-list/2012-March/msg00067.html" target="_blank" rel="noopener">starting vncserver</a></p>
]]></content>
      
        <categories>
            
            <category> Others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> CentOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[任性]]></title>
      <url>http://dequn.github.io/2016/03/04/renxing/</url>
      <content type="html"><![CDATA[<p>今天在群里边看到大师兄从阿里离职的消息(刚刚入职半年)，群里也好长时间没人接话，估计大家当时所想应该和我差不多吧。且不吹嘘阿里的待遇和前途，我想光是那个普通职位也是目前许多同学很想拿到的吧，换我有这个工作肯定高兴地睡不着觉（我好象明白了什么，他们找的工作也是一个比一个屌，羡煞我等）。也让我又想到了何老师从一个世界排名第一的再保险公司（百度查的，不保证准确，所以就不提公司名字了）辞职搞创业去了。姑且不论他们在原公司的职务大小，薪水高低（其实我也不知道），衣食无忧安逸地过一辈子肯定是没问题的！不过他们都跟其他好多牛X的人一样，任性地走了，走了！</p>
<p>刚刚毕业，刚刚成家，不是想着什么时候买车、什么时候买房，放着好好的工作不要了，任性地全职创业去了 ，还有亚南和李锋，毕业之后根本就没有去找工作，还有好多好多其他只听过其事没见过其人的，不断地刷新我对此事的看法 。</p>
<p>以前总觉得这些事离我比较远，牛X的人多了，跟我没什么关系，也没什么交集，作为一个普通得不能再普通的人，找个稳定体面的工作，夫复何求。遇到的这些人有多牛？是，比起平常大众有那么一点不一样，那就是他们比一般人更任性。比起那些闻其名如雷贯耳的人，同样简直是不能再普通了。</p>
<p>之前好像听到过一个“全民创业”的词儿，觉得味道怎么这么不对，没听出来对这时代的把握，也没听到想参与其中的冲动，总觉得像一个冷眼看热闹并且坚信这热闹肯定以悲剧收场的看客从嘴里哼了一句：没什么了不得的，不就那样嘛!说到这里又想起其他带“全民”的词儿，什么“全民健身”、“全民运动”了，如果这些词是从参与者口中说出倒也无妨，可作为谦词了;如果只是个旁观者，是没有资格用“全民xx”这样的词语的，这跟酸葡萄是一样一样的。借用并修改晓松奇谈里边的一句话：大时代不是等来的，也不是看来的，是参与、创造出来的。</p>
<p>我不是极力鼓吹创业怎么着怎么着，只是很欣赏并且钦佩这样一种“任性”的态度， 喜欢并投入地去做一件事，该是如何的惬意啊!</p>
<p>生活不止眼前的苟且,还有诗和远方的田野…..为找到那片海不顾一切      -《生活不止眼前的苟且》，这周五好像要在虾米音乐首发</p>
<p>好吧，我矫情了… </p>
<p>（2016年3月4日补发）</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular异步数据在Controller中不更新的坑]]></title>
      <url>http://dequn.github.io/2016/01/15/angular-async-data-binding-trap/</url>
      <content type="html"><![CDATA[<p>在使用Angular的过程中，推荐都是将数据及数据的处理逻辑写在Service里边，Controller里边只负责与视图交互的逻辑，所以很多同学都很自然地会这样写：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in service,e.g. ServiceA</span></span><br><span class="line">   <span class="comment">//... other code</span></span><br><span class="line">   <span class="keyword">this</span>.<span class="keyword">data</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// in controller,e.g. ControllerA</span></span><br><span class="line">   <span class="comment">//... other code</span></span><br><span class="line">   $scope.<span class="keyword">data</span> = ServiceA.<span class="keyword">data</span>;</span><br></pre></td></tr></table></figure></p>
<p>这样写好以后，当ServiceA中的data变化，ControllerA中的数据也会跟着变，如果数据绑定到视图了，那么视图上也会跟着相应的变化，但是现在有个问题，如果Service.data是异步获取过来之后变化的呢，像下面这样<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//code in ServiceA</span></span><br><span class="line"><span class="comment">// ... other codes</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">self</span> = this; <span class="comment">// for get this in async</span></span><br><span class="line">$http(req).success(<span class="function"><span class="keyword">function</span><span class="params">(response,status,headers,config)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res= angualr.fromJson(response); <span class="comment">// e.g. repsonse is JSON</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.data = res.data;<span class="comment">//e.g response is an object, and has a data property</span></span><br><span class="line">    <span class="comment">//here if use this is a Window Object,you should use self instead of this</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">.error(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// code for http error </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>视图上的数据会跟着变化吗？No!太天真！这个时候会发现，视图上屁的动静也没有，那么这是怎么回事，如何解决呢？</p>
<p>这里需要重补JavaScript基础知识，Javscript的变量类型分为不可变的原始值(undefined,null,bool,number,string)和可变的引用对象(Array,Object..)，原始值是不可更改的，任何方法都无法更改，尤其对字符串，看上去返回了一个修改后的字符串都是返回了一个新的字符串对值，如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"hello"</span>; <span class="comment">//定义s</span></span><br><span class="line">s.toUpperCase(); <span class="comment">//返回HELLO,但s没有变</span></span><br><span class="line">s                <span class="comment">//输出hello</span></span><br><span class="line"><span class="comment">//这是不可变的原始值，对于Object和Array呢，他们都是引用对象，就像C++里边的指针，C#和Java中的引用对象概念，他们是可变的，如下：</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;x:<span class="number">1</span>&#125;; <span class="comment">//定义一个对象</span></span><br><span class="line">o.x = <span class="number">2</span>;       <span class="comment">//修改对象属性值</span></span><br><span class="line">o.y = <span class="number">3</span>;       <span class="comment">//再次给对象增加一个新属性</span></span><br></pre></td></tr></table></figure>
<p>那么现在来看，我们在service中到底做了什么吧，<code>var res = angular.fromJson(response);</code>这一句话的作用是根据返回的response(JSON字符串)创建了一个新的对象res,<code>self.data = res;</code>这句的作用是什么呢，把data的引用指向了新的res的基对象，原来data的基对象还在吗，这个时候是在的，由ControllerA中的$scope.data 引用，到这一步，controllerA中的data和serviceA中的data已经完全没有关系了，他们分别指向了两个不同的内存地址，controllerA中的对象根本没有变，视图中当然也就不会有变化！其前后如图所示(原谅手头没有好的画图工具，凑合吧)：<br><img src="http://obqjd695a.bkt.clouddn.com/%E5%BC%82%E6%AD%A5%E5%89%8D%E5%90%8E%E5%BC%95%E7%94%A8%E5%8F%98%E5%8C%96.png" alt="异步前后引用对象的变化情况"></p>
<p>这样就明白为什么视图没有更新了吧！那么如何解决这个问题？有两种办法,第一种copy,注意angualr.copy会所destination中的清空，再复制，如果不想清空，请用push或者其他操作:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in async</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = angular.formJson(response);</span><br><span class="line">angular.<span class="built_in">copy</span>(res,slef.data);</span><br></pre></td></tr></table></figure></p>
<p>第二种：使用promise,$http本身就是一个promise对象，可以返回，在controller中获取pormise,然后把$scope.data 再指向service.data就可以了！<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in service</span></span><br><span class="line"><span class="keyword">this</span>.foo()&#123;</span><br><span class="line"><span class="keyword">return</span> $http(req).success(function()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res= angualr.fromJson(response); </span><br><span class="line">    self.<span class="keyword">data</span> = res.<span class="keyword">data</span>;</span><br><span class="line"></span><br><span class="line">&#125;)<span class="comment">//other code</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// in controller</span></span><br><span class="line">service.foo().then(fucntion()&#123;$scope.<span class="keyword">data</span> = service.<span class="keyword">data</span>&#125;) <span class="comment">//point to service.data again</span></span><br></pre></td></tr></table></figure></p>
<p>注意，还有讲用$watch()实现的，由于监听效率会比较低，不推荐使用！</p>
<p>参考:<br>《JavaScript权威指南》,O’REILLY,机械工业出版社<br>angularJS API,<a href="http://docs.angularjs.cn/api/ng/function/angular.copy" target="_blank" rel="noopener">http://docs.angularjs.cn/api/ng/function/angular.copy</a></p>
]]></content>
      
        <categories>
            
            <category> Angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用Angular select实现多级联动]]></title>
      <url>http://dequn.github.io/2016/01/13/angular-select-cascading/</url>
      <content type="html"><![CDATA[<p>Angular中的select标签提供了很好的下拉选项，利用多个select就可以实现多级联动了，直接看例子。<br>首先需要定义好数据，这里我使用的是一个JS的Object对象，propertyName是父级选择，propertyValue是子级选择，这里只有两层，也可以再往下嵌套到三层等，如下所示。</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$scope.lineTypes = &#123;</span><br><span class="line">  <span class="string">'A 自然景观线路'</span>: [</span><br><span class="line">    <span class="string">'AA 山路'</span>,</span><br><span class="line">    <span class="string">'AB 水路'</span>,</span><br><span class="line">    <span class="string">'AC 峡谷'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'B 购物线路'</span>: [</span><br><span class="line">    <span class="string">'BA 土特产'</span>,</span><br><span class="line">    <span class="string">'BB 工艺品'</span>,</span><br><span class="line">    <span class="string">'BC 日用品'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'C 美食线路'</span>: [</span><br><span class="line">    <span class="string">'CA 地方小吃街'</span>,</span><br><span class="line">    <span class="string">'CB 高档餐饮街'</span>,</span><br><span class="line">    <span class="string">'CC 酒吧街'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'D 历史文化线路'</span>: [</span><br><span class="line">    <span class="string">'DA 历史人物'</span>,</span><br><span class="line">    <span class="string">'DB 历史事件'</span>,</span><br><span class="line">    <span class="string">'DC 文学艺术'</span>,</span><br><span class="line">    <span class="string">'DD 美术'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'E 名俗风情线路'</span>: [</span><br><span class="line">    <span class="string">'EA 地方风俗与民间礼仪'</span>,</span><br><span class="line">    <span class="string">'EB 民间节庆'</span>,</span><br><span class="line">    <span class="string">'EC 民间演艺'</span>,</span><br><span class="line">    <span class="string">'ED 民间健身活动与赛事'</span>,</span><br><span class="line">    <span class="string">'EE 宗教活动'</span>,</span><br><span class="line">    <span class="string">'EF 庙会与民间集会'</span>,</span><br><span class="line">    <span class="string">'EG 饮食习俗'</span>,</span><br><span class="line">    <span class="string">'EH 特色服饰'</span>,</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>另外还需要定义一个filter,用来过滤出子级数据，如下所示:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$scope.filter(<span class="string">'toSubTypeArray'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(input, mainType)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">input</span>[mainType];</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>定义好数据就可以直接在网页上展示了，select的具体用法可以看<em><a href="http://docs.angularjs.cn/api/ng/directive/select" target="_blank" rel="noopener">官方文档</a></em>,这里不细讲了，直接看例子。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> <span class="keyword">class</span>=<span class="string">"form-control"</span> style=<span class="string">"width:200px;"</span> ng-options=<span class="string">"key as key for (key,value) in activityTypes"</span> ng-model=<span class="string">"selectedActivityMainType"</span>&gt;</span><br><span class="line">  &lt;option <span class="keyword">value</span>=<span class="string">""</span>&gt;---请选择大类---&lt;/option&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br><span class="line">&lt;<span class="keyword">select</span> <span class="keyword">class</span>=<span class="string">"form-control"</span> style=<span class="string">"width:200px;"</span> ng-options=<span class="string">"type for type in  activityTypes | toSubTypeArray:selectedActivityMainType track by type"</span> ng-model=<span class="string">"selectedActivitySubType"</span>&gt;</span><br><span class="line">  &lt;option <span class="keyword">value</span>=<span class="string">""</span>&gt;---请选择子类---&lt;/option&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>注意，这里解释一下为什么数据定义成Object对象而不是Array对象，在第一个下拉中，我们把propertyName当作官方文档中介绍select和label，select就是选择的那个值，label就是界面上显示出来的值,这两个可以不是同一个值哦！定义成一个Object对象后，可以直接按照PropertyName取出子级的数组，比较方便！</p>
<p>效果如下:<br><img src="http://obqjd695a.bkt.clouddn.com/%E5%A4%9A%E7%BA%A7%E8%81%94%E5%8A%A81.png" alt="第一级选择"><br><img src="http://obqjd695a.bkt.clouddn.com/%E5%A4%9A%E7%BA%A7%E8%81%94%E5%8A%A82.png" alt="第二级选择"></p>
<p>这样就完成了多级联动的效果，目前存在的一个问题是如果使用filter过滤，测试中发现会多次触发，性能有所下降，当然也可以通过添加select的ng-change事件，在ng-change中更新子列表来实现，这里就不再实现了！</p>
]]></content>
      
        <categories>
            
            <category> Angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Angular </tag>
            
            <tag> select-cascding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop, HBase, Spark集群安装步骤]]></title>
      <url>http://dequn.github.io/2015/12/25/hadoop-hbase-spark-install/</url>
      <content type="html"><![CDATA[<p>安装 HBase, Spark都需要首先安装Hadoop！</p>
<h1 id="1-基本环境准备"><a href="#1-基本环境准备" class="headerlink" title="1 基本环境准备"></a>1 基本环境准备</h1><h2 id="1-1-hadoop用户添加和权限配置"><a href="#1-1-hadoop用户添加和权限配置" class="headerlink" title="1.1 hadoop用户添加和权限配置"></a>1.1 hadoop用户添加和权限配置</h2><p>为了统一管理，主从结点上都用hadoop用户名来管理，不是非限定用hadoop!<br>这几条命令用root用户操作，普通用户用sudo,这些命令必须在所有要配置的机器上进行一次<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">adduser </span>hadoop</span><br><span class="line"><span class="keyword">adduser </span>hadoop sudo <span class="comment">#添加到sudo用户组里边</span></span><br></pre></td></tr></table></figure></p>
<p>CentOS部分版本可能默认没有sudo组，需要执行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line"><span class="comment">#输入密码</span></span><br><span class="line">vim <span class="regexp">/etc/</span>sudoers</span><br></pre></td></tr></table></figure></p>
<p>找到 root ALL=(ALL) ALL这一行，在它下面写入<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop <span class="literal">ALL</span>=(<span class="literal">ALL</span>)  <span class="literal">ALL</span> #hadoop是用户名</span><br></pre></td></tr></table></figure></p>
<p>这样hadoop用户就可以用sudo命令了。</p>
<h2 id="1-2-安装java，配置JAVA-HOME环境变量-已经安装过的跳过此步"><a href="#1-2-安装java，配置JAVA-HOME环境变量-已经安装过的跳过此步" class="headerlink" title="1.2 安装java，配置JAVA_HOME环境变量,已经安装过的跳过此步"></a>1.2 安装java，配置JAVA_HOME环境变量,已经安装过的跳过此步</h2><h3 id="1-2-1-安装oracle-jdk"><a href="#1-2-1-安装oracle-jdk" class="headerlink" title="1.2.1 安装oracle-jdk"></a>1.2.1 安装oracle-jdk</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-software-properties</span><br><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:webupd8team/java</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure>
<h3 id="1-2-2-设置JAVA-HOME"><a href="#1-2-2-设置JAVA-HOME" class="headerlink" title="1.2.2 设置JAVA_HOME"></a>1.2.2 设置JAVA_HOME</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~<span class="regexp">/.bashrc </span></span><br><span class="line"><span class="regexp">sudo vim /etc</span><span class="regexp">/bashrc</span></span><br><span class="line"><span class="regexp">#使用以上两个命令都可以，/etc</span><span class="regexp">/bashrc对所有用户都有效，～/</span>.bashrc只对当前用户有效。下同</span><br></pre></td></tr></table></figure>
<p>写入<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/lib/jvm/java-8-oracle</span><br></pre></td></tr></table></figure></p>
<p>运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment">#source /etc/bashrc</span></span><br><span class="line"><span class="comment">#上边编辑的是哪个就source哪个，下同</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span> <span class="comment">#查看一下设置的对不对，生效了木有</span></span><br></pre></td></tr></table></figure></p>
<h2 id="1-3-hosts文件修改"><a href="#1-3-hosts文件修改" class="headerlink" title="1.3 hosts文件修改"></a>1.3 hosts文件修改</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>hosts</span><br></pre></td></tr></table></figure>
<p>如下配置<br>192.168.6.131 hadoop-master<br>192.168.6.132 hadoop-slave1<br>如果需要其他机器，同样写入保存即可，我这里只有两台机器，一个做主结点，一个做从结点,之后ping一下看ip地址是否正确<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping hadoop-master -c 3</span><br><span class="line">ping hadoop-slave1 -c 3</span><br></pre></td></tr></table></figure></p>
<h2 id="1-4-ssh-配置"><a href="#1-4-ssh-配置" class="headerlink" title="1.4 ssh 配置"></a>1.4 ssh 配置</h2><h3 id="1-4-1-openssh-server安装"><a href="#1-4-1-openssh-server安装" class="headerlink" title="1.4.1 openssh-server安装"></a>1.4.1 openssh-server安装</h3><p>首先需要所有的机器都能够进行ssh连接，一般购买的服务器默认都是安装了的(如果true直接进入第二步，无密码连接)，如果是自己的系统与电脑则需要安装openssh-server,安装方法如下<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install openssh-server</span><br></pre></td></tr></table></figure></p>
<p>安装完成后即可测试<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh localhost</span></span><br></pre></td></tr></table></figure></p>
<p>提示输入密码，输入即可，我们需要不用密码登录，这样hadoop才能连接其他机器.接着进行下一步无密码连接配置</p>
<h2 id="无密码连接"><a href="#无密码连接" class="headerlink" title="无密码连接"></a>无密码连接</h2><p>这里讲一下原理，如果机器A需要无密码ssh机器B，我们需要在机器A上生成公钥，然后把公钥分发给机器B，在机器B上我们把公钥添加到authorized_keys里边，当机器A需要连接机器B的时候，机器B生成随机串用机器A的公钥加密并传回给A，A用私钥对加密的串解密再返回给B，B验证解密结果，正确的话就让A成功连接，这样就免去了输入用户和密码的步骤啦！<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa #按提示完成后运行下边命令,其实一路回车下去就行了,如果其他机器上的用户名不一样，则需要按提示进行</span><br><span class="line">cat ~/.ssh/id_rsa<span class="selector-class">.pub</span> &gt;&gt; ~/.ssh/<span class="selector-class">.authorized_keys</span> <span class="selector-id">#id_rsa</span><span class="selector-class">.pub</span> 是刚生成的那个文件,这里做的是我们无密码连接自己！</span><br></pre></td></tr></table></figure></p>
<p>再测试应该就是不要密码即可登录的了。如果还提示要密码，运行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod og-wx ~<span class="regexp">/.ssh/</span>authorized_keys</span><br></pre></td></tr></table></figure></p>
<p>把master上的公钥传输给所有的slave机器，在所有slave上把master的公钥都cat进authorized_keys,这样master机器访问所有的slave都不再需要密码了，如果有类似其他需求，按同样方法。</p>
<p>经过以上步骤并验证没有问题，说明我们的基础准备已经完成，接下来就可以进行Hadoop,hbase,scala,spark的安装了，注意以下操作都是在一台机器上进行的，当操作完成后需要把配置好的文件都打包发送到所有机器上并解压，那样才算配置完成！</p>
<h1 id="2-Hadoop下载安装"><a href="#2-Hadoop下载安装" class="headerlink" title="2 Hadoop下载安装"></a>2 Hadoop下载安装</h1><p>在官网上下载Hadoop压缩包,比如下载的文件名hadoop-2.7.1.tar.gz,之后将其解压到/usr/local下边</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf hadoop-2.7.1.tar.gz -C /usr/<span class="built_in">local</span></span><br><span class="line"><span class="built_in">cd</span> usr/<span class="built_in">local</span></span><br><span class="line">sudo mv hadoop-2.7.1 hadoop <span class="comment">#为了方便版本升级后不需要再修改~/.bashrc，所以这里将其重命名为hadoop</span></span><br><span class="line">sudo chown hadoop:hadoop ./hadoop </span><br><span class="line"><span class="comment">#为了避免权限不够的问题，这里将hadoop文件夹的权限赋于hadoop用户和用户组，如果是在如个人Home下边等不需要验证权限的位置，省略此步</span></span><br></pre></td></tr></table></figure>
<h2 id="2-1-PATH配置"><a href="#2-1-PATH配置" class="headerlink" title="2.1 PATH配置"></a>2.1 PATH配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc </span><br><span class="line"><span class="meta">#</span><span class="bash">sudo vim /etc/bashrc</span></span><br><span class="line"><span class="meta">#</span><span class="bash">使用以上两个命令都可以，/etc/bashrc对所有用户都有效，～/.bashrc只对当前用户有效。下同</span></span><br></pre></td></tr></table></figure>
<p>写入<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/usr/local/hadoop/bin</span><span class="symbol">:/usr/locao/hadoop/sbin</span> <span class="comment">#这里的路径是上一步解压安装Hadoop的路径</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-2-hadoop文件配置"><a href="#2-2-hadoop文件配置" class="headerlink" title="2.2 hadoop文件配置"></a>2.2 hadoop文件配置</h2><p>新的配置文件在hadoop/etc/hadoop/路径下面，网上许多教程都写的是在conf下，注意可能会找不到</p>
<h3 id="2-2-1-hadoop-etc-hadoop-core-site-xml"><a href="#2-2-1-hadoop-etc-hadoop-core-site-xml" class="headerlink" title="2.2.1 hadoop/etc/hadoop/core-site.xml"></a>2.2.1 hadoop/etc/hadoop/core-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop-master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span> <span class="comment">&lt;!--注意端口号，进行hadoop fs -xxx命令是需要这个端口号的，hbase配置也是需要这个端口号的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意hadoop.tmp.dir的配置路径，默认的是系统tmp路径，重启后是会被清理掉的。</p>
<h3 id="2-2-2-hadoop-etc-hadoop-hdfs-site-xml"><a href="#2-2-2-hadoop-etc-hadoop-hdfs-site-xml" class="headerlink" title="2.2.2 hadoop/etc/hadoop/hdfs-site.xml"></a>2.2.2 hadoop/etc/hadoop/hdfs-site.xml</h3><p>注意dfs.replication值，由于只有两台机器，所以一台做NameNode,另一台作为DataNode,值为1,如果有多台机器，需要配置为实际数。<br>dfs.namenode.name.dir存放的是namenode需要的相关数据，需要按实际需要更换位置，生产环境并不建议设置在tmp目录下边。<br>dfs.dtatnode.dtat.dir就是分布式文件在datanode上的存放位置，生产环境中当然不能在tmp下边啦！</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;configuration&gt;</span></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line"><span class="params">&lt;name&gt;</span>dfs.replication<span class="params">&lt;/name&gt;</span></span><br><span class="line"><span class="params">&lt;value&gt;</span><span class="number">1</span><span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line"><span class="params">&lt;name&gt;</span>dfs.namenode.name.dir<span class="params">&lt;/name&gt;</span></span><br><span class="line"><span class="params">&lt;value&gt;</span>file:<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/hadoop/</span>tmp<span class="meta-keyword">/dfs/</span>name<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line"><span class="params">&lt;name&gt;</span>dfs.datanode.data.dir<span class="params">&lt;/name&gt;</span></span><br><span class="line"><span class="params">&lt;value&gt;</span>file:<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/hadoop/</span>tmp<span class="meta-keyword">/dfs/</span>name<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;/configuration&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-3-mapred-site-xml"><a href="#2-2-3-mapred-site-xml" class="headerlink" title="2.2.3 mapred-site.xml"></a>2.2.3 mapred-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistroy.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistroy.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-4-yarn-site-xml"><a href="#2-2-4-yarn-site-xml" class="headerlink" title="2.2.4 yarn-site.xml"></a>2.2.4 yarn-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-5-slaves文件配置"><a href="#2-2-5-slaves文件配置" class="headerlink" title="2.2.5 slaves文件配置"></a>2.2.5 slaves文件配置</h3><p>将所有的DataNode结点机器名写在文件中，一行一个机器名如下</p>
<p>hadoop-slave1<br>hadoop-salve2<br>…</p>
<h3 id="2-2-6-hadoop-env-sh"><a href="#2-2-6-hadoop-env-sh" class="headerlink" title="2.2.6 hadoop-env.sh"></a>2.2.6 hadoop-env.sh</h3><p>主要配置JAVA_HOME,设置为实际的路径即可！</p>
<p>经过上面的配置，将hadoop文件压缩发送一其他集群机器上并解压到一致的路径下即可</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zcf ~/hadoop<span class="selector-class">.lreis</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> /usr/local/hadoop/</span><br><span class="line">scp ~/hadoop<span class="selector-class">.lreis</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> hadoop-slave1:~/</span><br><span class="line">ssh hadoop-slave1</span><br><span class="line">sudo tar -zxf ~/hadoop<span class="selector-class">.lreis</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C /usr/local/</span><br><span class="line">sudo chown -R hadoop:hadoop /usr/local/hadoop/</span><br></pre></td></tr></table></figure>
<p>最后需要在hadoop-master机器上进行namenode的初始化<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>loacl<span class="regexp">/hadoop/</span>bin<span class="regexp">/hadoop namenode -format</span></span><br></pre></td></tr></table></figure></p>
<p>最后执行start-dfs.sh,start-yarn.sh后，运行jps命令查看当前的java进行，在master上应该包括以下几个进程才属正常<br>NameNode<br>ResourceManager<br>在savle机器上的进程应该有如下进程<br>NodeManager<br>DataNode</p>
<p>如果进程正常，浏览器查看hadooop-master:50070看到Live Nodes 不为零才可以，如果为零的话去查看日志分析原因！</p>
<h1 id="3-hbase-安装"><a href="#3-hbase-安装" class="headerlink" title="3 hbase 安装"></a>3 hbase 安装</h1><p>下载hbase ，如下载下来的文件名叫做hbase-1.1.2-bin.tar.gz,同样解压到/usr/local/下边，重命名，更改权限，配置环境变量等 操作</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf hbase-1.1.2-bin.tar.gz -C /usr/<span class="built_in">local</span></span><br><span class="line"><span class="built_in">cd</span> usr/<span class="built_in">local</span></span><br><span class="line">sudo mv hbase-1.1.2-bin hbase <span class="comment">#为了方便版本升级后不需要再修改~/.bashrc，所以这里将其重命名为hbase</span></span><br><span class="line">sudo chown hadoop:hadoop ./hbase</span><br></pre></td></tr></table></figure>
<h2 id="3-1-配置环境变量"><a href="#3-1-配置环境变量" class="headerlink" title="3.1 配置环境变量"></a>3.1 配置环境变量</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~<span class="string">/.bashrc</span></span><br></pre></td></tr></table></figure>
<p>写入<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HBASE_HOME</span>=/usr/local/hbase</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$HBASE_HOME/bin #这里的路径是上一步解压安装Hbase的路径</span><br></pre></td></tr></table></figure></p>
<h2 id="3-2-hbase配置"><a href="#3-2-hbase配置" class="headerlink" title="3.2 hbase配置"></a>3.2 hbase配置</h2><p>hbase的配置文件在hbase/conf目录下,需要修改hbase-site.xml,hbase-env.sh,regionservers三个文件</p>
<h3 id="3-2-1-hbase-site-xml"><a href="#3-2-1-hbase-site-xml" class="headerlink" title="3.2.1 hbase-site.xml"></a>3.2.1 hbase-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- 说明是集群环境，不是伪分布式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop-master:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span> <span class="comment">&lt;!-- 这里的hadoop-master:9000要与hadoop的core-site.xml配置文件位置一样，/hbase目录则是自己设置的值，也可以为其他路径/hbase2等等 </span></span><br><span class="line"><span class="comment">&lt;/property&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;/configuration&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-regionservers"><a href="#3-2-2-regionservers" class="headerlink" title="3.2.2 regionservers"></a>3.2.2 regionservers</h3><p>一行一个机器，如<br>hadoop-master<br>hadoop-slave1<br>….</p>
<h3 id="3-2-3-hbase-env-sh"><a href="#3-2-3-hbase-env-sh" class="headerlink" title="3.2.3 hbase-env.sh"></a>3.2.3 hbase-env.sh</h3><p>配置JAVA_HOME即可</p>
<p>配置完成后打包分发到其他机器上，操作如同hadoop中的步骤，不再赘述！<br>运行start-hbase.sh，查看jps,master机器上应该多出以下几个进程<br>HMster<br>HRegionServer<br>HQuorumPeer<br>slave机器上多出进程<br>HRegionServer</p>
<h1 id="4-scala-spark安装"><a href="#4-scala-spark安装" class="headerlink" title="4 scala,spark安装"></a>4 scala,spark安装</h1><p>spark运行需要scala环境，所以scala要安装在spark前面，且是必须滴！<br>下载scala并解压到/usr/local下边，配置~/.bashrc即可<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">SCALA_HOME</span>=/usr/local/scala</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PAHT</span>:$SCALA_HOME/bin</span><br></pre></td></tr></table></figure></p>
<p>下载spark，并解压到/usr/local路径，配置~/.bashrc<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">SPARK_HOME</span>=/usr/local/spark</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PAHT</span>=<span class="variable">$PATH</span>:$SPARK_HOME/bin</span><br></pre></td></tr></table></figure></p>
<p>运行source ~/.bashrc使配置生效</p>
<h2 id="4-1-spark-配置"><a href="#4-1-spark-配置" class="headerlink" title="4.1 spark 配置"></a>4.1 spark 配置</h2><h3 id="4-1-1-slaves-文件"><a href="#4-1-1-slaves-文件" class="headerlink" title="4.1.1 slaves 文件"></a>4.1.1 slaves 文件</h3><p>没有此此文件就创建一个，内容一行一个机器，不再赘述</p>
<h3 id="spark-env-sh"><a href="#spark-env-sh" class="headerlink" title="spark-env.sh"></a>spark-env.sh</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/java/jdk1.7.0_79</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">SCALA_HOME</span>=/usr/local/scala</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">SPARK_MASTER_IP</span>=hadoop-master #主结点名</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">SPARK_WORKER_MEMORY</span>=1g  #分配内存大小</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_CONF_DIR</span>=/usr/local/hadoop/etc/hadoop #hadoop配置文件的路径</span><br></pre></td></tr></table></figure>
<p>记得把scala,spark在所有机器上都配置一下，方法不再赘述。运行/usr/local/spark/start-all.sh启动spark集群。<br>注意由于hadoop/sbin下也有一个start-all.sh，由于这两个文件都配置在PATH里边了，运行hadoop/sbin/start-all.sh的时候可以看到提示该方法已经不推荐使用了，可以把该文件重命名一下，这样直接运载start-all.sh就肯定是spark的了，不会发生歧义。</p>
<p>至此，hadoop,hbase,scala,spark的安装配置就完成了，注意这里只是让集群环境跑了起来，真实的生产环境还有许多其他参数需要配置，参见官方文档！</p>
]]></content>
      
        <categories>
            
            <category> Hadoop </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HBase </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Spark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于重写开题]]></title>
      <url>http://dequn.github.io/2015/12/21/guan-yu-chong-xie-kai-ti/</url>
      <content type="html"><![CDATA[<p>今天应该是继两次高考失利以来最受打击的事情了，开题答辩的结果是——重写开题报告！题目要换，方向要换。而离学校规定的deadline只有8天的时间了（从现在计）。一切都要从新准备，论文重新找，paper重新看，在这么短的时间内要按质量完成开题，是不可能完成的事情了。本以为开题结束可以是阶段性的结束，稍微放松两天，没想到却真真的只是苦难的开始！<br>其实关于今天的开题结果，心里似乎隐隐约约的感觉到了，冥冥之中似乎也有一种力量引着我向这边走来。我并不是要为自己开脱，在就今天被否决的这个方向上，我也一直不断怀疑其可行性和意义，在最初的时候也跟老板沟通过，但被老板的“这是没有科研态度”驳回，也没有再坚持自己的想法，不了了之，这也是前事之因，后事之果吧。当然这也赖不得老板，就这个方向我没有进行更多的思考我论证，也没有进行更多的沟通交流，给今天的开题失败埋下了种子。<br>另外关于选题的态度上，也不够认真勤勉，总感觉是开了题就可以了，没有很认真的去看论文以及相关的研究工作，这也造成了视野狭小，不能站在一个很高的视角来看待要做的问题。科研态度也的确需要改进，不能做撞钟和尚。<br>从另外的一方面考虑，我也很庆幸今天能够被当场驳回，首先在充分讨论了其不可行之后，虽然在短时间内重新换另一个研究方向需要花费不少功夫，但避免了在几个月之后课题研究进行不下去的代价要小得多！从理论上讲，本次开题的作用甚为重大！另外一点，也让我更加意识到自己的态度问题，被评委老师毫不留情地批评之后，才更清楚自己的所作所为离一个合格的研究生有多远！再有的一点启发就是防微杜渐，在疑问问题没有真正被解决的时候千万不要妥协，不了了之，一定要及时与相关人（这里是老板）沟通，不能因其他原因而耽误，事实证明，一个小的问题被时间放大以后，其代价是几何级数增长的，要在这么短的时间内重新开题已经是一个很好的例子了！<br>我们做任何一件事都要付出代价，也但愿我们付出的代价能够换回更多的收益！</p>
<p>Accept, control, change, digest, four keys to deal with an accidet.    – by dequn, 2015-12-21</p>
]]></content>
      
        <categories>
            
            <category> 个人日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular之过滤器filter]]></title>
      <url>http://dequn.github.io/2015/12/04/angular-filter/</url>
      <content type="html"><![CDATA[<p>Angular 的 filter 可以说是一大利器，那些需要处理但处理逻辑不复杂且复用次数比较多的函数都可以封闭成filter，Angular 的 filter 可以通过类似管道命令的调用方式进行，对于大多数人来说并不陌生，就不再赘述。Angular提供的原生filter有以下几种：</p>
<ul>
<li>currency:对货币进行格式化，需要传入货币格式，默认采用本地货币格式。</li>
<li>date:对日期格式化，需要传入日期</li>
<li>number:把数字转换成文本</li>
<li>json:把Object对象序列化成JSON字符串</li>
<li>lowercase</li>
<li>uppercase 这两个都不说了吧</li>
<li>limitTo:截取字符串或者数组，返回一个新的对象，记住，新的对象，新的对象，重要的事件说三遍。</li>
<li>orderBy:看名字，对数组排序，需要传入规则，对字符串默认字母排序，数字数组默认自然排列，记住，如果数字数字排序结果不对，先看传的数字有没有是字符串啊！</li>
<li>filter：filter的filter,对进行筛选，也是返回新的对象哦！</li>
</ul>
<h1 id="filter之filter"><a href="#filter之filter" class="headerlink" title="filter之filter"></a>filter之filter</h1><p>先说这个筛选数组的，比较灵活，调用方法:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; input |<span class="built_in"> filter </span>: express : comparator &#125;&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Angular </tag>
            
            <tag> filter </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
