<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dequn&#39;s blog</title>
  <subtitle>最近有点孤僻</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dequn.github.io/"/>
  <updated>2017-09-17T07:49:32.000Z</updated>
  <id>http://dequn.github.io/</id>
  
  <author>
    <name>dequn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python模块的相对导入和绝对导入</title>
    <link href="http://dequn.github.io/2017/09/17/ways-of-python-import/"/>
    <id>http://dequn.github.io/2017/09/17/ways-of-python-import/</id>
    <published>2017-09-17T05:25:27.000Z</published>
    <updated>2017-09-17T07:49:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始用Python写代码，对于import的方式不是很理解，尤其是导入上层包的模块时，经常会使用<code>sys.path.append(&#39;..&#39;)</code>，然后再import，很不优雅，所以花些时间全部梳理一遍。</p>
<p>首先需要明白明白两个概念<strong>包</strong>和<strong>模块</strong>，很多人也都了解，贴出<a href="http://www.runoob.com/python/python-modules.html" title="http://www.runoob.com/python/python-modules.html" target="_blank" rel="external">runoob</a>（页面跟W3C好像，他们有什么关系吗？）上给出的两个定义。</p>
<ul>
<li><p>模块</p>
<blockquote>
<p>Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。<br>模块让你能够有逻辑地组织你的 Python 代码段。<br>把相关的代码分配到一个模块里能让你的代码更好用，更易懂。<br>模块能定义函数，类和变量，模块里也能包含可执行的代码。</p>
</blockquote>
</li>
<li><p>包</p>
<blockquote>
<p>包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。<br>简单来说，包就是文件夹，但该文件夹下必须存在 <code>__init__.py</code> 文件, 该文件的内容可以为空。<code>__int__.py</code>用于标识当前文件夹是一个包。</p>
</blockquote>
</li>
</ul>
<p>从顶层模块（sys.path）或者当前的包中导入模块，使用<code>import module</code>或者<code>from module import xxx</code>的方式就不再赘述，不过有一种使用括号进行的多模块导入方式，如：<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">from</span> from <span class="type">Tkinter</span> <span class="keyword">import</span> (<span class="type">Tk</span>, <span class="type">Frame</span>, <span class="type">Button</span>, <span class="type">Entry</span>, <span class="type">Canvas</span>, <span class="type">Text</span>,</div><div class="line">    <span class="type">LEFT</span>, <span class="type">DISABLED</span>, <span class="type">NORMAL</span>, <span class="type">RIDGE</span>, <span class="type">END</span>)</div></pre></td></tr></table></figure></p>
<p>这样可以避免使用反斜杠续行，稍微优雅一些，多行的字符串也可以使用一样的括号语法实现。记住，<code>from module import *</code>是绝对的不推荐的，会意外地“污染”命名空间。</p>
<p><strong>相对导入和绝对导入</strong>是这次讨论的重点，在项目中，肯定不意外地会建立不同层级和结构关系的包，那么在这些包之间，我们又应该如何导入要引用的模块？</p>
<h1 id="绝对导入"><a href="#绝对导入" class="headerlink" title="绝对导入"></a>绝对导入</h1><p>在Python 2.4之前，如果使用了<code>import foo</code>，如果当前包内也有一个模块foo，由于解释器是不知道你导入的是顶层模块还是当前包内的模块，根据模块寻找加载的顺序[]，当前包内的foo模块就会覆盖掉顶层的foo模块，而可能引起不必要的歧义。于是要求foo必须是在sys.path中能够寻到的模块或包，这就是绝对导入的定义。python-dev 社区选择将绝对导入作为默认导入的方式，一来是因为更常用，二是因为绝对导入可以提供相对导入的全部功能.</p>
<p>在Python 2.5 和 2.6中，绝对导入是可选的，需要在文件开头添加<code>from __future__ import absolute_import</code>来实现默认的绝对导入。</p>
<h1 id="相对导入"><a href="#相对导入" class="headerlink" title="相对导入"></a>相对导入</h1><p>相对导入是根据模块的<code>__name__</code>属性来决定模块的位置，然后计算相对路径，在同一个项目相邻层级的包和模块中最为常用，也最为方便。关于相对导入的语法实现模式，有一个很有趣也很广泛的讨论，看着那些先驱开发者的讨论，收获也是蛮多的，感兴趣的参考<a href="https://www.python.org/dev/peps/pep-0328/" title="PEP 328 -- Imports: Multi-Line and Absolute/Relative" target="_blank" rel="external">PEP 328 – Imports: Multi-Line and Absolute/Relative</a>。最后，Guido采用”.”前缀表示相对导入，和Unix系统中的目录表示含义一样，一个”.”表示当年层级，多一个就表示向上一层。下面是一些例子：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> .moduleY <span class="keyword">import</span> spam</div><div class="line"><span class="keyword">from</span> .moduleY <span class="keyword">import</span> spam <span class="keyword">as</span> ham</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> moduleY</div><div class="line"><span class="keyword">from</span> ..subpackage1 <span class="keyword">import</span> moduleY</div><div class="line"><span class="keyword">from</span> ..subpackage2.moduleZ <span class="keyword">import</span> eggs</div><div class="line"><span class="keyword">from</span> ..moduleA <span class="keyword">import</span> foo</div><div class="line"><span class="keyword">from</span> ...package <span class="keyword">import</span> bar</div><div class="line"><span class="keyword">from</span> ...sys <span class="keyword">import</span> path</div></pre></td></tr></table></figure></p>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>相对导入必须使用 <code>from .&lt;&gt; import xxx</code>(并且至少含有一个.符号)的模式，<code>import &lt;&gt;</code>总是绝对导入，当然，如果<code>from &lt;&gt; import</code>中没有句点，那么也是绝对导入。但是类似<code>import .foo</code>的方式是非合法语句，因为<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import XXX<span class="selector-class">.YYY</span><span class="selector-class">.ZZZ</span></div></pre></td></tr></table></figure></p>
<p>的<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">XXX<span class="selector-class">.YYY</span><span class="selector-class">.ZZZ</span></div></pre></td></tr></table></figure></p>
<p>是可用的表达式，而<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> .moduleY</div></pre></td></tr></table></figure></p>
<p>的<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">.moduleY</span></div></pre></td></tr></table></figure></p>
<p>不是一个可用的表达式。</p>
<h1 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h1><p>使用相对导入还是绝对导入，可以完全凭个人喜好。但是为了代码的可阅读性，一般的共识是不超过两层的层级可以使用相对导入，试想一下，如果有超过3个的”.”，还能够正确快速地知道向上到了哪个层级吗?这个时候使用绝对导入会更加方便，代码也更好维护。不论哪一种导入方式，也都会有重构时的麻烦（如重命名一个模块），但是我想在IDE如此普遍使用的情况下，这个因素应该是最不值得考虑的了。加一个TODO吧，参阅一些优秀的开源框架源码，看看他们是如何组织的。</p>
<h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>使用了相对导入以后，如果直接以<code>python script_name.py</code>的方式运行脚本，Python解释器会报<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#python 2</span></div><div class="line"><span class="symbol">ValueError:</span> Attempted relative import <span class="keyword">in</span> non-package</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#python 3</span></div><div class="line">SystemError: Parent <span class="keyword">module</span> <span class="string">''</span> <span class="keyword">not</span> loaded, cannot perform relative <span class="keyword">import</span></div></pre></td></tr></table></figure></p>
<p>的错误，可以使用<code>python -m script_name.py</code>加上-m开关的方式运行，-m用于告诉解释器以脚本的方式运行模块，具体这样做的原因将在下一篇文章中分析。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://kuanghy.github.io/2016/07/21/python-import-relative-and-absolute" title="Python 相对导入与绝对导入" target="_blank" rel="external">Python 相对导入与绝对导入</a></li>
<li><a href="http://www.runoob.com/python/python-modules.html" title="http://www.runoob.com/python/python-modules.html" target="_blank" rel="external">http://www.runoob.com/python/python-modules.html</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0328/" title="PEP 328 -- Imports: Multi-Line and Absolute/Relative" target="_blank" rel="external">PEP 328 – Imports: Multi-Line and Absolute/Relative</a></li>
<li><a href="http://codingpy.com/article/python-import-101/" title="Python导入模块的几种姿势" target="_blank" rel="external">Python导入模块的几种姿势</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始用Python写代码，对于import的方式不是很理解，尤其是导入上层包的模块时，经常会使用&lt;code&gt;sys.path.append(&amp;#39;..&amp;#39;)&lt;/code&gt;，然后再import，很不优雅，所以花些时间全部梳理一遍。&lt;/p&gt;
&lt;p&gt;首先需要明白明白两
    
    </summary>
    
      <category term="Python" scheme="http://dequn.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://dequn.github.io/tags/Python/"/>
    
      <category term="import" scheme="http://dequn.github.io/tags/import/"/>
    
  </entry>
  
  <entry>
    <title>终端高效切换编码</title>
    <link href="http://dequn.github.io/2017/09/05/%E7%BB%88%E7%AB%AF%E9%AB%98%E6%95%88%E5%88%87%E6%8D%A2%E7%BC%96%E7%A0%81/"/>
    <id>http://dequn.github.io/2017/09/05/终端高效切换编码/</id>
    <published>2017-09-05T12:51:21.000Z</published>
    <updated>2017-09-17T05:23:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>在以前的时候，终端编码通通设置的都是UTF-8，即使有一两台远程机，因为有自主权也都是UTF-8编码，包括数据库表格，也都是统一UTF-8编码，不得不说这样统一以后非常方便，几乎也没有考虑过编码不同带来的烦恼。</p>
<p>来到公司工作一段时间后才发现，自己的开发机还好说，设置成UTF-8就可以了，保持原有惯例。然而，需要经常登录别的机器看任务跑代码就会发现乱码了，好吧，手动把终端(iTerm2)调到GBK，结束以后再调回来；然后过了没两天，会发现其他机器的Mysql表格也是GBK的，好吧还得暂调GBK。最大的问题还不在于麻烦，我一个终端下连接了多台服务器和数据库，编码都不统一，这可怎么办？</p>
<p>在网上找到了两种方案，第一种是基于iTerm2的，可以参考<a href="http://blog.chenxiaosheng.com/posts/2013-10-29/mac_osx_iterm2_utf8_gbk_switch.html" target="_blank" rel="external">Mac OSX iTerm2 终端UTF-8和GBK编码自由切换</a>，虽然我是iTerm2的用户，但是觉得这种方法还是有些麻烦，如果我不用iTerm2还不能解决了？</p>
<p>当然还有其他利器，那就是luit.</p>
<p>参考IBM Knowledge Center上的介绍<a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.cmds3/luit.htm" target="_blank" rel="external">luit 命令</a></p>
<blockquote>
<p>luit 命令是一个过滤器，在任意应用程序和 UTF-8 终端仿真器之间运行。luit 命令将应用程序输出从语言环境的编码转换为 UTF-8，并将终端输入从 UTF-8 转换为语言环境的编码。</p>
<blockquote>
<p>注：<br>多语言应用程序必须设置为仅生成 UTF-8 代码。不得使用命令生成 UTF-8 之外的输出。</p>
</blockquote>
</blockquote>
<p>luit的安装也非常简单，参考 <a href="https://blog.jamespan.me/2015/06/12/luit-with-tmux" target="_blank" rel="external">Tmux、Luit 杂谈</a>过程如下。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget -c ftp:<span class="comment">//invisible-island.net/luit/luit.tar.gz</span></div><div class="line">tar -xzvf luit<span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line">cd luit-<span class="number">20141204</span>/</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<p>其使用可以man一下，或者参考<a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.cmds3/luit.htm" target="_blank" rel="external">luit 命令</a>，下面简单给出两个示例。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">luit </span>-encoding gbk ssh relay-mechine</div><div class="line"><span class="comment"># 这样登录远程机器用的就是GBK编码了</span></div></pre></td></tr></table></figure>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">luit </span>-encoding gbk mysql -u mysql_user -p </div><div class="line"><span class="comment">#这样连接数据库用的也是GBK编码</span></div></pre></td></tr></table></figure>
<p>最后不得不吐槽一下我司，是因为出于历史原因吗，固守GBK阵营？</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.cmds3/luit.htm" target="_blank" rel="external">luit 命令</a></li>
<li><a href="https://blog.jamespan.me/2015/06/12/luit-with-tmux" target="_blank" rel="external">Tmux、Luit 杂谈</a></li>
<li><a href="http://blog.chenxiaosheng.com/posts/2013-10-29/mac_osx_iterm2_utf8_gbk_switch.html" target="_blank" rel="external">Mac OSX iTerm2 终端UTF-8和GBK编码自由切换</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在以前的时候，终端编码通通设置的都是UTF-8，即使有一两台远程机，因为有自主权也都是UTF-8编码，包括数据库表格，也都是统一UTF-8编码，不得不说这样统一以后非常方便，几乎也没有考虑过编码不同带来的烦恼。&lt;/p&gt;
&lt;p&gt;来到公司工作一段时间后才发现，自己的开发机还好说
    
    </summary>
    
      <category term="Linux" scheme="http://dequn.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://dequn.github.io/tags/Linux/"/>
    
      <category term="Encoding" scheme="http://dequn.github.io/tags/Encoding/"/>
    
  </entry>
  
  <entry>
    <title>Python中解析命令行参数</title>
    <link href="http://dequn.github.io/2017/09/02/parse-command-line-args-in-python/"/>
    <id>http://dequn.github.io/2017/09/02/parse-command-line-args-in-python/</id>
    <published>2017-09-02T13:47:03.000Z</published>
    <updated>2017-09-17T05:23:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python中常用的获取命令行参数的方法有三种，分别可适用于不同的场景。</p>
<h1 id="直接从sys-argv中获取"><a href="#直接从sys-argv中获取" class="headerlink" title="直接从sys.argv中获取"></a>直接从sys.argv中获取</h1><p>sys.agrv保存了命令行的参数列表，其中，<code>sys.argv[0]</code>保存的是脚本的名称，所以要获取自己传入的参数时，需要从第二个元素开始，参数的顺序与<code>sys.argv</code>中一致。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># m1.<span class="keyword">py</span></div><div class="line">import sys</div><div class="line"><span class="keyword">print</span> <span class="string">'The length of sys.argv is %d'</span> % <span class="built_in">len</span>(sys.<span class="built_in">argv</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'Argument list: '</span>,str(sys.<span class="built_in">argv</span>)</div></pre></td></tr></table></figure>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python m1.py <span class="keyword">first</span> <span class="keyword">second</span> <span class="keyword">third</span></div><div class="line">The <span class="built_in">length</span> <span class="keyword">of</span> sys.argv <span class="keyword">is</span> <span class="number">4</span></div><div class="line">Argument <span class="built_in">list</span>:  ['m1.py', '<span class="keyword">first</span>', '<span class="keyword">second</span>', '<span class="keyword">third</span>']</div></pre></td></tr></table></figure>
<p><strong>获这种方法适用于参数较少的时候，使用者按照固定顺序将所需参数传入即可，同时，取的参数都是str类型，需要用户自行转换为所需类型。</strong></p>
<h1 id="使用getopt-getopt获取参数"><a href="#使用getopt-getopt获取参数" class="headerlink" title="使用getopt.getopt获取参数"></a>使用getopt.getopt获取参数</h1><p>当参数比较多的时候我们可能需要明确指定参数名称，又或者我们可能需要一些可选参数，使用第一种方法就不是那么方便了，所以我们可以用getopt来解析参数，其调用方式如下所示。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">getopt</span><span class="selector-class">.getopt</span>(<span class="selector-tag">args</span>, <span class="selector-tag">options</span>, <span class="selector-attr">[long_options]</span>)</div></pre></td></tr></table></figure></p>
<ul>
<li>args是将被解析的参数列表</li>
<li>options是需要识别的参数名列表，当然不一定非得有参数，比如-h用来输出帮助信息，当有对应参数的时候，需要在标识符后边添加一个分号”:”。</li>
<li>long_options可选参数是长参数名列表，如–long-name，当有参数传入的时候，需要在右边添加等号”=”。</li>
</ul>
<p>函数返回一个二元组，第一个元素是（option,value)列表，第二个元素是未识别的参数列表。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#m2.<span class="keyword">py</span></div><div class="line">#codin<span class="variable">g:utf</span>-<span class="number">8</span></div><div class="line">import sys, getopt</div><div class="line"></div><div class="line">opts, left_args = getopt.getopt(sys.<span class="built_in">argv</span>[<span class="number">1</span>:], <span class="string">'i:h'</span>, [<span class="string">'in='</span>,<span class="string">'help'</span>]) #第一个参数是脚本名，不传入</div><div class="line"><span class="keyword">for</span> <span class="keyword">opt</span>, val in <span class="keyword">opt</span><span class="variable">s:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">opt</span> == <span class="string">'-h'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'不含参数Help Info'</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">opt</span> == <span class="string">'--help'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'不含参数Help Info2'</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">opt</span> == <span class="string">'-i'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'短参数-i: '</span>, val</div><div class="line">    <span class="keyword">if</span> <span class="keyword">opt</span> == <span class="string">'--in'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'长参数--ifile: '</span>, val</div><div class="line"><span class="keyword">print</span> <span class="string">'未识别参数：'</span>, str(left_args)</div></pre></td></tr></table></figure>
<p>运行结果<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">python m2<span class="selector-class">.py</span> -<span class="selector-tag">i</span> short_arg --<span class="keyword">in</span>=long_arg -h --help left_arg</div><div class="line">短参数-<span class="selector-tag">i</span>:  short_arg</div><div class="line">长参数--ifile:  long_arg</div><div class="line">不含参数Help Info</div><div class="line">不含参数Help Info2</div><div class="line">未识别参数： [<span class="string">'left_arg'</span>]</div></pre></td></tr></table></figure></p>
<p>这种方法已经能够应对大多数情况了，不过获取的val仍是str类型。</p>
<h1 id="使用argparse模块解析参数"><a href="#使用argparse模块解析参数" class="headerlink" title="使用argparse模块解析参数"></a>使用argparse模块解析参数</h1><p>argparse 模块最大的特点就是可以建立用户友好的命令行接口，可以实现指定需要传入的参数，自动解析sys.argv，自动生成帮助信息、错误信息等。如果要使用getopt来达到同样的效果，就需要写很多很多的代码啦。</p>
<p>argparse 通过ArgumentParser对象实现参数的解析，可以很友好地实现帮助信息、参数传入前缀、参数冲突等特性，其通过add_argument方法添加具体的参数——包括位置参数和可选参数等，同时可以指定这些参数的个数、转换类型、默认值、限定枚举值、是否必须以及别名等信息。argparse的使用会比上述两个复杂一些，但是其功能更强大、使用更友好一些。具体使用方法可以单独写一篇文章了，但是官方文档已经给出了很详细的示例了，所以这里就不在赘述，感兴趣的可以参阅<a href="https://docs.python.org/2.7/library/argparse.html" target="_blank" rel="external">argparse — Parser for command-line options, arguments and sub-commands</a>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上述三个方法从简单到复杂，功能从单一到丰富，开发人员可根据需要选择。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.tutorialspoint.com/python/python_command_line_arguments.htm" target="_blank" rel="external">Python Command Line Arguments</a></li>
<li><a href="https://docs.python.org/2.7/library/argparse.html" target="_blank" rel="external">argparse — Parser for command-line options, arguments and sub-commands</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python中常用的获取命令行参数的方法有三种，分别可适用于不同的场景。&lt;/p&gt;
&lt;h1 id=&quot;直接从sys-argv中获取&quot;&gt;&lt;a href=&quot;#直接从sys-argv中获取&quot; class=&quot;headerlink&quot; title=&quot;直接从sys.argv中获取&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Python" scheme="http://dequn.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://dequn.github.io/tags/Python/"/>
    
      <category term="args" scheme="http://dequn.github.io/tags/args/"/>
    
  </entry>
  
  <entry>
    <title>字符集、字符编码以及Python中编码的那些事</title>
    <link href="http://dequn.github.io/2017/08/19/charset-encoding-and-in-python/"/>
    <id>http://dequn.github.io/2017/08/19/charset-encoding-and-in-python/</id>
    <published>2017-08-19T14:53:43.000Z</published>
    <updated>2017-08-24T15:02:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>总会遇到乱码的问题，也总是按照网上的教程一步一步操作，解决的过程就像碰运气，从来没有总结过，再次遇到的时候还是不知道是什么问题，所以，花一点时间，总结一下。</p>
<h1 id="字符集和字符编码"><a href="#字符集和字符编码" class="headerlink" title="字符集和字符编码"></a>字符集和字符编码</h1><p><strong>字符集</strong>是一个系统支持的抽象字符的集合。这个集合是有限集合，包括文字、标点和数字等，由于计算机内部全部都是数字存储，所以字符集本身也是一个符号与数字之间的映射关系，比如ASCII字符集中大写字母A的编号是65。存储或传输的时候计算机根据字符集将人能看懂的字符换算成计算机能看懂的数字，输出的时候再换算成人能看懂的字符。</p>
<p><strong>字符编码</strong>，计算机系统内部全部采用二进制，那么将数字转换成二进制的时候采用什么规则呢，比如采用几位，高位代表什么，低位代表什么等，这就是所谓的编码规则。</p>
<p><strong>乱码</strong>，计算机按照指定或默认的编码规则对bit位进行解码，由于与存储或接收时使用的编码规则不一致，就导致了翻译出来的字符不是原来的字符，造成所谓的乱码，即我们人类看不懂。</p>
<h1 id="常用的字符集和字符编码"><a href="#常用的字符集和字符编码" class="headerlink" title="常用的字符集和字符编码"></a>常用的字符集和字符编码</h1><p>常见的字符集有ASCII，能表示128个字符，扩展ASCII能表示256个字符，GBXXX字符集是我国专家设计的一套字符集，还有包括繁体字的汉字字符集BIG5，这些字符集同时规定了编码规则，所以他们<strong>同时也是字符编码</strong>，需要说明的是，他们都是兼容ASCII编码的。</p>
<h1 id="Unicode-和-UTF-8"><a href="#Unicode-和-UTF-8" class="headerlink" title="Unicode 和 UTF-8"></a>Unicode 和 UTF-8</h1><p>最容易搞混的是Unicode和UTF-8了，因为像上面那样每个语言或者地区都搞一套，在互联网中普及非常不便，于是就出现了<strong>Unicode字符集</strong>，目前已经超过了十万字符，可以包括多种文字，这个字符集规定了符号系统到数字的映射，但是并没有规定统一的编码规则。</p>
<p>UTF-8，UTF-16，UTF-32都是Unicode的编码规则，其中UTF-32同意采用4个字节表示字符，空间浪费较大，所以不常见，UTF-8是一种变长的编码方式，因为文本的重点不在于关注编码规则的细节，所以就不再赘述，具体实现可以参见其他作者的文章。</p>
<p><strong>所以，我们常见的GBXXX,ASCII,BIG5等本身即是指代字符集，也是字符编码，而Unicode只是字符集，UTF-8只是字符编码。</strong></p>
<h1 id="Python-中的编码"><a href="#Python-中的编码" class="headerlink" title="Python 中的编码"></a>Python 中的编码</h1><p>这里主要有三个问题：</p>
<ol>
<li>str和unicode类型有什么区别？</li>
<li>源文件开头的#coding:utf-8是做什么用的，跟源文件的编码有什么关系？</li>
<li>源文件的编码对程序有没有影响？</li>
<li>file = open(‘xxx’),file.read()是怎样对文件进行解码的？</li>
</ol>
<p>首先来看第一个问题，再Python2中，通过<code>s1=&#39;str字符串&#39;</code>得到的是str对象，而<code>s2=u&#39;unicode字符串&#39;</code>得到的是unicode对象，这两种都是<code>basestring</code>类型的子类，从官方文档<a href="https://docs.python.org/2/howto/unicode.html" target="_blank" rel="external">Unicode HOWTO</a>中的解释</p>
<blockquote>
<p>Python represents Unicode strings as either 16- or 32-bit integers, depending on how the Python interpreter was compiled.</p>
</blockquote>
<p>可以看出，unicode字符串可以看做直接存储的是该字符对应的Unicode数字码，在<a href="http://wklken.me/posts/2013/08/31/python-extra-coding-intro.html#str-he-unicode" target="_blank" rel="external">PYTHON-进阶-编码处理小结</a>一文中，还对比了用<code>len()</code>求两者长度的区别，其中，<code>len(&#39;中文&#39;)</code>得到的结果为6，而<code>len(u&#39;中文&#39;)</code>得到的结果才是实际意义上的2。在<a href="https://pythonhosted.org/kitchen/unicode-frustrations.html" target="_blank" rel="external">Overcoming frustration: Correctly using unicode in python2</a>中也解释了str类型和unicode类型的不同，str类型是实际上bytes序列，<code>len(str)</code>所得到的也是序列的长度，而不是实际意义上的字符串长度。</p>
<blockquote>
<p>In python, the unicode type stores an abstract sequence of code points. Each code point represents a grapheme. By contrast, byte str stores a sequence of bytes which can then be mapped to a sequence of code points. Each unicode encoding (UTF-8, UTF-7, UTF-16, UTF-32, etc) maps different sequences of bytes to the unicode code points.</p>
</blockquote>
<p>Python开发者通常会写<code>#coding: utf-8</code>或者类似的encoding hint在源文件的前两行（也只有在前两行才起作用，并且该编码必须兼容ASCII，UTF-16就不能正常工作）。 很多人明白的一点就是：<strong>如果源代码文件中出现了非ASCII字符集中的字符，我们需要写这样的注释</strong>。 但是对于像我这样的新手来说，常常会有一个问题，这句话的作用是什么，又和源文件本身的编码什么关系？</p>
<p>在Python2.1中，Unicode字符串只能采用”unicode-escape”的方式，比如需要定义”中文”两个字，须得<code>s = u&#39;\u4e2d\u6587&#39;</code>，而不能直接出现<code>s = u&#39;中文&#39;</code>这样的代码，这就对使用非拉丁字符的开发者非常不友好，所以就有了<a href="https://www.python.org/dev/peps/pep-0263/" target="_blank" rel="external">PEP263</a>，该网页中也解释了该lint的作用，即<strong>使用指定的编码将源代码中的字符串字面量转换成unicode，而这与源文件编码本身并没有直接关系</strong>。</p>
<blockquote>
<p>This PEP proposes to introduce a syntax to declare the encoding of a Python source file. The encoding information is then used by the Python parser to interpret the file using the given encoding. <strong>Most notably this enhances the interpretation of Unicode literals in the source code and makes it possible to write Unicode literals using e.g. UTF-8 directly in an Unicode aware editor</strong>.</p>
<p>…</p>
<p>In Python 2.1, Unicode literals can only be written using the Latin-1 based encoding “unicode-escape”. This makes the programming environment rather unfriendly to Python users who live and work in non-Latin-1 locales such as many of the Asian countries. <strong>Programmers can write their 8-bit strings using the favorite encoding, but are bound to the “unicode-escape” encoding for <em>Unicode literals</em> </strong>.</p>
</blockquote>
<p>有的读者可能看到了，刚才的引用中明明提到了</p>
<blockquote>
<p>The encoding information is then used by the Python parser to interpret the file using the given encoding.</p>
</blockquote>
<p>怎么能说与源文件的编码无关呢？</p>
<p>这里就需要了解Python解释器工作的流程了，在<a href="https://www.python.org/dev/peps/pep-0263/" target="_blank" rel="external">PEP263</a>中有说明：</p>
<blockquote>
<p>Python’s tokenizer/compiler combo will need to be updated to work as follows:<br>A. read the file<br>B. decode it into Unicode assuming a fixed per-file encoding<br>C. convert it into a UTF-8 byte string<br>D. tokenize the UTF-8 content<br>E. compile it, creating Unicode objects from the given Unicode data and creating string objects from the Unicode literal data by first reencoding the UTF-8 data into 8-bit string data using the given file encoding</p>
</blockquote>
<p>注意：步骤B中的encoding指的不是我们声明的<code>coding:encoding</code>，而是源文件保存在磁盘上的编码，我们用到的编码只在步骤E中使用到，下面的实验中也证明了这一点。</p>
<p>最后需要说明的是open(‘file’).read()得到的按字节读取的str类型，可以参考<a href="http://wklken.me/posts/2013/08/31/python-extra-coding-intro.html#str-he-unicode" target="_blank" rel="external">PYTHON-进阶-编码处理小结</a>。</p>
<p>现在有两个文件及其运行结果，因为我的终端环境为UTF-8，所以GB18030的str输出始终是乱码的。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#utf8.<span class="keyword">py</span></div><div class="line">#codin<span class="variable">g:utf</span>-<span class="number">8</span></div><div class="line"><span class="keyword">if</span>  __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">'UTF-8源py中的str中文字符'</span></div><div class="line">    <span class="keyword">print</span> <span class="keyword">u</span><span class="string">'UTF-8源py中的unicode中文字符'</span></div><div class="line"></div><div class="line">    <span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">'./utf8text'</span>,<span class="string">'r'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="keyword">file</span>.readline()</div><div class="line">    <span class="keyword">file</span>.<span class="keyword">close</span>()</div><div class="line"></div><div class="line">    <span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">'./gb18030text'</span>,<span class="string">'r'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="keyword">file</span>.readline().decode(<span class="string">'gb18030'</span>)</div><div class="line">    <span class="keyword">file</span>.<span class="keyword">close</span>()</div><div class="line"></div><div class="line"># 运行:<span class="keyword">python</span> utf8.<span class="keyword">py</span></div><div class="line"></div><div class="line">UTF-<span class="number">8</span>源<span class="keyword">py</span>中的str中文字符</div><div class="line">UTF-<span class="number">8</span>源<span class="keyword">py</span>中的unicode中文字符</div><div class="line">UTF8文件中的编码</div><div class="line"></div><div class="line">GB18030�ļ��еı���</div></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#gb18030.<span class="keyword">py</span></div><div class="line">#codin<span class="variable">g:</span> GB18030</div><div class="line"><span class="keyword">if</span>  __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'GB18030源py中的str中文'</span></div><div class="line">    <span class="keyword">print</span> <span class="keyword">u</span><span class="string">'GB18030源py中的unicode中文'</span></div><div class="line"></div><div class="line">    <span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">'./utf8text'</span>,<span class="string">'r'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="keyword">file</span>.readline()</div><div class="line">    <span class="keyword">file</span>.<span class="keyword">close</span>()</div><div class="line">    <span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">'./gb18030text'</span>,<span class="string">'r'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="keyword">file</span>.readline()</div><div class="line">    <span class="keyword">file</span>.<span class="keyword">close</span>()</div><div class="line"></div><div class="line">#python gb18030.<span class="keyword">py</span></div><div class="line">GB18030Դ<span class="keyword">py</span>�е�str����</div><div class="line">GB18030源<span class="keyword">py</span>中的unicode中文</div><div class="line">UTF8文件中的编码</div><div class="line"></div><div class="line">GB18030�ļ��еı���</div></pre></td></tr></table></figure>
<p>还有一个文件utf8gb18030.py，它的源文件编码为UTF-8，但是我在头部声明了<code>coding:utf-8</code>，来看一下这个文件的运行结果为什么：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#codin<span class="variable">g:</span> GB18030</div><div class="line"><span class="keyword">if</span>  __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">'str:UTF-8源py中的中文字符,但是coding声明为GB18033'</span></div><div class="line">    <span class="keyword">print</span> <span class="keyword">u</span><span class="string">'unicode:UTF-8源py中的中文字符,但是coding声明为GB18033'</span></div><div class="line"></div><div class="line">    <span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">'./utf8text'</span>,<span class="string">'r'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="keyword">file</span>.readline()</div><div class="line">    <span class="keyword">file</span>.<span class="keyword">close</span>()</div><div class="line"></div><div class="line">    <span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">'./gb18030text'</span>,<span class="string">'r'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="keyword">file</span>.readline()</div><div class="line">    <span class="keyword">file</span>.<span class="keyword">close</span>()</div><div class="line"></div><div class="line"># <span class="keyword">python</span> utf8gb18030.<span class="keyword">py</span></div><div class="line">str:UTF-<span class="number">8</span>源<span class="keyword">py</span>中的中文字符,但是coding声明为GB18033</div><div class="line">unicode:UTF-<span class="number">8</span>婧恜<span class="keyword">y</span>涓殑涓枃瀛楃,浣嗘槸coding澹版槑涓篏B18033</div><div class="line">UTF8文件中的编码</div><div class="line"></div><div class="line">GB18030�ļ��еı���</div></pre></td></tr></table></figure>
<p>我们知道，unicode对象在print到时候会根据sys.out的默认编码进行encode()的，所以不应该出现乱码情况，但是在第三次试验中，本该乱码的str没有问题，不该出现乱码的unicode却乱码了，这说明在上述解释器运行的过程中，步骤B和步骤E使用的不是同一编码，否则运行结果中unicode是不会乱码的。虽然两者不必相等，但是我们也看到了，这会带来更大的困扰，更难定位问题所在，所以<strong>一定要保证源文件的编码与声明的<code>#coding:encoding</code>一致，否则很难跳出坑的</strong>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>作为一个非纯Latin-1开发者，一定要在头部声明encoding hint。</li>
<li>为了避免不必要的麻烦，声明的encoding hint 一定要与源文件的编码一致。</li>
<li>在程序内部最好统一处理为unicode进行，在输出的时候在进行encode，如file.readline().decode(‘你的文件编码’)得到unicode，在写文件的时候可以指定unicode_str.encode(‘你需要的编码’)。</li>
<li>字面量字符串只是用u’xxx’得到unicode。</li>
<li>str可以decode得到unicode，unicode可以encode得到str，其他方向的编解码是不可行的！</li>
</ol>
<p>难免出错，还请不吝指教。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="external">字符编码笔记：ASCII，Unicode和UTF-8</a><br><a href="http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html" target="_blank" rel="external">字符集和字符编码（Charset &amp; Encoding）</a><br><a href="cn.nytimes.com/culture/20150123/t23questions">关于Python脚本开头两行的：#!/usr/bin/python和# -<em>- coding: utf-8 -</em>-的作用 – 指定文件编码类型</a><br><a href="https://www.python.org/dev/peps/pep-0263/" target="_blank" rel="external">PEP 263 – Defining Python Source Code Encodings</a><br><a href="https://pythonhosted.org/kitchen/unicode-frustrations.html" target="_blank" rel="external">Overcoming frustration: Correctly using unicode in python2</a><br><a href="https://docs.python.org/2/howto/unicode.html" target="_blank" rel="external">Unicode HOWTO</a><br><a href="http://stormhouse.github.io/posts/2013/character-encoding-python/" target="_blank" rel="external">python中的字符编码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总会遇到乱码的问题，也总是按照网上的教程一步一步操作，解决的过程就像碰运气，从来没有总结过，再次遇到的时候还是不知道是什么问题，所以，花一点时间，总结一下。&lt;/p&gt;
&lt;h1 id=&quot;字符集和字符编码&quot;&gt;&lt;a href=&quot;#字符集和字符编码&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="Python" scheme="http://dequn.github.io/categories/Python/"/>
    
    
      <category term="charset" scheme="http://dequn.github.io/tags/charset/"/>
    
      <category term="encode" scheme="http://dequn.github.io/tags/encode/"/>
    
      <category term="Python" scheme="http://dequn.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>d3-example-of-different-data-structures</title>
    <link href="http://dequn.github.io/2017/03/31/d3-example-of-different-data-structures/"/>
    <id>http://dequn.github.io/2017/03/31/d3-example-of-different-data-structures/</id>
    <published>2017-03-31T07:10:46.000Z</published>
    <updated>2017-08-24T15:03:54.000Z</updated>
    
    <content type="html"><![CDATA[<style>
img{height:200px;}
</style>


<p>A simple list of chart types and data structure.</p>
<h1 id="Single-property"><a href="#Single-property" class="headerlink" title="Single property"></a>Single property</h1><h2 id="Box-Plots"><a href="#Box-Plots" class="headerlink" title="Box Plots"></a>Box Plots</h2><ul>
<li>Description: Use for Statistics: the smallest value, lower quartile, median, upper quartile,<br>and largest value.</li>
<li>Example:None.</li>
</ul>
<h2 id="Bubble-Chart"><a href="#Bubble-Chart" class="headerlink" title="Bubble Chart"></a>Bubble Chart</h2><ul>
<li>Description: Statistics, the area of circel stands for the count of a value, proper<br>to large amount of values than <strong>Bar Chart</strong>.</li>
<li>Example: <img src="https://camo.githubusercontent.com/dbaf877e0e81e571ae42fa1f6e1115bf052f72ca/687474703a2f2f64336a732e6f72672f65782f627562626c652e706e67" alt=""></li>
</ul>
<h2 id="Bullet-Chart"><a href="#Bullet-Chart" class="headerlink" title="Bullet Chart"></a>Bullet Chart</h2><ul>
<li>Description: A variation on a bar chart, compare a quantitative measure anainst<br>qualiative ranges and related markders.</li>
<li>Example: <img src="https://camo.githubusercontent.com/490b4c309e5ecb769b3969bed04b3b49bf516065/687474703a2f2f64336a732e6f72672f65782f62756c6c65742e706e67" alt=""></li>
</ul>
<h2 id="Calendar-Chart"><a href="#Calendar-Chart" class="headerlink" title="Calendar Chart"></a>Calendar Chart</h2><ul>
<li>Description: Values are visualized as colored cells per day, Use for compartion<br>between moths/years while having a day value detail.</li>
<li>Example: <img src="https://camo.githubusercontent.com/bc2b1c93d21e80d23c99da8ebd59617e94581327/687474703a2f2f64336a732e6f72672f65782f63616c656e6461722e706e67" alt=""></li>
<li>Example: <img src="https://camo.githubusercontent.com/fb70dfff84f2b442e89a6799e13343eda2387dc1/68747470733a2f2f676973742e6769746875622e636f6d2f746a6465636b652f353535383038342f7261772f7468756d626e61696c322e706e67" alt=""></li>
</ul>
<h2 id="Circular-heat-chart"><a href="#Circular-heat-chart" class="headerlink" title="Circular heat chart"></a><a href="http://prcweb.co.uk/circularheatchart/" target="_blank" rel="external">Circular heat chart</a></h2><ul>
<li>Description: A head map with a circular layout.</li>
<li>Example: <img src="http://prcweb.co.uk/img/rainfall-1980-2012.jpg" alt=""></li>
<li>Example: <img src="https://github.com/nicgirault/circosJS/raw/master/doc/temperatures.png" alt=""></li>
</ul>
<h2 id="A-3d-exmaple-for-one-property"><a href="#A-3d-exmaple-for-one-property" class="headerlink" title="A 3d exmaple for one property"></a>A 3d exmaple for one property</h2><p><img src="https://camo.githubusercontent.com/be49e2d5950922a2b221d6578fb2fe0f84b69384/687474703a2f2f616e696d61746564646174612e636f2e756b2f696d672f64332d67616c6c6572792f756b74656d70657261747572656c696e6573332e6a7067" alt=""></p>
<h1 id="A-and-B"><a href="#A-and-B" class="headerlink" title="A and B"></a>A and B</h1><h2 id="Chord-Diagram"><a href="#Chord-Diagram" class="headerlink" title="Chord Diagram"></a>Chord Diagram</h2><ul>
<li>Description: Show directed relationships among a group of entities.</li>
<li>Example: <img src="https://camo.githubusercontent.com/cc8ad10f5975dff97a5d6801269f8203101b20b9/687474703a2f2f64336a732e6f72672f65782f63686f72642e706e67" alt="abc"></li>
</ul>
<h2 id="Force-Directed-Graph"><a href="#Force-Directed-Graph" class="headerlink" title="Force-Directed Graph"></a>Force-Directed Graph</h2><ul>
<li>Description: Shows character co-occurence, related character in closer<br>proximity and unrelated characters are farther apart.</li>
<li>Example: <img src="https://camo.githubusercontent.com/d7b97d7c0873e949f827918763174efcca6c4a5f/687474703a2f2f64336a732e6f72672f65782f666f7263652e706e67" alt=""></li>
<li>Variants: <a href="https://bl.ocks.org/mbostock/4600693" target="_blank" rel="external">Curved Links</a>, <a href="http://bost.ocks.org/mike/fisheye/" target="_blank" rel="external">Fisheye<br>Distoration</a>, <a href="http://bost.ocks.org/mike/miserables/" target="_blank" rel="external">Matrix diagram</a><br>, <a href="http://mbostock.github.io/d3/talk/20111116/force-collapsible.html" target="_blank" rel="external">Collapse Force layout</a><br>, <a href="http://bl.ocks.org/MoritzStefaner/1377729" target="_blank" rel="external">Force-based label</a></li>
</ul>
<h2 id="Sector-Comparation"><a href="#Sector-Comparation" class="headerlink" title="Sector Comparation"></a><a href="http://www.brightpointinc.com/united-states-trade-deficit/" target="_blank" rel="external">Sector Comparation</a></h2><ul>
<li>Description: Comparation between two main properties with some sub propritis.</li>
<li>Example: <img src="https://camo.githubusercontent.com/c2826f9a0c78f2f0404b094c891348b72d38d54e/687474703a2f2f7777772e627269676874706f696e74696e632e636f6d2f696e7465726163746976652f696d616765732f446566696369745f32303270782e706e67" alt=""></li>
</ul>
<h1 id="A-B-and-C"><a href="#A-B-and-C" class="headerlink" title="A, B and C"></a>A, B and C</h1><h2 id="Circle-gram"><a href="#Circle-gram" class="headerlink" title="Circle gram"></a>Circle gram</h2><ul>
<li>Description:(X,Y)-&gt;Z, Z use circle and the area stands for Z value.</li>
<li>Example: <img src="https://camo.githubusercontent.com/d5cc8b32409a9d498d83ce13c3f13ec7ac664601/687474703a2f2f6e657572616c656e67722e636f6d2f61736966722f6a6f75726e616c732f6a6f75726e616c732e706e67" alt=""><br><img src="https://camo.githubusercontent.com/3fb6699cd8462e7a82b69c04ac5cb37b968c0f09/687474703a2f2f64336a732e6f72672f65782f66616365626f6f6b2d69706f2e706e67" alt=""></li>
</ul>
<h1 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h1><p>The following charts are used for showing data which has a tree data structure.</p>
<h2 id="Dendrogram"><a href="#Dendrogram" class="headerlink" title="Dendrogram"></a>Dendrogram</h2><ul>
<li>Description: Leaf nodes of the tree at the same depth, are aligned on the<br>right edge.</li>
<li>Example: <img src="https://camo.githubusercontent.com/e1a1948f0bcfa095d54793afd3ab96af97731773/687474703a2f2f64336a732e6f72672f65782f636c75737465722e706e67" alt=""></li>
</ul>
<h2 id="Hierarchical-Edge-Bundling"><a href="#Hierarchical-Edge-Bundling" class="headerlink" title="Hierarchical Edge Bundling"></a>Hierarchical Edge Bundling</h2><ul>
<li>Exampel: <img src="https://camo.githubusercontent.com/75572c7b80dabb1a0984bd8ea9d3ee16c5200fe3/687474703a2f2f64336a732e6f72672f65782f62756e646c652e706e67" alt=""></li>
</ul>
<h2 id="Treemap"><a href="#Treemap" class="headerlink" title="Treemap"></a>Treemap</h2><ul>
<li>Description: A treemap recursively subdivideds area into rectangles, the area<br>of any node in the tree corresponds to its value.</li>
<li>Example: <img src="https://camo.githubusercontent.com/e6612268ca90a8c2f6d1da62f85d7d86616c37de/687474703a2f2f64336a732e6f72672f65782f747265656d61702e706e67" alt=""></li>
</ul>
<h2 id="Partition-layout"><a href="#Partition-layout" class="headerlink" title="Partition layout"></a>Partition layout</h2><ul>
<li>Description: A treemap recursively subdivideds in horizational.</li>
<li>Example: <img src="https://camo.githubusercontent.com/48f41725f95dad3f65f65e5f47c1b70e932be48c/687474703a2f2f64336a732e6f72672f65782f706172746974696f6e2d7a6f6f6d2e706e67" alt=""></li>
</ul>
<h2 id="Circle-packing"><a href="#Circle-packing" class="headerlink" title="Circle packing"></a>Circle packing</h2><ul>
<li>Description: Use containment to represent the hierarchy, the area of circle<br>can stand for item value, it better reveals the hierarchy than treemap.</li>
<li>Example: <img src="https://camo.githubusercontent.com/428c04c95f2a18ce7178d9d6135f1eab8df10ebd/687474703a2f2f64336a732e6f72672f65782f7061636b2e706e67" alt=""></li>
<li>Variants: <a href="http://mbostock.github.com/d3/talk/20111116/pack-hierarchy.html" target="_blank" rel="external">Zoomable Pack layout</a></li>
</ul>
<h2 id="Sunburst"><a href="#Sunburst" class="headerlink" title="Sunburst"></a>Sunburst</h2><ul>
<li>Description: A treemap has a radial layout, all the root nodes are at the<br>center.</li>
<li>Exampel: <img src="https://camo.githubusercontent.com/1415e2af369262e466534480edbc7baa883e5b58/687474703a2f2f64336a732e6f72672f65782f73756e62757273742e706e67" alt=""></li>
<li>Variants: <a href="http://www.jasondavies.com/coffee-wheel/" target="_blank" rel="external">Zoomable Sunburst</a>, <a href="http://bl.ocks.org/kerryrodden/7090426" target="_blank" rel="external">Sequences sunburst</a></li>
</ul>
<h2 id="Node-Link-Tree"><a href="#Node-Link-Tree" class="headerlink" title="Node-Link Tree"></a>Node-Link Tree</h2><ul>
<li>Description: The depth of nodes is computed by distance from the root, leading<br>to a ragged appearance.</li>
<li>Example: <img src="https://camo.githubusercontent.com/e646acd936244a6db8a140fb0e1e421d95b97d8e/687474703a2f2f64336a732e6f72672f65782f747265652e706e67" alt=""></li>
</ul>
<h1 id="A-B-C-…-gt-D-E-F-…-with-intermediate-nodes"><a href="#A-B-C-…-gt-D-E-F-…-with-intermediate-nodes" class="headerlink" title="A, B , C, … -&gt; D, E, F, … with intermediate nodes."></a>A, B , C, … -&gt; D, E, F, … with intermediate nodes.</h1><h2 id="Sankey-Diagrams"><a href="#Sankey-Diagrams" class="headerlink" title="Sankey Diagrams"></a><a href="https://bost.ocks.org/mike/sankey/" target="_blank" rel="external">Sankey Diagrams</a></h2><ul>
<li>Description: Sankey diagrams visualize the magnitude of flow between nodes in<br>a network. This intricate diagram shows a possible scenario for UK energy<br>production and consumption in 2050: energy supplies are on the left, and<br>demands are on the right. Intermediate nodes group related forms of production<br>and show how energy is converted and transmitted before it is consumed (or<br>lost!). The thickness of each link encodes the amount of flow from source to<br>target.</li>
<li>Example: <img src="https://camo.githubusercontent.com/d9abb5b2b474c0e37728abedb9ba722f8b6e4f24/687474703a2f2f64336a732e6f72672f65782f73616e6b65792e706e67" alt=""></li>
</ul>
<h1 id="Compare-n-properties"><a href="#Compare-n-properties" class="headerlink" title="Compare n properties"></a>Compare n properties</h1><h2 id="Time-Series-Comparation"><a href="#Time-Series-Comparation" class="headerlink" title="Time Series Comparation"></a>Time Series Comparation</h2><ul>
<li>Description: None.</li>
<li>Example: <img src="https://camo.githubusercontent.com/aa4653694ba96e7991206963a698584169d54204/68747470733a2f2f676973742e6769746875622e636f6d2f6d6172756662642f373139313334302f7261772f616230353765656639323237653534393834333163303330633661643530343863623332366133612f7468756d626e61696c2e706e67" alt=""></li>
</ul>
<h2 id="Streamgraph"><a href="#Streamgraph" class="headerlink" title="Streamgraph"></a>Streamgraph</h2><ul>
<li>Description: None.</li>
<li>Example: <img src="https://camo.githubusercontent.com/3cbc8c7898d1336e83e499cb66274c15e63f65bf/687474703a2f2f64336a732e6f72672f65782f73747265616d2e706e67" alt=""></li>
</ul>
<h2 id="Bar-Line-Scatter-Stacked-bar-etc"><a href="#Bar-Line-Scatter-Stacked-bar-etc" class="headerlink" title="Bar, Line, Scatter, Stacked bar, etc."></a>Bar, Line, Scatter, Stacked bar, etc.</h2><h2 id="Radial-plot"><a href="#Radial-plot" class="headerlink" title="Radial plot"></a>Radial plot</h2><ul>
<li>Description: Boxplot for continuous data.</li>
<li>Example: <img src="https://camo.githubusercontent.com/f17a69dcf4d6cf3020fc77016844d6c46ae5419a/687474703a2f2f626c2e6f636b732e6f72672f646176696477636c696e2f7261772f61643564313364623236306361656666653962332f7468756d626e61696c2e706e67" alt=""></li>
</ul>
<h2 id="Radar-Chart"><a href="#Radar-Chart" class="headerlink" title="Radar Chart"></a>Radar Chart</h2><ul>
<li>Description: Comparation between n properties, all of them have the save<br>sacle.</li>
<li>Example: <img src="https://raw.githubusercontent.com/nbremer/thumbnails/master/D3%20Radar%20Chart%20Redesign.png" alt=""></li>
</ul>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="Choropleth"><a href="#Choropleth" class="headerlink" title="Choropleth"></a><a href="https://bl.ocks.org/mbostock/4060606" target="_blank" rel="external">Choropleth</a></h2><ul>
<li>Description: Color stands for value and showd in a geo-map.</li>
<li>Example: <img src="https://camo.githubusercontent.com/0afefbc191693b8ecaea58cda0b587a908fc0174/687474703a2f2f64336a732e6f72672f65782f63686f726f706c6574682e706e67" alt=""></li>
</ul>
<p>Not all, visit <a href="https://github.com/d3/d3/wiki/Gallery" target="_blank" rel="external">https://github.com/d3/d3/wiki/Gallery</a> for more examples.</p>
]]></content>
    
    <summary type="html">
    
      &lt;style&gt;
img{height:200px;}
&lt;/style&gt;


&lt;p&gt;A simple list of chart types and data structure.&lt;/p&gt;
&lt;h1 id=&quot;Single-property&quot;&gt;&lt;a href=&quot;#Single-prop
    
    </summary>
    
      <category term="Others" scheme="http://dequn.github.io/categories/Others/"/>
    
    
      <category term="d3" scheme="http://dequn.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>就折腾到这儿吧</title>
    <link href="http://dequn.github.io/2016/12/27/jiu-zhe-teng-dao-zhe-er-ba/"/>
    <id>http://dequn.github.io/2016/12/27/jiu-zhe-teng-dao-zhe-er-ba/</id>
    <published>2016-12-27T11:00:58.000Z</published>
    <updated>2017-08-24T12:49:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>上上周从百度搜索部Rank组面试回来之后，就有点不安，三面的面试官直接告诉我这面的表现不好，让她很担心。说这句话分明是让我很担心，核心部门还是很值得期待的。一周都没有音信，想必是挂掉了，不曾想今天接到HR电话联系offer事宜，终于可以把心放肚子里了。</p>
<p>今年四月份的时候面了一次腾讯实习，不意外地终止在一面。回来之后那个惶恐啊，突然间发现以自身的能力什么工作都找不到，但同时还欠着小论文没写，刚换了题目还没有看文献，一下子都不知道该做什么了。接下来的几个月也是最痛苦的，东一棒槌西一榔头，压根没有主心骨。</p>
<p>好在暑期的时候终于把小论文凑完了，赶紧刷算法，面试也都陆陆续续的开始了，准备了不到一个月，就进入秋招高峰期，也就没有再静心准备了。笔试一个接着一个，面试仍还是倒在一面。腾讯地图部门提前批感觉还不错，结果不行，微店一面感觉不好，挂掉…从来不知道二面是什么样子，更担心——妈的这得到什么时候才能找到工作。</p>
<p>面京东的时候比较顺利，虽然在一二面中已经知道岗位不是我想做的，但为了保底也要面下去，滑稽的是HR面挂了…真是见鬼了，短短5分钟的电面，我想犯错都难啊。后来华为也是，两面觉得非常顺利，不料仍然是failed，莫非真如师兄所说的：我犯了低级错误？但已然不记得了…</p>
<p>百度是第一个给offer的公司，也是唯一一个给了两次offer的。9月份校招面试机器学习，一面就挂了，面试官觉得coding还不错，推荐我去面开发测试，并给了一点职业规划的建议（真是好人啊，哈哈），后来顺利通过开发测试的三轮面试，所以说多数人当天都是三轮面试，我却面了四轮，也是够有趣的。之后觉得岗位不太合适就拒绝掉了，需要说明的是我一直是以岗位为目标的，对公司没有什么要求，所以后面一个小公司给了数据挖掘的岗位觉得还不错就签了，搜狗面试要我进去做web开发，犹豫了一下之后就以“目前还没有在web开发上有较清晰的职业规划”婉拒了，也就不意外的无果而终了。</p>
<p>现在想来真是作，为什么非得一根筋的非得去面数据挖掘\机器学习，压根没有任何相关的项目经验怎么去面！在签了小公司的数据挖掘岗位后进入观望阶段，赶紧的补补课，事实上囫囵吐枣半懂不懂地学习了一段时间后就也没再坚持。直到看到百度搜索部门的补招信息，并意外的有面试机会，真心不容易。一二面还不错，三面面试官在说了我表现不好之后还补充一句：其实你的简历在机器筛选的时候就没能通过，后来看你项目经历涉及的方面比较多，所以才又给提出来看看你的综合能力…</p>
<p>简历平平，因为能力、经历实在是太一般，也难怪很多公司始终没给我面试的机会。大师兄没少给加油打气，导致我自己都快相信他说的了（肯定没问题！），思考后才明白:鼓励不是你已经做到了，而是需要做到的，我们太容易认为那些鼓励的话都已是事实了。</p>
<p>这已经是我能折腾到的最好结果了，纯粹是撞运气的结果，论真实力怎么也不可能胜任的。虽然我也是个百度黑，很多人也骂它，但能“委身”于这样的现实也很满足了。接下来就是有个明确的规划和计划，总不能跳离的时候还是平平吧？</p>
<p>感谢给我内推的师兄、师姐和一些个招聘平台，感谢老板给我开放、自由的时间和空间，感谢周围的小伙伴儿，最后感谢一下面试官吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上上周从百度搜索部Rank组面试回来之后，就有点不安，三面的面试官直接告诉我这面的表现不好，让她很担心。说这句话分明是让我很担心，核心部门还是很值得期待的。一周都没有音信，想必是挂掉了，不曾想今天接到HR电话联系offer事宜，终于可以把心放肚子里了。&lt;/p&gt;
&lt;p&gt;今年四
    
    </summary>
    
      <category term="个人日记" scheme="http://dequn.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="http://dequn.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Zeppelin 安装配置的一些问题</title>
    <link href="http://dequn.github.io/2016/11/20/zeppelin-installation-and-settings/"/>
    <id>http://dequn.github.io/2016/11/20/zeppelin-installation-and-settings/</id>
    <published>2016-11-20T06:15:30.000Z</published>
    <updated>2017-08-24T15:01:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-版本问题"><a href="#1-版本问题" class="headerlink" title="1.版本问题"></a>1.版本问题</h1><p>Zeppelin 从0.6.1版本开始，默认是基于 Spark 2.x 和 Scala 2.11版本进行编译的，亲测 Zeppelin 0.6.2与 Spark 1.6.x 版本是不兼容的，导致 Saprk Interpreters 不能正确运行，如果需要安装在老版本上的，需要自己从源码编译，可以指定 Spark、Hadoop等版本参数，可以参考 <a href="http://zeppelin.apache.org/docs/snapshot/install/build.html" target="_blank" rel="external">http://zeppelin.apache.org/docs/snapshot/install/build.html</a> ，如果是0.6.0版本，可与 Spark 1.6.x 之前的兼容运行。</p>
<h1 id="2-Phoenix-thin-连接问题"><a href="#2-Phoenix-thin-连接问题" class="headerlink" title="2.Phoenix-thin 连接问题"></a>2.Phoenix-thin 连接问题</h1><p><strong><em>2017年1月3号更新</em></strong>：</p>
<p>Phoenix for Spark 2.x Integration的补丁已经出来了，可以直接加载为DataFrame而不用通过JDBC的方式连接数据库了，会获得更高的效率。Pheonix for Spark 2.x 版本的问题可以参见<a href="https://issues.apache.org/jira/browse/PHOENIX-3333" target="_blank" rel="external">https://issues.apache.org/jira/browse/PHOENIX-3333</a>，如何使用可以参见文章<a href="http://dequn.github.io/2016/11/08/phoenix-spark-setting/">Spark 连接 Phoenix 配置</a>。</p>
<hr>
<p>Zeppelin 从0.6.0版本开始支持 Phoenix 连接，<a href="http://www.phoenix.apache.org" target="_blank" rel="external">Phoenix</a>默认是在jdbc interpreter 中配置的，配置过程可以参考 <a href="https://zeppelin.apache.org/docs/0.6.2/interpreter/jdbc.html#phoenix" target="_blank" rel="external">https://zeppelin.apache.org/docs/0.6.2/interpreter/jdbc.html#phoenix</a> ，<strong>注意一定要在Dependencies中添加artifact 依赖，如果从 maven远程库下载太慢，可以直接填写本地<code>phoenix-&lt;version&gt;-thin-client.jar</code>文件路径，或者把 jar 文件复制到路径<code>ZEPPELIN_HOME/interpreter/jdbc</code>下。</strong></p>
<p>但是如果使用的是phoenix-thin 连接，会报错误</p>
<blockquote>
<p>No suitable driver found for <a href="http://localhost:8765" target="_blank" rel="external">http://localhost:8765</a></p>
</blockquote>
<p>原因可以参见 <a href="https://github.com/apache/zeppelin/pull/1442" target="_blank" rel="external">https://github.com/apache/zeppelin/pull/1442</a> ，提供我已经编译好的 <a href="http://obqjd695a.bkt.clouddn.com/zeppelin-jdbc-0.6.2.jar" target="_blank" rel="external">zeppelin-jdbc-0.6.2.jar</a>，替换掉 <strong><code>ZEPPELIN_HOME/interpreter/jdbc</code></strong> 下边对应的同名文件即可。</p>
<h3 id="文件下载-zeppelin-jdbc-0-6-2-jar"><a href="#文件下载-zeppelin-jdbc-0-6-2-jar" class="headerlink" title="文件下载:zeppelin-jdbc-0.6.2.jar"></a>文件下载:<a href="http://obqjd695a.bkt.clouddn.com/zeppelin-jdbc-0.6.2.jar" target="_blank" rel="external">zeppelin-jdbc-0.6.2.jar</a></h3><h1 id="3-zeppelin中用-scala-加载-jdbc-数据问题"><a href="#3-zeppelin中用-scala-加载-jdbc-数据问题" class="headerlink" title="3.zeppelin中用 scala 加载 jdbc 数据问题"></a>3.zeppelin中用 scala 加载 jdbc 数据问题</h1><p><strong><em>2017年1月3号更新</em></strong>：</p>
<p>好久没有使用，重新折腾了一下，发现<strong>org.apache.hadoop.tracing.SpanReceiverHost.get(xxx)报错</strong>是由于Zeppelin提供的Hadoop版本和Spark编译时指定的版本不一致引起，只需要使用$SPARK_HOME/jars/hadoop-annotations-2.7.3.jar、hadoop-auth-2.7.3.jar、hadoop-common-2.7.3.jar替换掉$ZEPPELIN_HOME/lib下的对应文件即可。具体可以参考<a href="http://blog.csdn.net/lsshlsw/article/details/53768756" target="_blank" rel="external">Zeppelin 0.6.2 使用spark2.x 的一些错误处理</a>。</p>
<hr>
<p>刚开始使用的是Spark 2.0.1，使用下面的代码用 jdbc 读取数据库中的数据，发现总是报错，第一个关于 xxx.hive.ql.xxx 的错误，在 interpreter 的配置中将<code>zeppelin.spark.useHiveContext</code>项设置为<code>false</code>即可，<del>如果后面org.apache.hadoop.tracing.SpanReceiverHost.get(xxx)还继续报错，可以 <strong>升级 Spark2.0.2试试</strong> ，我是无意在笔记本上使用 Spark2.0.2 发现的 。</del></p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">val <span class="keyword">jdbcDf </span>= spark.read</div><div class="line">.format(<span class="string">"jdbc"</span>)</div><div class="line">.option(<span class="string">"driver"</span>,<span class="string">"org.apache.phoenix.queryserver.client.Driver"</span>)</div><div class="line">.option(<span class="string">"url"</span>,<span class="string">"jdbc:phoenix:thin:url=http://localhost:8765;serialization=PROTOBUF"</span>)</div><div class="line">.option(<span class="string">"dbtable"</span>,<span class="string">"bigjoy.imos"</span>)</div><div class="line">.load()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">java.lang.RuntimeException: </span><span class="keyword">java.lang.RuntimeException: </span>Unable to <span class="keyword">instantiate </span><span class="keyword">org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:522)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.client.HiveClientImpl.&lt;init&gt;(HiveClientImpl.scala:189)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</div><div class="line">  <span class="built_in">at</span> sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.<span class="keyword">java:62)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.<span class="keyword">java:45)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.client.IsolatedClientLoader.createClient(IsolatedClientLoader.scala:258)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveUtils$.newClientForMetadata(HiveUtils.scala:359)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveUtils$.newClientForMetadata(HiveUtils.scala:263)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSharedState.metadataHive$lzycompute(HiveSharedState.scala:39)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSharedState.metadataHive(HiveSharedState.scala:38)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSharedState.externalCatalog$lzycompute(HiveSharedState.scala:46)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSharedState.externalCatalog(HiveSharedState.scala:45)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSessionState.catalog$lzycompute(HiveSessionState.scala:50)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSessionState.catalog(HiveSessionState.scala:48)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSessionState$$anon$1.&lt;init&gt;(HiveSessionState.scala:63)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSessionState.analyzer$lzycompute(HiveSessionState.scala:63)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.hive.HiveSessionState.analyzer(HiveSessionState.scala:62)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:49)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.Dataset$.ofRows(Dataset.scala:64)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.SparkSession.baseRelationToDataFrame(SparkSession.scala:382)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:143)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:122)</span></div><div class="line"><span class="keyword"> </span> ... <span class="number">47</span> elided</div><div class="line">Caused <span class="keyword">by: </span><span class="keyword">java.lang.RuntimeException: </span>Unable to <span class="keyword">instantiate </span><span class="keyword">org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance(MetaStoreUtils.java:1523)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.&lt;init&gt;(RetryingMetaStoreClient.java:86)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:132)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:104)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.ql.metadata.Hive.createMetaStoreClient(Hive.java:3005)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.ql.metadata.Hive.getMSC(Hive.java:3024)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:503)</span></div><div class="line"><span class="keyword"> </span> ... <span class="number">69</span> more</div><div class="line">Caused <span class="keyword">by: </span><span class="keyword">java.lang.reflect.InvocationTargetException: </span><span class="keyword">java.lang.NoSuchMethodError: </span><span class="keyword">org.apache.hadoop.tracing.SpanReceiverHost.get(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Lorg/apache/hadoop/tracing/SpanReceiverHost;</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</div><div class="line">  <span class="built_in">at</span> sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.<span class="keyword">java:62)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.<span class="keyword">java:45)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance(MetaStoreUtils.java:1521)</span></div><div class="line"><span class="keyword"> </span> ... <span class="number">75</span> more</div><div class="line">Caused <span class="keyword">by: </span><span class="keyword">java.lang.NoSuchMethodError: </span><span class="keyword">org.apache.hadoop.tracing.SpanReceiverHost.get(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Lorg/apache/hadoop/tracing/SpanReceiverHost;</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hdfs.DFSClient.&lt;init&gt;(DFSClient.java:634)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hdfs.DFSClient.&lt;init&gt;(DFSClient.java:619)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hdfs.DistributedFileSystem.initialize(DistributedFileSystem.java:149)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2596)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:91)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2630)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2612)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem.get(FileSystem.java:370)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem.get(FileSystem.java:169)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.FileSystem.get(FileSystem.java:354)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.fs.Path.getFileSystem(Path.java:296)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.Warehouse.getFs(Warehouse.java:104)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.Warehouse.getDnsPath(Warehouse.java:140)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.Warehouse.getDnsPath(Warehouse.java:146)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.Warehouse.getWhRoot(Warehouse.java:159)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.Warehouse.getDefaultDatabasePath(Warehouse.java:177)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.createDefaultDB_core(HiveMetaStore.java:600)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.createDefaultDB(HiveMetaStore.java:620)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.init(HiveMetaStore.java:461)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.RetryingHMSHandler.&lt;init&gt;(RetryingHMSHandler.java:66)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.RetryingHMSHandler.getProxy(RetryingHMSHandler.java:72)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.HiveMetaStore.newRetryingHMSHandler(HiveMetaStore.java:5762)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.metastore.HiveMetaStoreClient.&lt;init&gt;(HiveMetaStoreClient.java:199)</span></div><div class="line"><span class="keyword"> </span> <span class="built_in">at</span> <span class="keyword">org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient.&lt;init&gt;(SessionHiveMetaStoreClient.java:74)</span></div><div class="line"><span class="keyword"> </span> ... <span class="number">80</span> more</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1]: <a href="http://zeppelin.apache.org/docs/snapshot/install/build.html" target="_blank" rel="external">Zeppelin 源码编译</a><br>[2]: <a href="https://zeppelin.apache.org/docs/0.6.2/interpreter/jdbc.html#phoenix" target="_blank" rel="external">Zeppelin Phoenix Interpreter 配置</a><br>[3]: <a href="https://github.com/apache/zeppelin/pull/1442" target="_blank" rel="external">ZEPPELIN-1459: Zeppelin JDBC URL properties mangled</a><br>[4]: <a href="http://blog.csdn.net/lsshlsw/article/details/53768756" target="_blank" rel="external">Zeppelin 0.6.2 使用spark2.x 的一些错误处理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-版本问题&quot;&gt;&lt;a href=&quot;#1-版本问题&quot; class=&quot;headerlink&quot; title=&quot;1.版本问题&quot;&gt;&lt;/a&gt;1.版本问题&lt;/h1&gt;&lt;p&gt;Zeppelin 从0.6.1版本开始，默认是基于 Spark 2.x 和 Scala 2.11版本进行编译
    
    </summary>
    
      <category term="Zeppelin" scheme="http://dequn.github.io/categories/Zeppelin/"/>
    
    
      <category term="Phoenix" scheme="http://dequn.github.io/tags/Phoenix/"/>
    
      <category term="Spark" scheme="http://dequn.github.io/tags/Spark/"/>
    
      <category term="Zeppelin" scheme="http://dequn.github.io/tags/Zeppelin/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA 中调试 Spark Application</title>
    <link href="http://dequn.github.io/2016/11/19/debug-spark-in-intellij/"/>
    <id>http://dequn.github.io/2016/11/19/debug-spark-in-intellij/</id>
    <published>2016-11-19T02:12:47.000Z</published>
    <updated>2017-08-24T14:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spark 新手一名，同样也是 Scala 菜鸟，由于对这两个都不是特别熟悉，所以希望能在 IDE中 coding 和 debug，但是调试 Spark 程序和往常接触过的不一样，并且有一些观念上的错误，总结一下。</p>
<h1 id="坑一：网络代理"><a href="#坑一：网络代理" class="headerlink" title="坑一：网络代理"></a>坑一：网络代理</h1><p>程序写好以后，可以直接 debug 的(只限于 spark.master= local[*]的场景)，由于使用了 ShadowSocks 全局代理翻墙，最初一直报错，Google 了好大会儿也没找到问原因，后来才猛的想起代理还开着，而 hosts 文件中恰恰没有 localhost 映射到127.0.0.1中，修改 hosts，解决。直接 debug 可以使用较小的数据进行测试，不是非得网上众多教程那样得 sbt package -&gt; spark-submit -&gt; Remote Debug 那样不方便。</p>
<h1 id="坑二：worksheet-运行？"><a href="#坑二：worksheet-运行？" class="headerlink" title="坑二：worksheet 运行？"></a>坑二：worksheet 运行？</h1><p>虽然 spark-shell也提供了交互式命令行，尝试代码非常方便，不用每次都 debug 启动 sprak，那样效率太低。然而保存代码就比较麻烦了，因此想着能不能使用 scala worksheet来运行，这样结果也即时可见，代码也不会丢失，尝试了一番，发现不行，有高手解释为：spark 的 REPL 解释器和 Scala 的不一样，因此里边是运行不了 spark 程序的。难道就没有其他办法了吗？有的，采用Scala Console 代替，在文件上右键点击，选择 Run Scala Console 即可，可以与把文件里的代码发送给 console 运行，虽然不如 worksheet 方便，但也好过 spark-sheel 或者每次都启动 debug了。</p>
<h1 id="坑三：debug-on-spark-cluster"><a href="#坑三：debug-on-spark-cluster" class="headerlink" title="坑三：debug on spark cluster"></a>坑三：debug on spark cluster</h1><p>这个和坑一有些类似，在老板的三台机器上搭建了一个小集群，并以 standlone cluster 方式运行，于是就直接在 cluster 上debug 吧，获取 sparkContext 的方式如代码所示<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val spark = SparkSession.builder().<span class="literal">master</span>(<span class="string">"spark://192.168.6.131:7077"</span>).appName(<span class="string">"bigjoy"</span>).getOrCreate()</div></pre></td></tr></table></figure></p>
<p>在控制台中的 Log 如下，不断地停掉和开启 Executor，心想也不至于吧，数据量没那么大呀！</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WARN TaskSchedulerImpl: Initial job has<span class="built_in"> not </span>accepted any resources;<span class="built_in"> check </span>your cluster UI to ensure that workers are registered<span class="built_in"> and </span>have sufficient resources</div></pre></td></tr></table></figure>
<p>于是去检查 spark UI 的 log, 看到下面的错误</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.UndeclaredThrowableException</span></div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.security</span><span class="selector-class">.UserGroupInformation</span><span class="selector-class">.doAs</span>(UserGroupInformation<span class="selector-class">.java</span>:<span class="number">1713</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.deploy</span><span class="selector-class">.SparkHadoopUtil</span><span class="selector-class">.runAsSparkUser</span>(SparkHadoopUtil<span class="selector-class">.scala</span>:<span class="number">70</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.executor</span><span class="selector-class">.CoarseGrainedExecutorBackend</span>$.run(CoarseGrainedExecutorBackend<span class="selector-class">.scala</span>:<span class="number">174</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.executor</span><span class="selector-class">.CoarseGrainedExecutorBackend</span>$.main(CoarseGrainedExecutorBackend<span class="selector-class">.scala</span>:<span class="number">270</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.executor</span><span class="selector-class">.CoarseGrainedExecutorBackend</span><span class="selector-class">.main</span>(CoarseGrainedExecutorBackend.scala)</div><div class="line">Caused by: org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.SparkException</span>: Exception thrown <span class="keyword">in</span> awaitResult</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.RpcTimeout</span>$<span class="variable">$anonfun</span>$<span class="number">1</span>.applyOrElse(RpcTimeout<span class="selector-class">.scala</span>:<span class="number">77</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.RpcTimeout</span>$<span class="variable">$anonfun</span>$<span class="number">1</span>.applyOrElse(RpcTimeout<span class="selector-class">.scala</span>:<span class="number">75</span>)</div><div class="line">	at scala<span class="selector-class">.runtime</span><span class="selector-class">.AbstractPartialFunction</span><span class="selector-class">.apply</span>(AbstractPartialFunction<span class="selector-class">.scala</span>:<span class="number">36</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.RpcTimeout</span>$<span class="variable">$anonfun</span><span class="variable">$addMessageIfTimeout</span>$<span class="number">1</span>.applyOrElse(RpcTimeout<span class="selector-class">.scala</span>:<span class="number">59</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.RpcTimeout</span>$<span class="variable">$anonfun</span><span class="variable">$addMessageIfTimeout</span>$<span class="number">1</span>.applyOrElse(RpcTimeout<span class="selector-class">.scala</span>:<span class="number">59</span>)</div><div class="line">	at scala.PartialFunction<span class="variable">$OrElse</span>.apply(PartialFunction<span class="selector-class">.scala</span>:<span class="number">167</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.RpcTimeout</span><span class="selector-class">.awaitResult</span>(RpcTimeout<span class="selector-class">.scala</span>:<span class="number">83</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.RpcEnv</span><span class="selector-class">.setupEndpointRefByURI</span>(RpcEnv<span class="selector-class">.scala</span>:<span class="number">88</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.executor</span><span class="selector-class">.CoarseGrainedExecutorBackend</span>$<span class="variable">$anonfun</span><span class="variable">$run</span>$<span class="number">1</span>.apply<span class="variable">$mcV</span><span class="variable">$sp</span>(CoarseGrainedExecutorBackend<span class="selector-class">.scala</span>:<span class="number">188</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.deploy</span><span class="selector-class">.SparkHadoopUtil</span>$<span class="variable">$anon</span>$<span class="number">1</span>.run(SparkHadoopUtil<span class="selector-class">.scala</span>:<span class="number">71</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.deploy</span><span class="selector-class">.SparkHadoopUtil</span>$<span class="variable">$anon</span>$<span class="number">1</span>.run(SparkHadoopUtil<span class="selector-class">.scala</span>:<span class="number">70</span>)</div><div class="line">	at java<span class="selector-class">.security</span><span class="selector-class">.AccessController</span><span class="selector-class">.doPrivileged</span>(Native Method)</div><div class="line">	at javax<span class="selector-class">.security</span><span class="selector-class">.auth</span><span class="selector-class">.Subject</span><span class="selector-class">.doAs</span>(Subject<span class="selector-class">.java</span>:<span class="number">422</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.security</span><span class="selector-class">.UserGroupInformation</span><span class="selector-class">.doAs</span>(UserGroupInformation<span class="selector-class">.java</span>:<span class="number">1698</span>)</div><div class="line">	... <span class="number">4</span> more</div><div class="line">Caused by: java<span class="selector-class">.io</span><span class="selector-class">.IOException</span>: Failed to connect to /<span class="number">192.168</span>.<span class="number">1.105</span>:<span class="number">51340</span></div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.network</span><span class="selector-class">.client</span><span class="selector-class">.TransportClientFactory</span><span class="selector-class">.createClient</span>(TransportClientFactory<span class="selector-class">.java</span>:<span class="number">228</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.network</span><span class="selector-class">.client</span><span class="selector-class">.TransportClientFactory</span><span class="selector-class">.createClient</span>(TransportClientFactory<span class="selector-class">.java</span>:<span class="number">179</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.netty</span><span class="selector-class">.NettyRpcEnv</span><span class="selector-class">.createClient</span>(NettyRpcEnv<span class="selector-class">.scala</span>:<span class="number">197</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.netty</span><span class="selector-class">.Outbox</span>$<span class="variable">$anon</span>$<span class="number">1</span>.call(Outbox<span class="selector-class">.scala</span>:<span class="number">191</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rpc</span><span class="selector-class">.netty</span><span class="selector-class">.Outbox</span>$<span class="variable">$anon</span>$<span class="number">1</span>.call(Outbox<span class="selector-class">.scala</span>:<span class="number">187</span>)</div><div class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.FutureTask</span><span class="selector-class">.run</span>(FutureTask<span class="selector-class">.java</span>:<span class="number">266</span>)</div><div class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.ThreadPoolExecutor</span><span class="selector-class">.runWorker</span>(ThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">1142</span>)</div><div class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.ThreadPoolExecutor</span><span class="variable">$Worker</span>.run(ThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">617</span>)</div><div class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">745</span>)</div><div class="line">Caused by: java<span class="selector-class">.net</span><span class="selector-class">.NoRouteToHostException</span>: No route to host: /<span class="number">192.168</span>.<span class="number">1.105</span>:<span class="number">51340</span></div><div class="line">	at sun<span class="selector-class">.nio</span><span class="selector-class">.ch</span><span class="selector-class">.SocketChannelImpl</span><span class="selector-class">.checkConnect</span>(Native Method)</div><div class="line">	at sun<span class="selector-class">.nio</span><span class="selector-class">.ch</span><span class="selector-class">.SocketChannelImpl</span><span class="selector-class">.finishConnect</span>(SocketChannelImpl<span class="selector-class">.java</span>:<span class="number">717</span>)</div><div class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.socket</span><span class="selector-class">.nio</span><span class="selector-class">.NioSocketChannel</span><span class="selector-class">.doFinishConnect</span>(NioSocketChannel<span class="selector-class">.java</span>:<span class="number">224</span>)</div><div class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.nio</span><span class="selector-class">.AbstractNioChannel</span><span class="variable">$AbstractNioUnsafe</span>.finishConnect(AbstractNioChannel<span class="selector-class">.java</span>:<span class="number">289</span>)</div><div class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.nio</span><span class="selector-class">.NioEventLoop</span><span class="selector-class">.processSelectedKey</span>(NioEventLoop<span class="selector-class">.java</span>:<span class="number">528</span>)</div><div class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.nio</span><span class="selector-class">.NioEventLoop</span><span class="selector-class">.processSelectedKeysOptimized</span>(NioEventLoop<span class="selector-class">.java</span>:<span class="number">468</span>)</div><div class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.nio</span><span class="selector-class">.NioEventLoop</span><span class="selector-class">.processSelectedKeys</span>(NioEventLoop<span class="selector-class">.java</span>:<span class="number">382</span>)</div><div class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.nio</span><span class="selector-class">.NioEventLoop</span><span class="selector-class">.run</span>(NioEventLoop<span class="selector-class">.java</span>:<span class="number">354</span>)</div><div class="line">	at io<span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.SingleThreadEventExecutor</span>$<span class="number">2</span>.run(SingleThreadEventExecutor<span class="selector-class">.java</span>:<span class="number">111</span>)</div><div class="line">	... <span class="number">1</span> more</div></pre></td></tr></table></figure>
<p>看到 IP:192.168.1.105 后猛然想起，个人使用的笔记本网络连接的是办公室的路由器，而办公室的路由器的 ip 才是和集群的机器 Ip 在同一局域网中，中间跨了级！办公室的路由器又没有设置端口映射，难怪找不到！改为使用单位的无线路由（和集群一个局域网）后就没有此错误了！或者也可以设置一下小路由器的端口映射！</p>
<h1 id="坑四：sbt-或-maven-中的依赖版本（包括小版本）一定要与集群一致"><a href="#坑四：sbt-或-maven-中的依赖版本（包括小版本）一定要与集群一致" class="headerlink" title="坑四：sbt 或 maven 中的依赖版本（包括小版本）一定要与集群一致"></a>坑四：sbt 或 maven 中的依赖版本（包括小版本）一定要与集群一致</h1><p>使用坑三中的 debug on cluster, 由于很早建立的 maven 工程，采用的是 org.apache.spark:spark-core_2.1:2.0.1依赖，后来搭建集群的时候2.0.2版本已经发布，所以采用了最新的，由于大版本一致，所以就没有在意，debug 的时候报以下错误：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.io.InvalidClassException: org.apache.spark.executor.TaskMetrics; <span class="keyword">local</span> <span class="built_in">class</span> incompatible: stream classdesc serialVersionUID = <span class="number">-6966587383730940799</span>, <span class="keyword">local</span> <span class="built_in">class</span> serialVersionUID = <span class="number">-2231953621568687904</span></div></pre></td></tr></table></figure>
<p>此问题由小版本不一致导致，说来也正常，向下兼容很正常，但向上的，呵呵，所以保持一致吧！</p>
<h1 id="坑五：找不到类？"><a href="#坑五：找不到类？" class="headerlink" title="坑五：找不到类？"></a>坑五：找不到类？</h1><p>由于工程采用 maven 构建，我使用了 phoenix 的依赖，当 spark.master=local[*]的时候，调试没有任何问题，但是当把 spark.master 设置为 spark://spark-master:7077也就是采用集群的时候，会提示除 spark 自带的（core, sql,mllib, stream）库之外，其他的都提示找不到，解决方案除了 <strong> 1）参考网上的远程调试外</strong> ，现提供另一种方式，<strong> 2)类似于 Hadoop的调试方式</strong></p>
<h2 id="1-设置-artifact"><a href="#1-设置-artifact" class="headerlink" title="1.设置 artifact"></a>1.设置 artifact</h2><p>File -&gt; Project Structre, 在 Artifacts 里边新建一个 jar 包，选择主类，在 Output Layout 中可以删除 spark 相关的（因为集群中已经有了，其他集群中CASSPATH 包含的都可以省掉，减少 jar包体积），最后确认即可。</p>
<p><img src="http://obqjd695a.bkt.clouddn.com/new-artifact.png" alt=""><br><img src="http://obqjd695a.bkt.clouddn.com/artifact-setting.png" alt=""><br><img src="http://obqjd695a.bkt.clouddn.com/artifact-jar-setting.png" alt=""></p>
<h2 id="2-spark-添加-jar-依赖"><a href="#2-spark-添加-jar-依赖" class="headerlink" title="2.spark 添加 jar 依赖"></a>2.spark 添加 jar 依赖</h2><p>只需要个 sparkContext 添加 jar包即可，代码如下</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> val spark = SparkSession.builder().master(<span class="string">"spark://192.168.6.131:7077"</span>).appName(<span class="string">"bigjoy"</span>).getOrCreate()</div><div class="line"></div><div class="line"><span class="comment">//注意路径是编译后的路径</span></div><div class="line">    spark<span class="selector-class">.sparkContext</span><span class="selector-class">.addJar</span>(<span class="string">"/Users/dq/IdeaProjects/subject/out/artifacts/analysis_jar/analysis.jar"</span>)</div></pre></td></tr></table></figure>
<p>在debug 前，先 Build -&gt; Build Artifacts -&gt; xxx.jar，把代码中的路径替换为实际的路径，然后就可以像其他普通的代码一样调试了，不过发现运行的比较慢，因为没有与远程调试的进行对比，所以哪个更好一些就暂不能下结论了，不过这个免去了上传 jar 包、spark-submit、remote debug 等过程，简单一些。</p>
<p>就先总结这么多吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spark 新手一名，同样也是 Scala 菜鸟，由于对这两个都不是特别熟悉，所以希望能在 IDE中 coding 和 debug，但是调试 Spark 程序和往常接触过的不一样，并且有一些观念上的错误，总结一下。&lt;/p&gt;
&lt;h1 id=&quot;坑一：网络代理&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Spark" scheme="http://dequn.github.io/categories/Spark/"/>
    
    
      <category term="Spark" scheme="http://dequn.github.io/tags/Spark/"/>
    
      <category term="Intellij IDEA" scheme="http://dequn.github.io/tags/Intellij-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Spark 连接 Phoenix 配置</title>
    <link href="http://dequn.github.io/2016/11/08/phoenix-spark-setting/"/>
    <id>http://dequn.github.io/2016/11/08/phoenix-spark-setting/</id>
    <published>2016-11-08T06:06:40.000Z</published>
    <updated>2017-08-24T14:55:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>2017年1月3号更新：</em></strong></p>
<p>在Spark 2.x版本中更改了DataFrame的定义，而Phoenix4.9及以前(4.10后官方版本会修复）是在Spark1.x的环境下开发的，因此如果使用Spark2.x的环境，不能正常使用Phoenix Spark Interprter, 具体问题可以参考 <a href="https://issues.apache.org/jira/browse/PHOENIX-3333" target="_blank" rel="external">https://issues.apache.org/jira/browse/PHOENIX-3333</a>，这里给出本人利用链接中的补丁编译后的phoenix，其他参考1.x版本中的配置方式即可。</p>
<p><a href="http://obqjd695a.bkt.clouddn.com/phoenix-4.9.0-HBase-1.2-server.jar" target="_blank" rel="external">phoenix-4.9.0-HBase-1.2-server.jar</a></p>
<p><a href="http://obqjd695a.bkt.clouddn.com/phoenix-4.9.0-HBase-1.2-client.jar" target="_blank" rel="external">phoenix-4.9.0-HBase-1.2-client.jar</a></p>
<hr>
<p>Phoenix 官方文档给出了如何配置Spark 连接的说明，但是由于版本更新比较快，教程已经有些过时了。</p>
<p>环境配置：</p>
<blockquote>
<p>Spark 1.5.2<br>Phoenix 4.8.0<br>HBase 1.1.2</p>
</blockquote>
<p>如果在 HBase上配置过 Phoenix ，服务端就不需要做任何改动了。</p>
<p>在<strong> Phoenix 4.8</strong> 版本中，已经没有官方示例中的<code>phoenix-&lt;version&gt;-client-spark.jar</code>的文件了，所有的客户端需要的 jar 只有一个<strong> <code>phoenix-&lt;version&gt;-client.jar</code></strong> ！</p>
<p>连接在 Spark 中连接Phoenix 也有两种方式：</p>
<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>spark-shell 启动时添加 phoenix jar.</p>
<p>启动spark-shell 是添加参数–jars 即可<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">spark-shell --jars /usr/local/phoenix/phoenix<span class="number">-4.8</span><span class="number">.0</span>-HBase<span class="number">-1.1</span>-client.jar</div><div class="line"># ....</div><div class="line"># ....</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.phoenix.spark._</div><div class="line"></div><div class="line"># 这一句不报错的话就说明搞定了</div></pre></td></tr></table></figure></p>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>配置 spark-defaults.conf</p>
<p>如果不想每次启动都添加 –jars 参数，可以配置$SPARK_HOME/conf 下边的spark-defaults.conf文件，添加下面两个配置项，注意 jar 文件路径与名称的正确性。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spark<span class="selector-class">.executor</span><span class="selector-class">.extraClassPath</span>      /usr/local/phoenix/phoenix-<span class="number">4.8</span>.<span class="number">0</span>-HBase-<span class="number">1.1</span>-client.jar</div><div class="line">spark<span class="selector-class">.driver</span><span class="selector-class">.extraClassPath</span>      /usr/local/phoenix/phoenix-<span class="number">4.8</span>.<span class="number">0</span>-HBase-<span class="number">1.1</span>-client.jar</div></pre></td></tr></table></figure></p>
<p>这样再启动spark-shell，就可以直接导入需要的包了，注意 SparkContext sc 和 SQLContext sqlContext 都已经是设置好了的，可以直接用。其他可以参考官方给出的示例。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;2017年1月3号更新：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Spark 2.x版本中更改了DataFrame的定义，而Phoenix4.9及以前(4.10后官方版本会修复）是在Spark1.x的环境下开发的，因此如果使用Spark2.x的环
    
    </summary>
    
      <category term="Phoenix" scheme="http://dequn.github.io/categories/Phoenix/"/>
    
    
      <category term="Phoenix" scheme="http://dequn.github.io/tags/Phoenix/"/>
    
      <category term="spark" scheme="http://dequn.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>pyenv安装多版本 Python 过程中提示警告</title>
    <link href="http://dequn.github.io/2016/11/02/pyenv-install-with-warnings/"/>
    <id>http://dequn.github.io/2016/11/02/pyenv-install-with-warnings/</id>
    <published>2016-11-02T07:21:35.000Z</published>
    <updated>2017-08-24T14:56:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 pyenv 安装多版本 Python 时，有时候会遇到警告<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">WARNING:</span> The Python bz2 extension was not compiled. Missing the bzip2 <span class="class"><span class="keyword">lib</span>?</span></div><div class="line"><span class="symbol">WARNING:</span> The Python readline extension was not compiled. Missing the GNU readline <span class="class"><span class="keyword">lib</span>?</span></div><div class="line"><span class="symbol">WARNING:</span> The Python sqlite3 extension was not compiled. Missing the SQLite3 <span class="class"><span class="keyword">lib</span>?</span></div></pre></td></tr></table></figure></p>
<p>只需要根据提示安装就行了（CentOS7环境下):<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install </span>readline readline-devel readline-static -y</div><div class="line">yum <span class="keyword">install </span>openssl openssl-devel openssl-static -y</div><div class="line">yum <span class="keyword">install </span>sqlite-devel -y</div><div class="line">yum <span class="keyword">install </span><span class="keyword">bzip2-devel </span><span class="keyword">bzip2-libs </span>-y</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 pyenv 安装多版本 Python 时，有时候会遇到警告&lt;br&gt;&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div c
    
    </summary>
    
      <category term="Python" scheme="http://dequn.github.io/categories/Python/"/>
    
    
      <category term="pyenv" scheme="http://dequn.github.io/tags/pyenv/"/>
    
  </entry>
  
  <entry>
    <title>MacVim自动切换中英文输入法</title>
    <link href="http://dequn.github.io/2016/10/28/macvim-auto-im/"/>
    <id>http://dequn.github.io/2016/10/28/macvim-auto-im/</id>
    <published>2016-10-28T11:58:50.000Z</published>
    <updated>2017-08-24T15:03:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>中文用户的使用 VIM 最痛苦的就是来回切换输入法了，还好，在 OS 系统下使用 MacVim 可以设置在命令模式下禁用输入法，这样有了自动切换的效果，设置如下：</p>
<p><strong>第一步</strong>.在.vimrc 中设置<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">set</span> noimd</div><div class="line"><span class="builtin-name">set</span> <span class="attribute">imi</span>=2</div><div class="line"><span class="builtin-name">set</span> <span class="attribute">ims</span>=2</div></pre></td></tr></table></figure></p>
<p><strong>第二步</strong>.在 MacVim 的 Preferences 中的 Advanced 标签中，<strong>取消勾选 Draw marked text line</strong>。</p>
<p>这样就可以达到一个自动切换的效果（只是在命令行模式下给禁用掉了而已），这个要比设置 vimim 好用多了，vimim 延迟太大，使用非常不方便。</p>
<p>参考：<br>[1].<a href="https://www.v2ex.com/t/45772" target="_blank" rel="external">https://www.v2ex.com/t/45772</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中文用户的使用 VIM 最痛苦的就是来回切换输入法了，还好，在 OS 系统下使用 MacVim 可以设置在命令模式下禁用输入法，这样有了自动切换的效果，设置如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步&lt;/strong&gt;.在.vimrc 中设置&lt;br&gt;&lt;figure clas
    
    </summary>
    
      <category term="Others" scheme="http://dequn.github.io/categories/Others/"/>
    
    
      <category term="VIM" scheme="http://dequn.github.io/tags/VIM/"/>
    
      <category term="MacVim" scheme="http://dequn.github.io/tags/MacVim/"/>
    
  </entry>
  
  <entry>
    <title>MapReduce 在 Map 阶段写数据库，没有 Reducer</title>
    <link href="http://dequn.github.io/2016/10/27/mapreduce-output-to-hbase-at-mapper-phase-without-reducer/"/>
    <id>http://dequn.github.io/2016/10/27/mapreduce-output-to-hbase-at-mapper-phase-without-reducer/</id>
    <published>2016-10-27T07:58:41.000Z</published>
    <updated>2017-08-24T15:03:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>手里有一张txt数据表，现在要入库(Phoenix + HBase)，因为需要对数据做一定的处理后再写入数据库，加上数据量不小，所以就想着用 MapReduce 来加速一下入库过程。</p>
<p>拿到一条数据处理后就可以直接入库了，那就没有必要写 Reducer 了，直接全部在 Mapper 里边完成，所以很自然地定义 DBWritable 类，作为 Mapper 的 OutputKeyClass 就行，如下这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.db.DBWritable;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.DataInput;</div><div class="line"><span class="keyword">import</span> java.io.DataOutput;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* Created by dq on 10/27/16.</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDBWritable</span> <span class="keyword">implements</span> <span class="title">Writable</span>, <span class="title">DBWritable</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">int</span> id;</div><div class="line">String name;</div><div class="line"></div><div class="line"><span class="comment">//getter and setter ...</span></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(PreparedStatement preparedStatement)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"></div><div class="line">preparedStatement.setInt(<span class="number">1</span>, id);</div><div class="line">preparedStatement.setString(<span class="number">2</span>, name);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>坑在这里</strong>:其中，<code>write(DataOutput dataOutput), readFields(DataInput dataInput)</code> 是 Writable 接口里边的函数，由于我是写数据库的，就简单的想着没有必要实现了，留空不处理，我也不读数据库，readFields(Result resultSet)就也不写啦。</p>
<p>Mapper 类是这样写的：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public static <span class="class"><span class="keyword">class</span> <span class="title">TestMapper</span> <span class="keyword">extends</span> <span class="title">Mapper&lt;LongWritable</span>, <span class="title">Text</span>,<span class="title">NullWritable</span>, <span class="title">TestDBWritable&gt;</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> void map(<span class="type">LongWritable</span> key, <span class="type">Text</span> value, <span class="type">Context</span> context) <span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">InterruptedException</span> &#123;</div><div class="line"></div><div class="line"><span class="type">TestDBWritable</span> t = <span class="keyword">new</span> <span class="type">TestWritable</span>();</div><div class="line"></div><div class="line"><span class="comment">//....</span></div><div class="line"></div><div class="line">context.write(<span class="type">NullWritable</span>.get(), t);</div><div class="line"></div><div class="line"><span class="comment">//....</span></div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后是定义 Job<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//....</span></div><div class="line"><span class="keyword">job</span>.setMapOutputKeyClass(NullWritable.<span class="keyword">class</span>)<span class="comment">;</span></div><div class="line"><span class="keyword">job</span>.setMapOutputValueClass(TestDBWritable.<span class="keyword">class</span>)<span class="comment">;</span></div><div class="line"><span class="comment">//....</span></div></pre></td></tr></table></figure></p>
<p>满心欢喜地赶紧运行，还好没错，好有成就感地去查一下数据库，发现里边只是多了一个 id 为0，name 为 NULL 的记录罢了， 擦，发生了什么？还好之前搭建的是可以本地调试的环境，打个断点，看一下TestDBWritable 类的 write() 函数执行过程，发现 id 只是初始值，name 全部为NULL！ 顺着<code>context.write()</code>一路查下去，也没有发现 map 输出的时候把值给丢了呀，但进去 write 就变空值，这是肿么回事？</p>
<p>后来想了一下是不是因为 Writable 的两个函数没有实现的原因，带着侥幸心理实现这两个函数<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">        dataOutput.writeInt(id);</div><div class="line">        dataOutput.writeUTF(name);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = dataInput.readInt();</div><div class="line">        <span class="keyword">this</span>.name = dataInput.readUTF();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为了验证一下是不是执行了这两个函数，打上了断点调试一下，发现果然，在执行 context.write()后，执行的值 Writable 的 write 函数，然而并没有接着执行 DBWritable 的 write 函数，而是直到所有的输入数据都执行完毕后，首先执行 readFields 函数，然后又 write。单看此执行路径，<strong>虽然没有定义 reducer，但 Hadoop 还是给我们执行了一个默认的,所以在 map 输出的时候会执行写入缓冲区的 write()函数，在 reducer 里边会执行 read()</strong> 。所以如果不实现那两个函数，Reducer 取到的就是空值。</p>
<p>在网上搜索了一写其他资料，发现情况确实如此，可以参看[<a href="http://blog.csdn.net/yongjian_luo/article/details/9962047" title="Mapreduce不设置reduce，只执行map的输出结果" target="_blank" rel="external">1</a>]。</p>
<p>因为 Mapper 的 outkey 是 NullWritable,所有的数据都会发送到同一个节点上进行 Reduce[<a href="https://www.quora.com/Whats-the-key-value-output-of-map-function-if-I-use-context-write-NullWritable-get-new-Text-1" title="What&#39;s the &lt;key, value&gt; output of map function if I use context.write (NullWritable.get(),new Text(1))?" target="_blank" rel="external">2</a>]，速度非常慢，这无疑是与初衷相背的，更好的解决办法是参照[<a href="http://blog.csdn.net/yongjian_luo/article/details/9962047" title="Mapreduce不设置reduce，只执行map的输出结果" target="_blank" rel="external">1</a>]中的第四条，将 reduce 的数量设置为0，这样 mapper 就不再执行 Writable 的两个函数，会直接写入数据库。</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">job.setNumReduceTasks(<span class="number">0</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p><strong>总结:</strong><br>1.如果不设置 Reducer，Hadoop 还是会默认执行一个的，所以最好明确设置 Reducer 的数量为0，这样可以在 Map 阶段就执行输出。<br>2.Map 的 OutputKeyClass 为 NullWritable 的时候，所有的 Reduce 都会发送给一个结点计算，所以不要用 NullWritable 作为Map 的OutputKeyClass.</p>
<p><strong>参考:</strong></p>
<p>[1]:<a href="http://blog.csdn.net/yongjian_luo/article/details/9962047" title="Mapreduce不设置reduce，只执行map的输出结果" target="_blank" rel="external">Mapreduce不设置reduce，只执行map的输出结果</a><br>[2]:<a href="https://www.quora.com/Whats-the-key-value-output-of-map-function-if-I-use-context-write-NullWritable-get-new-Text-1" title="What&#39;s the &lt;key, value&gt; output of map function if I use context.write (NullWritable.get(),new Text(1))?" target="_blank" rel="external">What’s the <key, value=""> output of map function if I use context.write (NullWritable.get(),new Text(1))?</key,></a></p>
]]></content>
    
    <summary type="html">
    
      不设置 Reducer 的任务会有一个默认的 Reducer, 如果必要，明确设置job.setNumReduceTasks(0);
    
    </summary>
    
      <category term="HBase" scheme="http://dequn.github.io/categories/HBase/"/>
    
    
      <category term="Hadoop" scheme="http://dequn.github.io/tags/Hadoop/"/>
    
      <category term="MapReduce" scheme="http://dequn.github.io/tags/MapReduce/"/>
    
  </entry>
  
  <entry>
    <title>用 Phoenix 跑 MapReduce 任务-官方例子</title>
    <link href="http://dequn.github.io/2016/10/07/phoenix-mapreduce-example/"/>
    <id>http://dequn.github.io/2016/10/07/phoenix-mapreduce-example/</id>
    <published>2016-10-07T07:50:10.000Z</published>
    <updated>2017-08-24T14:55:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Phoenix 提供了 MapReduce 工作任务的支持，并且官方给出了例子，一起来编码运行一下。</p>
<h1 id="1新建-maven-工程"><a href="#1新建-maven-工程" class="headerlink" title="1新建 maven 工程"></a>1新建 maven 工程</h1><p>在 pom.xml 中添加以下内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.phoenix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>phoenix-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7.0-HBase-1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="2新建一个-StockWritable-的-Java-类"><a href="#2新建一个-StockWritable-的-Java-类" class="headerlink" title="2新建一个 StockWritable 的 Java 类"></a>2新建一个 <code>StockWritable</code> 的 Java 类</h1><p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.db.DBWritable;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.DataInput;</div><div class="line"><span class="keyword">import</span> java.io.DataOutput;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by dq on 10/7/16.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockWritable</span> <span class="keyword">implements</span> <span class="title">DBWritable</span>, <span class="title">Writable</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> String stockName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStockName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> stockName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStockName</span><span class="params">(String stockName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.stockName = stockName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> year;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.year = year;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">double</span>[] getRecordings() &#123;</div><div class="line">        <span class="keyword">return</span> recordings;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRecordings</span><span class="params">(<span class="keyword">double</span>[] recordings)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.recordings = recordings;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMaxPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> maxPrice;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxPrice</span><span class="params">(<span class="keyword">double</span> maxPrice)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.maxPrice = maxPrice;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> year;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[] recordings;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> maxPrice;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(PreparedStatement preparedStatement)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"></div><div class="line">        preparedStatement.setString(<span class="number">1</span>, <span class="keyword">this</span>.stockName);</div><div class="line">        preparedStatement.setDouble(<span class="number">2</span>, <span class="keyword">this</span>.maxPrice);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.stockName = resultSet.getString(<span class="string">"STOCK_NAME"</span>);</div><div class="line">        <span class="keyword">this</span>.year = resultSet.getInt(<span class="string">"RECORDING_YEAR"</span>);</div><div class="line">        <span class="keyword">this</span>.recordings = (<span class="keyword">double</span>[]) resultSet.getArray(<span class="string">"RECORDINGS_QUARTER"</span>).getArray();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="3Mapper-Reducer"><a href="#3Mapper-Reducer" class="headerlink" title="3Mapper, Reducer"></a>3Mapper, Reducer</h1><p>新建一个 PhoenixMapRed 类，实现 map(), reduce(), 并且添加主函数</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.<span class="type">Configuration</span>;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.<span class="type">HBaseConfiguration</span>;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.mapreduce.<span class="type">TableMapReduceUtil</span>;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.<span class="type">DoubleWritable</span>;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.<span class="type">NullWritable</span>;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.<span class="type">Text</span>;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.<span class="type">Job</span>;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.<span class="type">Mapper</span>;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.<span class="type">Reducer</span>;</div><div class="line"><span class="keyword">import</span> org.apache.phoenix.mapreduce.<span class="type">PhoenixOutputFormat</span>;</div><div class="line"><span class="keyword">import</span> org.apache.phoenix.mapreduce.util.<span class="type">PhoenixMapReduceUtil</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by dq on 10/7/16.</span></div><div class="line"><span class="comment"> */</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">PhoenixMapRed</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    public static <span class="class"><span class="keyword">class</span> <span class="title">StockMapper</span> <span class="keyword">extends</span> <span class="title">Mapper&lt;NullWritable</span>, <span class="title">StockWritable</span>, <span class="title">Text</span>, <span class="title">DoubleWritable&gt;</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="type">Text</span> stock = <span class="keyword">new</span> <span class="type">Text</span>();</div><div class="line">        <span class="type">DoubleWritable</span> price = <span class="keyword">new</span> <span class="type">DoubleWritable</span>();</div><div class="line"></div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">protected</span> void map(<span class="type">NullWritable</span> key, <span class="type">StockWritable</span> value, <span class="type">Context</span> context) <span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">InterruptedException</span> &#123;</div><div class="line"></div><div class="line">            <span class="type">String</span> name = value.getStockName();</div><div class="line">            double[] recordings = value.getRecordings();</div><div class="line"></div><div class="line">            double maxRecording = <span class="type">Double</span>.<span class="type">MIN_VALUE</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (double d : recordings) &#123;</div><div class="line">                maxRecording = <span class="type">Math</span>.max(maxRecording, d);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            stock.set(name);</div><div class="line">            price.set(maxRecording);</div><div class="line"></div><div class="line">            context.write(stock, price);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static <span class="class"><span class="keyword">class</span> <span class="title">StockReducer</span> <span class="keyword">extends</span> <span class="title">Reducer&lt;Text</span>, <span class="title">DoubleWritable</span>, <span class="title">NullWritable</span>, <span class="title">StockWritable&gt;</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">protected</span> void reduce(<span class="type">Text</span> key, <span class="type">Iterable</span>&lt;<span class="type">DoubleWritable</span>&gt; values, <span class="type">Context</span> context) <span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">InterruptedException</span> &#123;</div><div class="line"></div><div class="line">            double maxPrice = <span class="type">Double</span>.<span class="type">MIN_VALUE</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="type">DoubleWritable</span> <span class="keyword">val</span> : values) &#123;</div><div class="line">                maxPrice = <span class="type">Math</span>.max(maxPrice, <span class="keyword">val</span>.get());</div><div class="line">            &#125;</div><div class="line">            <span class="type">StockWritable</span> stockWritable = <span class="keyword">new</span> <span class="type">StockWritable</span>();</div><div class="line">            stockWritable.setStockName(key.toString());</div><div class="line">            stockWritable.setMaxPrice(maxPrice);</div><div class="line"></div><div class="line">            context.write(<span class="type">NullWritable</span>.get(), stockWritable);</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public static void main(<span class="type">String</span>[] args) <span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">ClassNotFoundException</span>, <span class="type">InterruptedException</span> &#123;</div><div class="line"></div><div class="line">        <span class="type">Configuration</span> conf = <span class="type">HBaseConfiguration</span>.create();</div><div class="line"></div><div class="line">        <span class="type">Job</span> job = <span class="type">Job</span>.getInstance(conf, <span class="string">"stock"</span>);</div><div class="line"></div><div class="line">        <span class="type">String</span> selectQuery = <span class="string">"SELECT STOCK_NAME,RECORDING_YEAR,RECORDINGS_QUARTER FROM STOCK "</span>;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="type">PhoenixMapReduceUtil</span>.setInput(job, <span class="type">StockWritable</span>.<span class="keyword">class</span>, <span class="string">"STOCK"</span>, selectQuery);</div><div class="line">        <span class="type">PhoenixMapReduceUtil</span>.setOutput(job, <span class="string">"STOCK_STATS"</span>, <span class="string">"STOCK_NAME,MAX_RECORDING"</span>);</div><div class="line"></div><div class="line"></div><div class="line">        job.setMapperClass(<span class="type">StockMapper</span>.<span class="keyword">class</span>);</div><div class="line">        job.setReducerClass(<span class="type">StockReducer</span>.<span class="keyword">class</span>);</div><div class="line"></div><div class="line">        job.setOutputFormatClass(<span class="type">PhoenixOutputFormat</span>.<span class="keyword">class</span>);</div><div class="line"></div><div class="line"></div><div class="line">        job.setMapOutputKeyClass(<span class="type">Text</span>.<span class="keyword">class</span>);</div><div class="line">        job.setMapOutputValueClass(<span class="type">DoubleWritable</span>.<span class="keyword">class</span>);</div><div class="line"></div><div class="line">        job.setOutputKeyClass(<span class="type">NullWritable</span>.<span class="keyword">class</span>);</div><div class="line">        job.setOutputValueClass(<span class="type">StockWritable</span>.<span class="keyword">class</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="type">TableMapReduceUtil</span>.addDependencyJars(job);</div><div class="line">        job.waitForCompletion(<span class="literal">true</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意，代码中的<code>PhoenixMapReduceUtil.setOutput(job, &quot;STOCK_STATS&quot;, &quot;STOCK_NAME,MAX_RECORDING&quot;);</code>一句与官方文档不一样，官方上的应该是老代码，运行时有错误。</strong></p>
<h1 id="4数据表建立，数据导入，略。"><a href="#4数据表建立，数据导入，略。" class="headerlink" title="4数据表建立，数据导入，略。"></a>4数据表建立，数据导入，略。</h1><h1 id="5编译"><a href="#5编译" class="headerlink" title="5编译"></a>5编译</h1><p>编译的过程是一个比较复杂的过程，官方的例子并没有给出过程，在使用<code>javac</code>编译前，需要将<code>phoenix-4.8.0-HBase-1.1-client.jar</code>添加到<code>CLASSPATH</code>中,编译后会生成4个文件，再使用 <code>jar</code>命令生成 .jar 文件。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">export CLASSPATH=/usr/local/hbase/lib/phoenix-<span class="number">4.8</span>.<span class="number">0</span>-HBase-<span class="number">1.1</span>-client<span class="selector-class">.jar</span>:<span class="variable">$CLASSPATH</span></div><div class="line"></div><div class="line">javac PhoenixMapRed.java</div><div class="line">#生成<span class="number">4</span>个文件 PhoenixMapRed<span class="selector-class">.class</span> PhoenixMapRed<span class="variable">$StockMapper</span><span class="selector-class">.class</span> PhoenixMapRed<span class="variable">$StockReducer</span><span class="selector-class">.class</span>  StockWritable.class</div><div class="line"></div><div class="line">jar -cvf PhoenixMapRed<span class="selector-class">.jar</span> PhoenixMapRed<span class="selector-class">.class</span> PhoenixMapRed<span class="variable">$StockMapper</span><span class="selector-class">.class</span> PhoenixMapRed<span class="variable">$StockReducer</span><span class="selector-class">.class</span>  StockWritable.class</div></pre></td></tr></table></figure>
<h1 id="6运行"><a href="#6运行" class="headerlink" title="6运行"></a>6运行</h1><p>如果现在直接执行<code>hadoop jar PhoenixMapRed.jar PhoenixMapRed</code>的话，会抛出异常：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.lang</span><span class="selector-class">.NoClassDefFoundError</span>: org/apache/hadoop/hbase/HBaseConfiguration</div><div class="line">	at PhoenixMapRed.main(PhoenixMapRed<span class="selector-class">.java</span>:<span class="number">73</span>)</div><div class="line">	at sun<span class="selector-class">.reflect</span><span class="selector-class">.NativeMethodAccessorImpl</span><span class="selector-class">.invoke0</span>(Native Method)</div><div class="line">	at sun<span class="selector-class">.reflect</span><span class="selector-class">.NativeMethodAccessorImpl</span><span class="selector-class">.invoke</span>(NativeMethodAccessorImpl<span class="selector-class">.java</span>:<span class="number">62</span>)</div><div class="line">	at sun<span class="selector-class">.reflect</span><span class="selector-class">.DelegatingMethodAccessorImpl</span><span class="selector-class">.invoke</span>(DelegatingMethodAccessorImpl<span class="selector-class">.java</span>:<span class="number">43</span>)</div><div class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.Method</span><span class="selector-class">.invoke</span>(Method<span class="selector-class">.java</span>:<span class="number">498</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.run</span>(RunJar<span class="selector-class">.java</span>:<span class="number">221</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.main</span>(RunJar<span class="selector-class">.java</span>:<span class="number">136</span>)</div><div class="line">Caused by: java<span class="selector-class">.lang</span><span class="selector-class">.ClassNotFoundException</span>: org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.HBaseConfiguration</span></div><div class="line">	at java<span class="selector-class">.net</span><span class="selector-class">.URLClassLoader</span><span class="selector-class">.findClass</span>(URLClassLoader<span class="selector-class">.java</span>:<span class="number">381</span>)</div><div class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.ClassLoader</span><span class="selector-class">.loadClass</span>(ClassLoader<span class="selector-class">.java</span>:<span class="number">424</span>)</div><div class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.ClassLoader</span><span class="selector-class">.loadClass</span>(ClassLoader<span class="selector-class">.java</span>:<span class="number">357</span>)</div></pre></td></tr></table></figure>
<p>这次需要将<code>phoenix-4.8.0-HBase-1.1-client.jar</code>添加到 <code>HADOOP_CLASSPATH</code>中，然后再执行任务。</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_CLASSPATH</span>=/usr/local/hbase/lib/phoenix-4.8.0-HBase-1.1-client.jar:$HADOOP_CLASSPATH</div><div class="line">hadoop jar PhoenixMapRed.jar PhoenixMapRed</div><div class="line"><span class="comment">#...执行正常</span></div></pre></td></tr></table></figure>
<h1 id="7结果查看"><a href="#7结果查看" class="headerlink" title="7结果查看"></a>7结果查看</h1><p>在phoenix 的 sqlline 环境中执行查询，会看到结果</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">0: jdbc:phoenix:localhost&gt; select * from stock<span class="emphasis">_stats;</span></div><div class="line"><span class="emphasis">+-------------+----------------+</span></div><div class="line"><span class="emphasis">| STOCK_</span>NAME  | MAX<span class="emphasis">_RECORDING  |</span></div><div class="line"><span class="emphasis">+-------------+----------------+</span></div><div class="line"><span class="emphasis">| AAPL        | 200.26         |</span></div><div class="line"><span class="emphasis">| CSCO        | 27.98          |</span></div><div class="line"><span class="emphasis">| GOOG        | 697.37         |</span></div><div class="line"><span class="emphasis">| MSFT        | 35.96          |</span></div><div class="line"><span class="emphasis">| YHOO        | 41.22          |</span></div><div class="line"><span class="emphasis">+-------------+----------------+</span></div><div class="line"><span class="emphasis">5 rows selected (0.298 seconds)</span></div></pre></td></tr></table></figure>
<p>至此，该例子成功运行。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="http://phoenix.apache.org/phoenix_mr.html" target="_blank" rel="external">Phoenix Map Reduce</a><br>2.<a href="http://stackoverflow.com/questions/30801364/mapreduce-hadoop-2-6-0-hbase-1-0-1-1-class-not-found-exception" target="_blank" rel="external">MapReduce (Hadoop-2.6.0)+ HBase-1.0.1.1 class not found exception</a></p>
]]></content>
    
    <summary type="html">
    
      在 Phoenix 上跑 MapReduce 任务，重点在如何编译、打包 jar、运行。
    
    </summary>
    
      <category term="Phoenix" scheme="http://dequn.github.io/categories/Phoenix/"/>
    
    
      <category term="Phoenix" scheme="http://dequn.github.io/tags/Phoenix/"/>
    
      <category term="MapReduce" scheme="http://dequn.github.io/tags/MapReduce/"/>
    
  </entry>
  
  <entry>
    <title>Phoenix Secondary Index初探之Local Index</title>
    <link href="http://dequn.github.io/2016/09/02/Phoenix-Secondary-Index-Exploration-Local-Index/"/>
    <id>http://dequn.github.io/2016/09/02/Phoenix-Secondary-Index-Exploration-Local-Index/</id>
    <published>2016-09-02T12:54:37.000Z</published>
    <updated>2017-08-24T12:49:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇探索了 Phoenix 的 Global Index，这一次来看一看 Local Index 的实现原理。</p>
<p>首先需要说明的是实验采用的 Phoenix 版本号是4.8，从4.8开始，Phoenix 的Local Index 不再采用新建数据表的方式，从官方的描述中可以看出这一点变化：</p>
<blockquote>
<p>Unlike global indexes, all local indexes of a table are stored in a single, separate shared table prior to 4.8.0 version. From 4.8.0 onwards we are storing all local index data in the separate shadow column families in the same data table. </p>
</blockquote>
<p>不过什么是 <strong>shadow column families</strong>? 这一点确实把我弄蒙了，百度 Google 都没有搜出相关的概念，先不管那么多了，先心无旁骛的直奔目标吧。</p>
<p>需要说明的另一点是由于上一次采用的表数据量有些大，在建立 Local Index总是出错，使用 <code>!tables</code> 命令查看索引表总是处于 <strong>BUILDING</strong> 状态，所以这次新建了一个表进行试验，原理明白就好。</p>
<h1 id="1-新建数据表、索引和插入数据"><a href="#1-新建数据表、索引和插入数据" class="headerlink" title="1.新建数据表、索引和插入数据"></a>1.新建数据表、索引和插入数据</h1><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> zdq.test (id BIGINT <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>, X INTEGER, Y INTEGER, Z INTEGER, M DECIMAL, N SMALLINT);</div><div class="line">ALTER TABLE zdq.test set IMMUTABLE_ROWS = true; # can not set local <span class="keyword">index</span> <span class="keyword">if</span> IMMUTABLE_ROWS = fasle <span class="keyword">or</span> need <span class="keyword">set</span> hbse-site.xml</div><div class="line"><span class="keyword">CREATE</span> LOCAL <span class="keyword">INDEX</span> X_IDX <span class="keyword">ON</span> zdq.test (x);</div><div class="line"><span class="keyword">CREATE</span> LOCAL <span class="keyword">INDEX</span> Y_IDX <span class="keyword">ON</span> zdq.test (y);</div><div class="line"><span class="keyword">CREATE</span> LOCAL <span class="keyword">INDEX</span> Z_IDX <span class="keyword">ON</span> zdq.test (z);</div><div class="line"><span class="keyword">UPSERT</span> <span class="keyword">INTO</span> zdq.test (id, x, y, z, m, n) <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">UPSERT</span> <span class="keyword">INTO</span> zdq.test (id, x, y, z, m, n) <span class="keyword">VALUES</span> (<span class="number">123456</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>使用 <code>!tables</code> 查看一下数据表，发现多了<strong>四个表</strong>,一个主数据表，三个索引表。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+------------+--------------+-------------+---------------+----------+------------+----------------------------+-----------------+--------------+-----------------+---------------+---------------+--------+</div><div class="line">|<span class="string"> TABLE_CAT  </span>|<span class="string"> TABLE_SCHEM  </span>|<span class="string"> TABLE_NAME  </span>|<span class="string">  TABLE_TYPE   </span>|<span class="string"> REMARKS  </span>|<span class="string"> TYPE_NAME  </span>|<span class="string"> SELF_REFERENCING_COL_NAME  </span>|<span class="string"> REF_GENERATION  </span>|<span class="string"> INDEX_STATE  </span>|<span class="string"> IMMUTABLE_ROWS  </span>|<span class="string"> SALT_BUCKETS  </span>|<span class="string"> MULTI_TENANT  </span>|<span class="string"> VIEW_S </span>|</div><div class="line">+------------+--------------+-------------+---------------+----------+------------+----------------------------+-----------------+--------------+-----------------+---------------+---------------+--------+</div><div class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> X_IDX       </span>|<span class="string"> INDEX         </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string"> ACTIVE       </span>|<span class="string"> true            </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Y_IDX       </span>|<span class="string"> INDEX         </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string"> ACTIVE       </span>|<span class="string"> true            </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Z_IDX       </span>|<span class="string"> INDEX         </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string"> ACTIVE       </span>|<span class="string"> true            </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> SYSTEM       </span>|<span class="string"> CATALOG     </span>|<span class="string"> SYSTEM TABLE  </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string">              </span>|<span class="string"> false           </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> SYSTEM       </span>|<span class="string"> FUNCTION    </span>|<span class="string"> SYSTEM TABLE  </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string">              </span>|<span class="string"> false           </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> SYSTEM       </span>|<span class="string"> SEQUENCE    </span>|<span class="string"> SYSTEM TABLE  </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string">              </span>|<span class="string"> false           </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> SYSTEM       </span>|<span class="string"> STATS       </span>|<span class="string"> SYSTEM TABLE  </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string">              </span>|<span class="string"> false           </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> IMOS        </span>|<span class="string"> TABLE         </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string">              </span>|<span class="string"> true            </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> TEST        </span>|<span class="string"> TABLE         </span>|<span class="string">          </span>|<span class="string">            </span>|<span class="string">                            </span>|<span class="string">                 </span>|<span class="string">              </span>|<span class="string"> true            </span>|<span class="string"> null          </span>|<span class="string"> false         </span>|<span class="string">        </span>|</div><div class="line">+------------+--------------+-------------+---------------+----------+------------+----------------------------+-----------------+--------------+-----------------+---------------+---------------+--------+</div></pre></td></tr></table></figure>
<p>在 HBase Shell 中使用 <code>list</code> 命令查看一下，<strong>和 Global Index 不一样的是，只多出了一个表 ‘ZDQ.TEST’</strong>。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">hbase</span><span class="params">(main)</span></span>:<span class="number">001</span>:<span class="number">0</span>&gt; list</div><div class="line">TABLE</div><div class="line">BIGJOY.IMOS</div><div class="line">BIGJOY.POIS</div><div class="line">BIGJOY.POIS_MAC_IDX</div><div class="line">SYSTEM.CATALOG</div><div class="line">SYSTEM.FUNCTION</div><div class="line">SYSTEM.SEQUENCE</div><div class="line">SYSTEM.STATS</div><div class="line">ZDQ.TEST</div><div class="line"><span class="number">8</span> row(s) <span class="keyword">in</span> <span class="number">0.2320</span> seconds</div><div class="line"></div><div class="line">=&gt; [<span class="string">"BIGJOY.IMOS"</span>, <span class="string">"BIGJOY.POIS"</span>, <span class="string">"BIGJOY.POIS_MAC_IDX"</span>, <span class="string">"SYSTEM.CATALOG"</span>, <span class="string">"SYSTEM.FUNCTION"</span>, <span class="string">"SYSTEM.SEQUENCE"</span>, <span class="string">"SYSTEM.STATS"</span>, <span class="string">"ZDQ.TEST"</span>]</div><div class="line"><span class="function"><span class="title">hbase</span><span class="params">(main)</span></span>:<span class="number">002</span>:<span class="number">0</span>&gt;</div></pre></td></tr></table></figure>
<h1 id="2-数据表、索引表结构探究"><a href="#2-数据表、索引表结构探究" class="headerlink" title="2.数据表、索引表结构探究"></a>2.数据表、索引表结构探究</h1><p>查看三个索引表的主键！<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">0: jdbc:phoenix:localhost&gt; !primarykeys zdq.z_idx</div><div class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</div><div class="line">|<span class="string"> TABLE_CAT  </span>|<span class="string"> TABLE_SCHEM  </span>|<span class="string"> TABLE_NAME  </span>|<span class="string"> COLUMN_NAME  </span>|<span class="string"> KEY_SEQ  </span>|<span class="string"> PK_NAME  </span>|<span class="string"> ASC_OR_DESC  </span>|<span class="string"> DATA_TYPE  </span>|<span class="string"> TYPE_NAME  </span>|<span class="string"> COLUMN_SIZE  </span>|<span class="string"> TYPE_ID  </span>|<span class="string"> VIEW_CONSTANT  </span>|</div><div class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</div><div class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Z_IDX       </span>|<span class="string"> 0:Z          </span>|<span class="string"> 2        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 3          </span>|<span class="string"> DECIMAL    </span>|<span class="string"> null         </span>|<span class="string"> 3        </span>|<span class="string">                </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Z_IDX       </span>|<span class="string"> :ID          </span>|<span class="string"> 3        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> -5         </span>|<span class="string"> BIGINT     </span>|<span class="string"> null         </span>|<span class="string"> -5       </span>|<span class="string">                </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Z_IDX       </span>|<span class="string"> _INDEX_ID    </span>|<span class="string"> 1        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 5          </span>|<span class="string"> SMALLINT   </span>|<span class="string"> null         </span>|<span class="string"> 5        </span>|<span class="string">                </span>|</div><div class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</div><div class="line">0: jdbc:phoenix:localhost&gt; !primarykeys zdq.x_idx</div><div class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</div><div class="line">|<span class="string"> TABLE_CAT  </span>|<span class="string"> TABLE_SCHEM  </span>|<span class="string"> TABLE_NAME  </span>|<span class="string"> COLUMN_NAME  </span>|<span class="string"> KEY_SEQ  </span>|<span class="string"> PK_NAME  </span>|<span class="string"> ASC_OR_DESC  </span>|<span class="string"> DATA_TYPE  </span>|<span class="string"> TYPE_NAME  </span>|<span class="string"> COLUMN_SIZE  </span>|<span class="string"> TYPE_ID  </span>|<span class="string"> VIEW_CONSTANT  </span>|</div><div class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</div><div class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> X_IDX       </span>|<span class="string"> 0:X          </span>|<span class="string"> 2        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 3          </span>|<span class="string"> DECIMAL    </span>|<span class="string"> null         </span>|<span class="string"> 3        </span>|<span class="string">                </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> X_IDX       </span>|<span class="string"> :ID          </span>|<span class="string"> 3        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> -5         </span>|<span class="string"> BIGINT     </span>|<span class="string"> null         </span>|<span class="string"> -5       </span>|<span class="string">                </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> X_IDX       </span>|<span class="string"> _INDEX_ID    </span>|<span class="string"> 1        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 5          </span>|<span class="string"> SMALLINT   </span>|<span class="string"> null         </span>|<span class="string"> 5        </span>|<span class="string">                </span>|</div><div class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</div><div class="line">0: jdbc:phoenix:localhost&gt; !primarykeys zdq.y_idx</div><div class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</div><div class="line">|<span class="string"> TABLE_CAT  </span>|<span class="string"> TABLE_SCHEM  </span>|<span class="string"> TABLE_NAME  </span>|<span class="string"> COLUMN_NAME  </span>|<span class="string"> KEY_SEQ  </span>|<span class="string"> PK_NAME  </span>|<span class="string"> ASC_OR_DESC  </span>|<span class="string"> DATA_TYPE  </span>|<span class="string"> TYPE_NAME  </span>|<span class="string"> COLUMN_SIZE  </span>|<span class="string"> TYPE_ID  </span>|<span class="string"> VIEW_CONSTANT  </span>|</div><div class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</div><div class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Y_IDX       </span>|<span class="string"> 0:Y          </span>|<span class="string"> 2        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 3          </span>|<span class="string"> DECIMAL    </span>|<span class="string"> null         </span>|<span class="string"> 3        </span>|<span class="string">                </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Y_IDX       </span>|<span class="string"> :ID          </span>|<span class="string"> 3        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> -5         </span>|<span class="string"> BIGINT     </span>|<span class="string"> null         </span>|<span class="string"> -5       </span>|<span class="string">                </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> ZDQ          </span>|<span class="string"> Y_IDX       </span>|<span class="string"> _INDEX_ID    </span>|<span class="string"> 1        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 5          </span>|<span class="string"> SMALLINT   </span>|<span class="string"> null         </span>|<span class="string"> 5        </span>|<span class="string">                </span>|</div><div class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+----------+----------------+</div></pre></td></tr></table></figure></p>
<p>发现三个索引表中除了<strong>被索引的字段</strong>字段不同外，其他组成并且在主键中的顺序都是一样的，下面看一下执行计划！</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">0: jdbc:phoenix:localhost&gt; explain select * <span class="keyword">from</span> zdq.test where x = 1;</div><div class="line">+---------------------------------------------------------------------------+</div><div class="line">|                                   PLAN                                    |</div><div class="line">+---------------------------------------------------------------------------+</div><div class="line">|<span class="built_in"> CLIENT </span>1-CHUNK PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER ZDQ.TEST [1,1]  |</div><div class="line">|    <span class="built_in"> SERVER FILTER </span>BY FIRST KEY ONLY                                       |</div><div class="line">+---------------------------------------------------------------------------+</div><div class="line">2 rows selected (0.064 seconds)</div><div class="line">0: jdbc:phoenix:localhost&gt; explain select * <span class="keyword">from</span> zdq.test where y &gt; 3;</div><div class="line">+-----------------------------------------------------------------------------------+</div><div class="line">|                                       PLAN                                        |</div><div class="line">+-----------------------------------------------------------------------------------+</div><div class="line">|<span class="built_in"> CLIENT </span>1-CHUNK PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER ZDQ.TEST [2,3] - [2,*]  |</div><div class="line">|    <span class="built_in"> SERVER FILTER </span>BY FIRST KEY ONLY                                               |</div><div class="line">+-----------------------------------------------------------------------------------+</div><div class="line">2 rows selected (0.067 seconds)</div><div class="line">0: jdbc:phoenix:localhost&gt; explain select * <span class="keyword">from</span> zdq.test where z &lt; 2;</div><div class="line">+-----------------------------------------------------------------------------------+</div><div class="line">|                                       PLAN                                        |</div><div class="line">+-----------------------------------------------------------------------------------+</div><div class="line">|<span class="built_in"> CLIENT </span>1-CHUNK PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER ZDQ.TEST [3,*] - [3,2]  |</div><div class="line">|    <span class="built_in"> SERVER FILTER </span>BY FIRST KEY ONLY                                               |</div><div class="line">+-----------------------------------------------------------------------------------+</div></pre></td></tr></table></figure>
<p>从给出的执行计划中可以看出，三次查询都是进行的<strong>RANGE SCAN</strong>,但是注意到 <code>[1,1],[2,3] - [2,*],[3,*] - [3,2]</code>的不同，虽然对其中含义不完全确定，可以知道的是中括号的第二个数和查询约束相关，第一个数吗，是索引建立的顺序？这样也可以与索引表的 primary key 组成的<code>_INDEX_ID</code>的字面意义对应，猜测而已，接下来看一下在 HBase Shell 中的结果吧！</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">hbase(main):004:0&gt; scan 'ZDQ.TEST'</div><div class="line">ROW                                                  COLUMN+CELL</div><div class="line"> <span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>C1<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009      column=L#0:_0, timestamp=1472824360985, value=_0</div><div class="line"> <span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>C1<span class="symbol">\x</span>05<span class="symbol">\x</span>00<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@   column=L#0:_0, timestamp=1472824362230, value=_0</div><div class="line"> <span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>C1<span class="symbol">\x</span>03<span class="symbol">\x</span>00<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009      column=L#0:_0, timestamp=1472824360985, value=_0</div><div class="line"> <span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>C1<span class="symbol">\x</span>06<span class="symbol">\x</span>00<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@   column=L#0:_0, timestamp=1472824362230, value=_0</div><div class="line"> <span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>C1<span class="symbol">\x</span>04<span class="symbol">\x</span>00<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009      column=L#0:_0, timestamp=1472824360985, value=_0</div><div class="line"> <span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>C1<span class="symbol">\x</span>07<span class="symbol">\x</span>00<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@   column=L#0:_0, timestamp=1472824362230, value=_0</div><div class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009                          column=0:M, timestamp=1472824360985, value=<span class="symbol">\x</span>C1<span class="symbol">\x</span>02</div><div class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009                          column=0:N, timestamp=1472824360985, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00</div><div class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009                          column=0:X, timestamp=1472824360985, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01</div><div class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009                          column=0:Y, timestamp=1472824360985, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>02</div><div class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009                          column=0:Z, timestamp=1472824360985, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>03</div><div class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>0009                          column=0:_0, timestamp=1472824360985, value=x</div><div class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@                       column=0:M, timestamp=1472824362230, value=<span class="symbol">\x</span>C1<span class="symbol">\x</span>03</div><div class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@                       column=0:N, timestamp=1472824362230, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>01</div><div class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@                       column=0:X, timestamp=1472824362230, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>04</div><div class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@                       column=0:Y, timestamp=1472824362230, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>05</div><div class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@                       column=0:Z, timestamp=1472824362230, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>06</div><div class="line"> <span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>E2@                       column=0:_0, timestamp=1472824362230, value=x</div><div class="line">8 row(s) in 0.0570 seconds</div></pre></td></tr></table></figure>
<p>注意到，我们只插入了两行，应该只有两个主键才对，HBase Shell 中我们看到了<strong>8个主键</strong>,含有<code>0:M,0:N,0:X,0:Y,0:Z</code>的两行无疑是我们执行 <code>UPSERT</code> 命令插入的，剩下的六行是什么鬼？</p>
<p>以<code>\x00\x00\xC1\x02\x00\x80\x00\x00\x00\x00\x0009</code> 和 <code>\x00\x00\xC1\x05\x00\x80\x00\x00\x00\x00\x01\xE2@</code> 为例，很快我们就可以发现这两行的后半截 <code>\x80\x00\x00\x00\x00\x0009</code> 就是原数据表的主键了，这与 <code>!primarykeys</code> 中看到的 <code>:ID</code>的 <code>KEY_SEQ = 3</code> 是一致的。</p>
<p>剩下前边的 <code>\x00\x00\xC1\x02\x00</code> 和 <code>\x00\x00\xC1\x05\x00</code> ,不过代表什么意思就得猜了，索引表主键查看的结果中，被索引字段(姑且还这么叫吧)是被放在了第二位的 <code>KEY_SEQ = 2</code> ，并且是 <code>Decimal</code>类型的，这就是为什么在创建表的时候多了一个 Decimal 类型的字段 <code>M</code>,在 HBase Shell 中的查询结果有这么一行<code>\x80\x00\x00\x00\x00\x00\x04\xD2                    column=0:M, timestamp=1472822139596, value=\xC1\x02</code>,看 M 的值对比<code>\x00\x00\xC1\x02\x00</code>，发现出后边多了一个 <code>\x00</code>之外，其余是吻合的，即 X = M，前缀 <code>\x00\x00</code> <code>\x00\x01</code> <code>\x00\x02</code> 应该就是三个索引的编号了，如果在创建第四个索引，就还会多出 N 行，N 为原始数据的行数，经过实践确实如此，只是中间的一个 <code>\x00</code> 是做什么用的还不清楚！</p>
<p>从这里大概可以猜出 <strong>shadow column families</strong>的意思了，应该就是指在同一个表中添加主键构成不同的行作为索引。</p>
<h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h1><p>经过以上实验，总结 Phoenix 的 Local Index ：</p>
<ul>
<li>从 Phoenix 4.8 版本开始，Local Index 和原始数据是存在于一个表中的！</li>
<li>Local Index 先范围扫描约束，根据得到的 <code>:ID</code> 再查询原始数据，所以 Local Index 是可以用在任意字段的查询中都有作用！</li>
<li>shadow column families 应该就是一个小 trick 而已，弄得概念很高大上，如果我理解错了还望指正。</li>
<li>Local Index 查询至少经过一次 RANGE SCAN 和 GET ，所以效率上肯定不如 Global Index 高。</li>
<li>疑问1：Local Index 是保证了索引表和原始表在同一个 RegionServer 上的，如果在一个表中，行健组成又不同，Phoenix 是如何实现这一点的？</li>
<li>官方文档说：如果一个 Local Index 被使用，所用的 Region 都要被检查是否有满足约束的数据，所以读取效率很低呐！</li>
</ul>
<p>最后，发现 Phoenix 把各种 Data Type 的都变成 Hexacdemical 字符串了，很不利于人来查看，虽然在 Phoenix 的交互命令行中是类如 RDMBS 的可读的，但在这次实验中也发现了这些 Hexacdemical 太不友好，如果有必要并且找到比较好的解决方案的话，大家给提供些帮助如何使 hexacdemical readable?</p>
]]></content>
    
    <summary type="html">
    
      Phoenix 二级索引中 Local Index 是通过在索引表中关联原始表的 Rowkey 来实现的。
    
    </summary>
    
      <category term="Phoenix" scheme="http://dequn.github.io/categories/Phoenix/"/>
    
    
      <category term="HBase" scheme="http://dequn.github.io/tags/HBase/"/>
    
      <category term="Secondary Index" scheme="http://dequn.github.io/tags/Secondary-Index/"/>
    
      <category term="Phoenix" scheme="http://dequn.github.io/tags/Phoenix/"/>
    
      <category term="Local Index" scheme="http://dequn.github.io/tags/Local-Index/"/>
    
  </entry>
  
  <entry>
    <title>Phoenix Secondary Index初探之Global Index</title>
    <link href="http://dequn.github.io/2016/08/29/Phoenix-Secondary-Index-Exploration-Global-Index/"/>
    <id>http://dequn.github.io/2016/08/29/Phoenix-Secondary-Index-Exploration-Global-Index/</id>
    <published>2016-08-29T13:44:48.000Z</published>
    <updated>2017-08-24T12:49:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>上篇我们提到了HBase建立二级索引的原理，但是当我们自己建立二级索引，就需要做额外很多工作，我们需要定义Coprocessor，在数据更新的时候更新索引，查询时先去检索索引表等，定义这些Coprocessor不仅费时费力，而且一般使用者不能保证程序的高效性、健壮性等。还好，已经有不少构建在HBase上的插件——个人觉得称之为插件更为合理，已经帮我们做了这些工作，Phoenix就是其中一种。</p>
<p>Phoenix提供的二级索引按索引对象可以分为Covered Indexes 和 Functional Indexes，Covered Indexed就是对原始数据进行所以，Functional Indexes就是就原始数据进行处理后再索引，区别从<a href="https://phoenix.apache.org/secondary_indexing.html" target="_blank" rel="external">官方给出的两个例子</a>就可以很明显的看出，不再讨论。</p>
<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Covered Indexes</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> my_index <span class="keyword">ON</span> my_table (v1,v2) <span class="keyword">INCLUDE</span>(v3)</div><div class="line"></div><div class="line"># Functional Indexes</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> UPPER_NAME_IDX <span class="keyword">ON</span> EMP (<span class="built_in">UPPER</span>(FIRST_NAME||<span class="string">' '</span>||LAST_NAME))</div><div class="line"><span class="keyword">SELECT</span> EMP_ID <span class="keyword">FROM</span> EMP <span class="keyword">WHERE</span> <span class="built_in">UPPER</span>(FIRST_NAME||<span class="string">' '</span>||LAST_NAME)=<span class="string">'JOHN DOE'</span></div></pre></td></tr></table></figure>
<p>另外Phoenix的索引分为<strong>Global Indexes</strong> 和 <strong>Local Indexes</strong>,官方文档提到，Global Index适合适用于<strong>读多写少</strong>的场景，Local Index适合<strong>频繁写</strong>的场景，那么这两种索引到底有什么区别呢？</p>
<h1 id="1-建立数据表，明确需求"><a href="#1-建立数据表，明确需求" class="headerlink" title="1 建立数据表，明确需求"></a>1 建立数据表，明确需求</h1><p>因为是课题需要，已经存在一张数据表<code>BIGJOY.IMOS</code>，大概有400万行的数据，最初就是使用Phoenix建立的，给大家看一下该表的结构，注意该cell不是HBase的Cell，不要混淆。</p>
<table>
<thead>
<tr>
<th>COLUMN_NAME</th>
<th>DATA_TYPE</th>
<th>TYPE_NAME</th>
</tr>
</thead>
<tbody>
<tr>
<td>ID</td>
<td>1</td>
<td>CHAR</td>
</tr>
<tr>
<td>FLOOR</td>
<td>1</td>
<td>CHAR</td>
</tr>
<tr>
<td>TIME</td>
<td>93</td>
<td>TIMESTAMP</td>
</tr>
<tr>
<td>MAC</td>
<td>1</td>
<td>CHAR</td>
</tr>
<tr>
<td>X</td>
<td>4</td>
<td>INTEGER</td>
</tr>
<tr>
<td>Y</td>
<td>4</td>
<td>INTEGER</td>
</tr>
<tr>
<td>CELL</td>
<td>1</td>
<td>CHAR</td>
</tr>
</tbody>
</table>
<p><strong>需求:</strong>1.根据mac和time约束查询cell;2.根据cell和time约束查询mac。以需求1为例，探索Phoenix Secondary Index的工作原理。</p>
<h1 id="2-对比案例"><a href="#2-对比案例" class="headerlink" title="2 对比案例"></a>2 对比案例</h1><p>为了方便和严谨，本文建立索引前后进行了下面的八个查询，也是从这八个查询探究Phoenix Secondary Index，下面就先列出这8个查询语句。</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>SQl</th>
<th>查询结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>select cell from bigjoy.imos where mac = &#39;28E14CA61635&#39;;</code></td>
<td>28条记录</td>
</tr>
<tr>
<td>2</td>
<td><code>select time from bigjoy.imos where mac = &#39;28E14CA61635&#39;;</code></td>
<td>28条记录</td>
</tr>
<tr>
<td>3</td>
<td><code>select floor from bigjoy.imos where mac = &#39;28E14CA61635&#39;;</code></td>
<td>28条记录</td>
</tr>
<tr>
<td>4</td>
<td><code>select * from bigjoy.imos where mac = &#39;28E14CA61635&#39;;</code></td>
<td>28条记录</td>
</tr>
<tr>
<td>5</td>
<td><code>select mac from bigjoy.imos where time = to_date(&#39;2014-04-01 20:39:42.000&#39;);</code></td>
<td>223条记录</td>
</tr>
<tr>
<td>6</td>
<td><code>select cell from bigjoy.imos where time = to_date(&#39;2014-04-01 20:39:42.000&#39;);</code></td>
<td>223条记录</td>
</tr>
<tr>
<td>7</td>
<td><code>select cell from bigjoy.imos where mac = &#39;28E14CA61635&#39; and time = to_date(&#39;2014-04-01 20:39:42.000&#39;);</code></td>
<td>1条记录</td>
</tr>
<tr>
<td>8</td>
<td><code>select * from bigjoy.imos where mac = &#39;28E14CA61635&#39; and time = to_date(&#39;2014-04-01 20:39:42.000&#39;);</code></td>
<td>1条记录</td>
</tr>
</tbody>
</table>
<h1 id="3-建立mac-time全局索引"><a href="#3-建立mac-time全局索引" class="headerlink" title="3 建立mac-time全局索引"></a>3 建立mac-time全局索引</h1><p>下面建立针对mac的索引</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> bigjoy.mac_idx <span class="keyword">on</span> bigjoy.imos (mac,<span class="keyword">time</span>) <span class="keyword">include</span> (cell)</div><div class="line"># <span class="keyword">global</span> <span class="keyword">index</span> default.</div></pre></td></tr></table></figure>
<h1 id="4-效率对比"><a href="#4-效率对比" class="headerlink" title="4 效率对比"></a>4 效率对比</h1><p>针对2中的8条SQL，再次进行查询，与建立索引前的对比如下表:</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>建立索引前(秒)</th>
<th>建立索引后(秒)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>7.236</td>
<td>0.175</td>
</tr>
<tr>
<td>2</td>
<td>6.553</td>
<td>0.029</td>
</tr>
<tr>
<td>3</td>
<td>7.581</td>
<td>6.826</td>
</tr>
<tr>
<td>4</td>
<td>7.171</td>
<td>6.616</td>
</tr>
<tr>
<td>5</td>
<td>7.129</td>
<td>9.926</td>
</tr>
<tr>
<td>6</td>
<td>7.258</td>
<td>7.039</td>
</tr>
<tr>
<td>7</td>
<td>7.632</td>
<td>0.026</td>
</tr>
<tr>
<td>8</td>
<td>7.682</td>
<td>7.383</td>
</tr>
</tbody>
</table>
<p>可以看出，建立索引是选择的是(mac,time)字段,并且包含了cell字段，以mac为约束查询time或cell字段效率提升很大，但当查询floor字段或者包含其他字段的时候，索引的存在并没有提升效率，以time为约束的查询在索引建立前后也没有效率上的改变。</p>
<p>下面就深入分析一下原因。</p>
<h2 id="4-1-查看一下数据表有木有变化"><a href="#4-1-查看一下数据表有木有变化" class="headerlink" title="4.1 查看一下数据表有木有变化"></a>4.1 查看一下数据表有木有变化</h2><p>索引建立好后，先使用Phoenix的 <code>!tables</code> 命令查看一下所用的数据表，从结果中可以看出多出了一个<strong>BIGJOY.MAC_IDX</strong>的数据表，如图所示。</p>
<p><img src="http://obqjd695a.bkt.clouddn.com/phoenix%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95%E5%90%8E%E5%A4%9A%E5%87%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E8%A1%A8.PNG" alt="使用Phoenix建立索引后多出一个数据表"></p>
<h2 id="4-2-探索索引表的结构"><a href="#4-2-探索索引表的结构" class="headerlink" title="4.2 探索索引表的结构"></a>4.2 探索索引表的结构</h2><p>首先看一下该表都有哪些字段呀！</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0: jdbc:phoenix:localhost&gt; !describe bigjoy.mac_idx</div><div class="line">+------------+--------------+-------------+--------------+------------+------------+--------------+----------------+-----------------+-----------------+-----+</div><div class="line">|<span class="string"> TABLE_CAT  </span>|<span class="string"> TABLE_SCHEM  </span>|<span class="string"> TABLE_NAME  </span>|<span class="string"> COLUMN_NAME  </span>|<span class="string"> DATA_TYPE  </span>|<span class="string"> TYPE_NAME  </span>|<span class="string"> COLUMN_SIZE  </span>|<span class="string"> BUFFER_LENGTH  </span>|<span class="string"> DECIMAL_DIGITS  </span>|<span class="string"> NUM_PREC_RADIX  </span>|<span class="string"> NUL </span>|</div><div class="line">+------------+--------------+-------------+--------------+------------+------------+--------------+----------------+-----------------+-----------------+-----+</div><div class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> 0:MAC        </span>|<span class="string"> 12         </span>|<span class="string"> VARCHAR    </span>|<span class="string"> 12           </span>|<span class="string"> null           </span>|<span class="string"> null            </span>|<span class="string"> null            </span>|<span class="string"> 1   </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> 0:TIME       </span>|<span class="string"> 3          </span>|<span class="string"> DECIMAL    </span>|<span class="string"> null         </span>|<span class="string"> null           </span>|<span class="string"> null            </span>|<span class="string"> null            </span>|<span class="string"> 1   </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> :ID          </span>|<span class="string"> 1          </span>|<span class="string"> CHAR       </span>|<span class="string"> 26           </span>|<span class="string"> null           </span>|<span class="string"> null            </span>|<span class="string"> null            </span>|<span class="string"> 0   </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> 0:CELL       </span>|<span class="string"> 1          </span>|<span class="string"> CHAR       </span>|<span class="string"> 4            </span>|<span class="string"> null           </span>|<span class="string"> null            </span>|<span class="string"> null            </span>|<span class="string"> 1   </span>|</div><div class="line">+------------+--------------+-------------+--------------+------------+------------+--------------+----------------+-----------------+-----------------+-----+</div></pre></td></tr></table></figure>
<p>注意，Phoenix把原来的TimeStamp类型的时间变成了Decimal，应该是用整数的时间戳来表示时间了，这样运算起来简单！</p>
<p>接下来看一下该表的主键构成<code>!primarykeys bigjoy.mac_idx</code>，结果如下。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+-+</div><div class="line">|<span class="string"> TABLE_CAT  </span>|<span class="string"> TABLE_SCHEM  </span>|<span class="string"> TABLE_NAME  </span>|<span class="string"> COLUMN_NAME  </span>|<span class="string"> KEY_SEQ  </span>|<span class="string"> PK_NAME  </span>|<span class="string"> ASC_OR_DESC  </span>|<span class="string"> DATA_TYPE  </span>|<span class="string"> TYPE_NAME  </span>|<span class="string"> COLUMN_SIZE  </span>|<span class="string"> </span>|</div><div class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+-+</div><div class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> 0:MAC        </span>|<span class="string"> 1        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 12         </span>|<span class="string"> VARCHAR    </span>|<span class="string"> 12           </span>|<span class="string"> </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> 0:TIME       </span>|<span class="string"> 2        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 3          </span>|<span class="string"> DECIMAL    </span>|<span class="string"> null         </span>|<span class="string"> </span>|</div><div class="line">|<span class="string">            </span>|<span class="string"> BIGJOY       </span>|<span class="string"> MAC_IDX     </span>|<span class="string"> :ID          </span>|<span class="string"> 3        </span>|<span class="string">          </span>|<span class="string"> A            </span>|<span class="string"> 1          </span>|<span class="string"> CHAR       </span>|<span class="string"> 26           </span>|<span class="string"> </span>|</div><div class="line">+------------+--------------+-------------+--------------+----------+----------+--------------+------------+------------+--------------+-+</div></pre></td></tr></table></figure>
<p>可以看出，该表的主键是由0:MAC,0:TIME,:ID按顺序构成的，不过:ID是什么玩意儿，是原数据表的主键？为了验证猜想，请接着看(｡･ω･)</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0: jdbc:phoenix:localhost&gt; select * from bigjoy.mac<span class="emphasis">_idx limit 1;</span></div><div class="line"><span class="emphasis">+---------------+------------------+-----------------------------+---------+</span></div><div class="line"><span class="emphasis">|     0:MAC     |      0:TIME      |             :ID             | 0:CELL  |</span></div><div class="line"><span class="emphasis">+---------------+------------------+-----------------------------+---------+</span></div><div class="line"><span class="emphasis">| 000000000C00  | 1.396363024E+12  | 02281396334224000000000C00  | 228     |</span></div><div class="line"><span class="emphasis">+---------------+------------------+-----------------------------+---------+</span></div><div class="line"><span class="emphasis">1 row selected (0.123 seconds)</span></div></pre></td></tr></table></figure>
<p>这里也可以看出该索引表（是真的能被用户看到的表哈）包含了4个字段，前三个刚才讲了，是构成主键的组成部分，0:CELL很好理解，就是创建索引时include 后边的cell字段了。有:ID了不是，好的，去hbase shell中利用:ID查询一下数据！</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">hbase(main):038:0&gt; get 'BIGJOY.IMOS','02281396334224000000000C00'</div><div class="line">COLUMN                                   CELL                                                                                                                 </div><div class="line"> 0:CELL                                  timestamp=1470667019714, value=228        </div><div class="line"> 0:FLOOR                                 timestamp=1470667019714, value=20010    </div><div class="line"> 0:MAC                                   timestamp=1470667019714, value=000000000C00</div><div class="line"> 0:TIME                                  timestamp=1470667019714, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>01E<span class="symbol">\x</span>1D<span class="symbol">\x</span>B8<span class="symbol">\x</span>D6<span class="symbol">\x</span>80<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00</div><div class="line"> 0:X                                     timestamp=1470667019714, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>01<span class="symbol">\x</span>85<span class="symbol">\x</span>1D</div><div class="line"> 0:Y                                     timestamp=1470667019714, value=<span class="symbol">\x</span>80<span class="symbol">\x</span>01<span class="symbol">\x</span>82<span class="symbol">\x</span>E8</div><div class="line"> 0:_0                                    timestamp=1470667019714, value=x                                                                                     </div><div class="line">7 row(s) in 0.0260 seconds</div></pre></td></tr></table></figure>
<p>嗯，果不其然呀，<strong> :ID在索引表中参与构成主键，首先是保证了索引表主键的唯一性，因此Global Index是密集索引，另外，它对查询也是有帮助的</strong>，埋个伏笔，下面会提到！</p>
<h2 id="4-3-查询计划解读"><a href="#4-3-查询计划解读" class="headerlink" title="4.3 查询计划解读"></a>4.3 查询计划解读</h2><h3 id="4-3-1-Phoenix提供了Explain命令，解释执行计划，下面先看mac约束的对比吧，咣当咣当真是够长的-￣ˇ￣"><a href="#4-3-1-Phoenix提供了Explain命令，解释执行计划，下面先看mac约束的对比吧，咣当咣当真是够长的-￣ˇ￣" class="headerlink" title="4.3.1 Phoenix提供了Explain命令，解释执行计划，下面先看mac约束的对比吧，咣当咣当真是够长的(￣ˇ￣)"></a>4.3.1 Phoenix提供了Explain命令，解释执行计划，下面先看mac约束的对比吧，咣当咣当真是够长的(￣ˇ￣)</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0: jdbc:phoenix:localhost&gt; explain select cell from bigjoy.imos where mac = <span class="emphasis">'28E14CA61635'</span>;</div><div class="line"><span class="code">+-----------------------------------------------------------------------------------------------------------+</span></div><div class="line">|                                                   PLAN                                                    |</div><div class="line"><span class="code">+-----------------------------------------------------------------------------------------------------------+</span></div><div class="line">| CLIENT 1-CHUNK 0 ROWS 0 BYTES PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER BIGJOY.MAC<span class="emphasis">_IDX ['28E14CA61635']  |</span></div><div class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------------------------+</span></div><div class="line"><span class="emphasis">1 row selected (0.584 seconds)</span></div><div class="line"><span class="emphasis"></span></div><div class="line"><span class="emphasis">0: jdbc:phoenix:localhost&gt; explain select time from bigjoy.imos where mac = '28E14CA61635';</span></div><div class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------------------------+</span></div><div class="line"><span class="emphasis">|                                                   PLAN                                                    |</span></div><div class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------------------------+</span></div><div class="line"><span class="emphasis">| CLIENT 1-CHUNK 0 ROWS 0 BYTES PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER BIGJOY.MAC_</span>IDX [<span class="emphasis">'28E14CA61635'</span>]  |</div><div class="line">|     SERVER FILTER BY FIRST KEY ONLY                                                                       |</div><div class="line"><span class="code">+-----------------------------------------------------------------------------------------------------------+</span></div><div class="line">2 rows selected (0.038 seconds)</div><div class="line"></div><div class="line">0: jdbc:phoenix:localhost&gt; explain select * from bigjoy.imos where mac = <span class="emphasis">'28E14CA61635'</span>;</div><div class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></div><div class="line">|                                                 PLAN                                                 |</div><div class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></div><div class="line">| CLIENT 6-CHUNK 22526956 ROWS 1258291413 BYTES PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER BIGJOY.IMOS  |</div><div class="line">|     SERVER FILTER BY MAC = <span class="emphasis">'28E14CA61635'</span>                                                            |</div><div class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></div><div class="line">2 rows selected (0.038 seconds)</div><div class="line"></div><div class="line">0: jdbc:phoenix:localhost&gt; explain select * from bigjoy.imos where mac = <span class="emphasis">'28E14CA61635'</span>;</div><div class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></div><div class="line">|                                                 PLAN                                                 |</div><div class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></div><div class="line">| CLIENT 6-CHUNK 22526956 ROWS 1258291413 BYTES PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER BIGJOY.IMOS  |</div><div class="line">|     SERVER FILTER BY MAC = <span class="emphasis">'28E14CA61635'</span>                                                            |</div><div class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></div><div class="line">2 rows selected (0.036 seconds)</div></pre></td></tr></table></figure>
<p>看到这里就明白了吧，当查询cell字段的时候，是直接去索引表了提取出了cell的值；但当包含了创建索引表时没有提供的字段的时候，Phoenix就是回到原数据表进行全表扫描了，不过是最终在服务器端进行了Filter过滤而已，关于为什么使用了Filter还是进行的全表扫描哦，可以参见<a href="http://dequn.github.io/2016/08/24/right-way-to-use-hbase-rowfilter_and_accelerate_hbase_query/">HBase RowFilter 的使用误区及如何加快 HBase 查询速度</a>！</p>
<h3 id="4-3-2-那么接下来看一下time约束的索引查询计划！"><a href="#4-3-2-那么接下来看一下time约束的索引查询计划！" class="headerlink" title="4.3.2 那么接下来看一下time约束的索引查询计划！"></a>4.3.2 那么接下来看一下time约束的索引查询计划！</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0: jdbc:phoenix:localhost&gt; explain select cell from bigjoy.imos where time = to<span class="emphasis">_date('2014-04-01 20:39:42.000');</span></div><div class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------+</span></div><div class="line"><span class="emphasis">|                                          PLAN                                           |</span></div><div class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------+</span></div><div class="line"><span class="emphasis">| CLIENT 4-CHUNK 0 ROWS 0 BYTES PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER BIGJOY.MAC_</span>IDX  |</div><div class="line">|     SERVER FILTER BY TO<span class="emphasis">_TIMESTAMP("TIME") = TIMESTAMP '2014-04-01 20:39:42.000'         |</span></div><div class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------+</span></div><div class="line"><span class="emphasis">2 rows selected (0.062 seconds)</span></div><div class="line"><span class="emphasis"></span></div><div class="line"><span class="emphasis">0: jdbc:phoenix:localhost&gt; explain select * from bigjoy.imos where time = to_</span>date(<span class="emphasis">'2014-04-01 20:39:42.000'</span>);</div><div class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></div><div class="line">|                                                 PLAN                                                 |</div><div class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></div><div class="line">| CLIENT 6-CHUNK 22526956 ROWS 1258291413 BYTES PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER BIGJOY.IMOS  |</div><div class="line">|     SERVER FILTER BY TIME = TIMESTAMP <span class="emphasis">'2014-04-01 20:39:42.000'</span>                                      |</div><div class="line"><span class="code">+------------------------------------------------------------------------------------------------------+</span></div><div class="line">2 rows selected (0.039 seconds)</div></pre></td></tr></table></figure>
<p>可以看出，仅有time约束的时候，不管进行的是cell查询还是包含其他字段的查询，都是进行全表扫描，不过一个是扫描索引表，一个是原数据表罢了！所以效率没有提升</p>
<h3 id="4-3-3-最后，同时进行mac和time约束查询，从时间对比上就可以猜想是进行了索引表的查询，当然，查询目标不能包含创建索引表时未包含的字段-事实也是如此。"><a href="#4-3-3-最后，同时进行mac和time约束查询，从时间对比上就可以猜想是进行了索引表的查询，当然，查询目标不能包含创建索引表时未包含的字段-事实也是如此。" class="headerlink" title="4.3.3 最后，同时进行mac和time约束查询，从时间对比上就可以猜想是进行了索引表的查询，当然，查询目标不能包含创建索引表时未包含的字段,事实也是如此。"></a>4.3.3 最后，同时进行mac和time约束查询，从时间对比上就可以猜想是进行了索引表的查询，当然，查询目标不能包含创建索引表时未包含的字段,事实也是如此。</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0: jdbc:phoenix:localhost&gt; explain select cell from bigjoy.imos where mac = <span class="emphasis">'28E14CA61635'</span> and time = to<span class="emphasis">_date('2014-04-01 20:39:42.000');</span></div><div class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------------------------------------------+</span></div><div class="line"><span class="emphasis">|                                                            PLAN                                                             |</span></div><div class="line"><span class="emphasis">+-----------------------------------------------------------------------------------------------------------------------------+</span></div><div class="line"><span class="emphasis">| CLIENT 1-CHUNK 0 ROWS 0 BYTES PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER BIGJOY.MAC_</span>IDX [<span class="emphasis">'28E14CA61635'</span>,1,396,384,782,000]  |</div><div class="line"><span class="code">+-----------------------------------------------------------------------------------------------------------------------------+</span></div><div class="line">1 row selected (0.049 seconds)</div><div class="line"></div><div class="line">0: jdbc:phoenix:localhost&gt; explain select * from bigjoy.imos where mac = <span class="emphasis">'28E14CA61635'</span> and time = to<span class="emphasis">_date('2014-04-01 20:39:42.000');</span></div><div class="line"><span class="emphasis">+------------------------------------------------------------------------------------------------------+</span></div><div class="line"><span class="emphasis">|                                                 PLAN                                                 |</span></div><div class="line"><span class="emphasis">+------------------------------------------------------------------------------------------------------+</span></div><div class="line"><span class="emphasis">| CLIENT 6-CHUNK 22526956 ROWS 1258291413 BYTES PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER BIGJOY.IMOS  |</span></div><div class="line"><span class="emphasis">|     SERVER FILTER BY (MAC = '28E14CA61635' AND TIME = TIMESTAMP '2014-04-01 20:39:42.000')           |</span></div><div class="line"><span class="emphasis">+------------------------------------------------------------------------------------------------------+</span></div><div class="line"><span class="emphasis">2 rows selected (0.034 seconds)</span></div></pre></td></tr></table></figure>
<h3 id="4-3-4-还有，看一下官方给出的Index-Hint方法，可以看出，-ID参与索引表的构成，也是为了实现这一个目的，先查索引表，在根据ID查原表！"><a href="#4-3-4-还有，看一下官方给出的Index-Hint方法，可以看出，-ID参与索引表的构成，也是为了实现这一个目的，先查索引表，在根据ID查原表！" class="headerlink" title="4.3.4 还有，看一下官方给出的Index Hint方法，可以看出，:ID参与索引表的构成，也是为了实现这一个目的，先查索引表，在根据ID查原表！"></a>4.3.4 还有，看一下官方给出的<a href="https://phoenix.apache.org/secondary_indexing.html" target="_blank" rel="external">Index Hint</a>方法，可以看出，:ID参与索引表的构成，也是为了实现这一个目的，先查索引表，在根据ID查原表！</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">0: jdbc:phoenix:localhost&gt; explain select /<span class="strong">*+ INDEX(bigjoy.imos mac_idx) *</span>/ * from bigjoy.imos where mac = <span class="emphasis">'28E14CA61635'</span>;</div><div class="line"><span class="code">+-------------------------------------------------------------------------------------------------------------------+</span></div><div class="line">|                                                       PLAN                                                        |</div><div class="line"><span class="code">+-------------------------------------------------------------------------------------------------------------------+</span></div><div class="line">| CLIENT 6-CHUNK 22526956 ROWS 1258291413 BYTES PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER BIGJOY.IMOS               |</div><div class="line">|     SKIP-SCAN-JOIN TABLE 0                                                                                        |</div><div class="line">|         CLIENT 1-CHUNK 0 ROWS 0 BYTES PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER BIGJOY.MAC<span class="emphasis">_IDX ['28E14CA61635']  |</span></div><div class="line"><span class="emphasis">|             SERVER FILTER BY FIRST KEY ONLY                                                                       |</span></div><div class="line"><span class="emphasis">|     DYNAMIC SERVER FILTER BY "BIGJOY.IMOS.ID" IN ($25.$27)                                                        |</span></div><div class="line"><span class="emphasis">+-------------------------------------------------------------------------------------------------------------------+</span></div><div class="line"><span class="emphasis">5 rows selected (0.041 seconds)</span></div></pre></td></tr></table></figure>
<h2 id="4-4-什么时候索引发挥作用，什么时候索引不发挥作用（都是指全局索引）？"><a href="#4-4-什么时候索引发挥作用，什么时候索引不发挥作用（都是指全局索引）？" class="headerlink" title="4.4 什么时候索引发挥作用，什么时候索引不发挥作用（都是指全局索引）？"></a>4.4 什么时候索引发挥作用，什么时候索引不发挥作用（都是指全局索引）？</h2><p>通过以上几个例子对比和查询计划分析，并且结合索引表的主键构成(谁让HBase有且只有主键的字典序索引呢)，查询字段只包括创建索引时的字段并且约束条件中包括<strong>构成索引表主键的第一个字段</strong>时，索引表时发挥作用的，其他情况下全局索引不能加快查询速度，这也和官方文档给出的解释是一样样的！</p>
<p>文中使用的例子只包括两个字段约束，如果有三个字段呢,结果又如何？如：(field1, field2, field3)，可以猜想使用field1, field1 + field2, field1 + field3, field1 + field2 + field3进行约束查询，该索引表才会发挥作用！感兴趣的可以去尝试一下！</p>
<p>为什么是这样？还是因为HBase只有字典序的主键索引啊，如果不使用field1进行约束，那么将不能确定索引表中行健的扫描范围，所以仍然要进行全局扫描（索引表或者原数据表），同理，如果查询结果一下，使用field1 + field2 约束理论上是要优于 field1 + field3的，不过既然查询结果都一样了，那么field2 和 field3应该是没有约束作用的，除非field3 == field3。感兴趣的也可以尝试一下！</p>
<h1 id="5总结"><a href="#5总结" class="headerlink" title="5总结"></a>5总结</h1><ul>
<li>Global Index 是密集索引；</li>
<li>要想索引发挥作用，必须包含创建索引是的第一个字段进行约束；</li>
<li>索引字段从前到后，约束越多，查询效率越高（中间不能跳过索引字段），这样可以快速缩小扫描范围；</li>
<li>查询一定不能有索引字段之外的其他字段，不然得去扫描原表；</li>
<li>不满足上一条结论的要求时，官方文档提供的<a href="https://phoenix.apache.org/secondary_indexing.html" target="_blank" rel="external">Index Hint</a>方法，是根据索引表得到原表主键，再去原表中根据主键查询其他字段！</li>
</ul>
<p>Local Index 就留着下一次写吧！</p>
]]></content>
    
    <summary type="html">
    
      初步对 Phoenix 二级索引中的 Global Index 认识一下,它是通过完全新建的一个数据表来作为索引的，因此构建索引是必须包含要查询的字段，约束字段是构成索引表行健的必要条件，其他查询列必须包含在 INCLUDE 里边！
    
    </summary>
    
      <category term="Phoenix" scheme="http://dequn.github.io/categories/Phoenix/"/>
    
    
      <category term="HBase" scheme="http://dequn.github.io/tags/HBase/"/>
    
      <category term="Secondary Index" scheme="http://dequn.github.io/tags/Secondary-Index/"/>
    
      <category term="Phoenix" scheme="http://dequn.github.io/tags/Phoenix/"/>
    
      <category term="Global Index" scheme="http://dequn.github.io/tags/Global-Index/"/>
    
  </entry>
  
  <entry>
    <title>HBase 二级索引实现原理</title>
    <link href="http://dequn.github.io/2016/08/29/HBase-Secondary-Index-Theory/"/>
    <id>http://dequn.github.io/2016/08/29/HBase-Secondary-Index-Theory/</id>
    <published>2016-08-29T13:41:53.000Z</published>
    <updated>2017-08-24T12:49:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中要用到HBase的二级索引，所谓的二级索引，就是对除了RowKey之外的其他列进行索引，因为HBase本身只支持Rowkey的索引，如果要以其他列的数据为约束进行查询，就需要我们做一点点小工作了，即建立二级索引。</p>
<p>在HBase中建立二级索引的思想就是：<strong> 新建一个数据表即索引表，以需要建立索引的列为主键，把其他需要查询的数据存储在该表中，或者存储对应的原数据表主键，最后需要使用此索引的时候，就来到这个表里边进行查询原数据或者主键，如果是主键的话再回到原表中根据主键查询，最终得到结果 </strong>。该索引表也可以是密集的，也可以是稀疏的，索引表中存储原始数据还是原主键就看个人需求，平衡空间和时间上的考量。</p>
<p>华为曾经在2013年开源了一个项目<a href="https://github.com/Huawei-Hadoop/hindex" target="_blank" rel="external">Huawei-hadoop/index</a>,不过最近两年都没有更新过了，应该是被停掉了，因为现在有很多例如Phoenix , Pig, Hive等可以利用，没必要自己花精力去维护，但是当时提出该索引的时候可是引起了不小的轰动，同时有两篇PPT，可以帮助理解二级索引的工作原理，有兴趣的读者可以下载研究，总好的过看我写的这些字！</p>
<ul>
<li><a href="http://obqjd695a.bkt.clouddn.com/HBase_Secondary_Index.pdf" target="_blank" rel="external">HBase – Secondary Index.pdf</a></li>
<li><a href="http://obqjd695a.bkt.clouddn.com/HuaWei_Secondary_Index_of_HBase.pdf" target="_blank" rel="external">HuaWei_Secondary_Index_of_HBase.pdf</a></li>
</ul>
<p>下一篇写Phoenix 的二级索引！</p>
]]></content>
    
    <summary type="html">
    
      简单讲一下关于 HBase 二级索引的基本原理
    
    </summary>
    
      <category term="HBase" scheme="http://dequn.github.io/categories/HBase/"/>
    
    
      <category term="HBase" scheme="http://dequn.github.io/tags/HBase/"/>
    
      <category term="Secondary Index" scheme="http://dequn.github.io/tags/Secondary-Index/"/>
    
      <category term="hindex" scheme="http://dequn.github.io/tags/hindex/"/>
    
  </entry>
  
  <entry>
    <title>HBase RowFilter 的使用误区及如何加快 HBase 查询速度</title>
    <link href="http://dequn.github.io/2016/08/24/right-way-to-use-hbase-rowfilter_and_accelerate_hbase_query/"/>
    <id>http://dequn.github.io/2016/08/24/right-way-to-use-hbase-rowfilter_and_accelerate_hbase_query/</id>
    <published>2016-08-24T13:27:39.000Z</published>
    <updated>2017-08-24T14:58:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做实验的时候，对比一下 HBase 与 PostgreSQL的查询速度，发现 PostgreSQL 只需要300毫秒左后的查询放在 HBase 中竟然需要5秒左右，这效率也差太多了吧！也排除了是数据库连接等操作的耗时，这就需要深入的找一下原因了。原 HBase 代码如下,设置了两个 PrefixFilter 用来过滤，目的是找到某一个 mac 从 beginTime 到 endTime 的数据：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">FilterList fl = <span class="keyword">new</span> <span class="type">FilterList</span>(FilterList.Operator.MUST_PASS_ALL);<span class="comment">// must between beginTime and endTime</span></div><div class="line">BinaryPrefixComparator comp = <span class="keyword">new</span> <span class="type">BinaryPrefixComparator</span>(Bytes.toBytes(<span class="keyword">String</span>.format(<span class="string">"%s%d"</span>, mac, beginTimeStamp)));</div><div class="line">RowFilter filter = <span class="keyword">new</span> <span class="type">RowFilter</span>(CompareFilter.CompareOp.GREATER_OR_EQUAL, comp);</div><div class="line">BinaryPrefixComparator comp2 = <span class="keyword">new</span> <span class="type">BinaryPrefixComparator</span>(Bytes.toBytes(<span class="keyword">String</span>.format(<span class="string">"%s%d"</span>, mac, endTimeStamp)));</div><div class="line">RowFilter filter2 = <span class="keyword">new</span> <span class="type">RowFilter</span>(CompareFilter.CompareOp.LESS_OR_EQUAL, comp2);</div><div class="line">fl.addFilter(filter);</div><div class="line">fl.addFilter(filter2);</div><div class="line">Scan scan = <span class="keyword">new</span> <span class="type">Scan</span>();</div><div class="line">scan.setFilter(fl);</div><div class="line"><span class="comment">//....other colde here</span></div></pre></td></tr></table></figure>
<p>owkey 不是字典有序有索引的吗，查找两个前缀限制夹出来的行应该很快的啊，不然 Rowkey 索引是做什么用的？一步一步找原因，需要搞清楚 Filter 到底是做什么用的！经过一番搜索，在 <a href="http://stackoverflow.com/questions/10942638/should-i-user-prefixfilter-or-rowkey-range-scan-in-hbase" title="Should I user prefixfilter or rowkey range scan in hbase" target="_blank" rel="external">StackOverFlow</a> [1] 上找到一个回答，意思是 Filter 是非常慢的，要进行全表扫描的，如果想要快速的查询数据，得设置 STARTROW 和 ENDROW，原文:</p>
<blockquote>
<p>HBase filters - even row filters - are really slow, since in most cases these do a complete table scan, and then filter on those results. Have a look at this discussion: <a href="http://grokbase.com/p/hbase/user/115cg0d7jh/very-slow-scan-performance-using-filters" target="_blank" rel="external">http://grokbase.com/p/hbase/user/115cg0d7jh/very-slow-scan-performance-using-filters</a></p>
<p>Row key range scans however, are indeed much faster - they do the equivalent of a filtered table scan. This is because the row keys are stored in sorted order (this is one of the basic guarantees of HBase, which is a BigTable-like solution), so the range scans on row keys are very fast. More explanation here: <a href="http://www.quora.com/How-feasible-is-real-time-querying-on-HBase-Can-it-be-achieved-through-a-programming-language-such-as-Python-PHP-or-JSP" target="_blank" rel="external">http://www.quora.com/How-feasible-is-real-time-querying-on-HBase-Can-it-be-achieved-through-a-programming-language-such-as-Python-PHP-or-JSP</a></p>
<p>UPDATE: turns out that PrefixFilter does do a full table scan until it passes the prefix used in the filter (if it finds it). The recommendation for fast performance using a PrefixFilter seems to be to specify a start_row parameter in addition to the PrefixFilter. See related 2013 discussion on the hbase-user mailing list.</p>
</blockquote>
<p>另外找到一个比较明确的<a href="https://www.ibm.com/support/knowledgecenter/SSPT3X_2.1.2/com.ibm.swg.im.infosphere.biginsights.analyze.doc/doc/r0057923.html" title="IBM Knowledge Center - HBase Module" target="_blank" rel="external">解释如下</a> [2]：</p>
<blockquote>
<p>Filters push row selection criteria out to the HBase region servers for processing so that rows can be filtered remotely and in parallel (when more than one region server is involved). Using these functions helps you to avoid sending rows to the client that are not needed.</p>
</blockquote>
<p>好吧，原来是跟我理解的有偏差，这里边的 Filter 作用并不能直接用来索引到要检索的数据，从描述中可以看出，<strong> 只使用 Filter 的话，还是要进行全表扫描，只是符合 Filter 的数据才会被发送到 Client </strong>，从 <a href="https://hbase.apache.org/apidocs/org/apache/hadoop/hbase/filter/RowFilter.html" title="Class RowFilter" target="_blank" rel="external">HBase Java API DOC</a> [3]也可以看出：</p>
<blockquote>
<p>If an already known row range needs to be scanned, use CellScanner start and stop rows directly rather than a filter.</p>
</blockquote>
<p>原因找到了，就按照说明添加一个开始行键和结束行健吧,行健根据自己的需要进行设置！</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//....</span></div><div class="line">scan.setStartRow(Bytes.toBytes(<span class="keyword">String</span>.<span class="keyword">format</span>(<span class="string">"%s%d0000"</span>, mac, beginTimeStamp)));</div><div class="line">scan.setStopRow(Bytes.toBytes(<span class="keyword">String</span>.<span class="keyword">format</span>(<span class="string">"%s%d0300"</span>, mac, endTimeStamp)));</div><div class="line"><span class="comment">//...</span></div></pre></td></tr></table></figure>
<p>经过改进，同样的查询时间就降至毫秒的数量级了。另外还有一个 WhileMatchFilter 的 Warpper 类，作用是自动结束扫描，需要的朋友可以使用一下，可以参见<a href="https://www.safaribooksonline.com/library/view/hbase-the-definitive/9781449314682/ch04.html" title="Very slow Scan performance using Filters" target="_blank" rel="external">[4]</a>里边的示例，就知道如何使用了。</p>
<p>总结 ：最大的误区是错误的理解了 Filter 的作用，认为过滤在前，扫描在后，实际过程却是<strong>扫描 -&gt; 过滤</strong>，所以如果要利用 Rowkey 本身的索引，除了 get 指定行健之外，scan 必须指定开始行健和结束行健，不然进行的全部是全表扫描,无论 RowFilter 是 RegexFilter 还是 PrefixFilter 还是其他！</p>
<p>参考：</p>
<ol>
<li><a href="http://stackoverflow.com/questions/10942638/should-i-user-prefixfilter-or-rowkey-range-scan-in-hbase" title="Should I user prefixfilter or rowkey range scan in hbase" target="_blank" rel="external">Should I user prefixfilter or rowkey range scan in hbase</a></li>
<li><a href="https://www.ibm.com/support/knowledgecenter/SSPT3X_2.1.2/com.ibm.swg.im.infosphere.biginsights.analyze.doc/doc/r0057923.html" title="IBM Knowledge Center - HBase Module" target="_blank" rel="external">IBM Knowledge Center - HBase Module</a></li>
<li><a href="https://hbase.apache.org/apidocs/org/apache/hadoop/hbase/filter/RowFilter.html" title="Class RowFilter" target="_blank" rel="external">Class RowFilter</a></li>
<li><a href="https://www.safaribooksonline.com/library/view/hbase-the-definitive/9781449314682/ch04.html" title="Very slow Scan performance using Filters" target="_blank" rel="external">Very slow Scan performance using Filters</a></li>
<li><a href="http://grokbase.com/t/hbase/user/118bft6n5v/why-rowfilter-plus-binaryprefixcomparator-solution-is-so-slow" title="[HBase-user] Why RowFilter plus BinaryPrefixComparator solution is so slow" target="_blank" rel="external">[HBase-user] Why RowFilter plus BinaryPrefixComparator solution is so slow</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      RowFilter 进行的是扫描结果的过滤，所以要加快查询速度，必须得设置 Rowkey 的范围！
    
    </summary>
    
      <category term="HBase" scheme="http://dequn.github.io/categories/HBase/"/>
    
    
      <category term="HBase" scheme="http://dequn.github.io/tags/HBase/"/>
    
      <category term="RowFilter" scheme="http://dequn.github.io/tags/RowFilter/"/>
    
  </entry>
  
  <entry>
    <title>HBase 找不到提示已存在的数据表</title>
    <link href="http://dequn.github.io/2016/07/03/hbase_cannot_find_existing_table/"/>
    <id>http://dequn.github.io/2016/07/03/hbase_cannot_find_existing_table/</id>
    <published>2016-07-03T12:54:20.000Z</published>
    <updated>2017-08-24T12:49:03.000Z</updated>
    
    <content type="html"><![CDATA[<p> 今天在使用 HBase 创建数据表的时候，提示数据表已存在，但使用<code>list</code>命令又看不到该表，也无法 drop 掉。过程如下</p>
 <figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hbase(main)<span class="symbol">:018</span><span class="symbol">:0</span>&gt;create 'pois','data</div><div class="line">Err<span class="symbol">or:</span> Table already exis<span class="symbol">ts:</span> pois!</div><div class="line">hbase(main)<span class="symbol">:019</span><span class="symbol">:0</span>&gt;list</div><div class="line">TABLE</div><div class="line"><span class="number">0</span> <span class="built_in">row</span>(s) in <span class="number">8.0245</span> seconds</div><div class="line"></div><div class="line">=&gt; []</div></pre></td></tr></table></figure>
<p> 可以看出，HBase 错误地判断了，经过一番 Google，找到了几个推荐的解决方案：</p>
<p> ## <a href="http://stackoverflow.com/questions/10586246/hbase-cannot-find-an-existing-table" target="_blank" rel="external">方案1:hbase cannot find an existing table</a></p>
<blockquote>
<p>1) Delete all entries in the .META table for this table manually, and</p>
<p>2) Delete the directory corresponding to this table from HDFS</p>
</blockquote>
<h2 id="方案2-Killing-the-HBase-zombie-table"><a href="#方案2-Killing-the-HBase-zombie-table" class="headerlink" title="方案2:Killing the HBase zombie table"></a><a href="http://arnon.me/2013/01/killing-hbase-zombie-table/" target="_blank" rel="external">方案2:Killing the HBase zombie table</a></h2><blockquote>
<p>1) use ** hbase hbck ** to see health-checkk</p>
<p>2) look at .META table</p>
<p>3) clear zookeeper’s  cache</p>
</blockquote>
<hr>
<h2 id="方案3-最简单"><a href="#方案3-最简单" class="headerlink" title="方案3:最简单"></a>方案3:最简单</h2><p>这两种方案对初学者来说都有一定的难度，并且容易误操作儿影响到其他的数据表，找一个简单的方法就很有必要了，那么找一找 HBase 自带的命令吧，经过试验，发现有一个命令`hbase-clean’，尝试运行，如下，</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">hbase</span><span class="literal">-</span><span class="comment">cleanup</span><span class="string">.</span><span class="comment">sh</span> </div><div class="line"></div><div class="line"><span class="comment">Usage:</span> <span class="comment">hbase</span><span class="literal">-</span><span class="comment">cleanup</span><span class="string">.</span><span class="comment">sh</span> <span class="comment">(</span><span class="literal">-</span><span class="literal">-</span><span class="comment">cleanZk|</span><span class="literal">-</span><span class="literal">-</span><span class="comment">cleanHdfs|</span><span class="literal">-</span><span class="literal">-</span><span class="comment">cleanAll|</span><span class="literal">-</span><span class="literal">-</span><span class="comment">cleanAcls)</span></div></pre></td></tr></table></figure>
<p>从提示可以看出有三种模式，区别如下</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">-cleanZk   cleans hbase related data from zookeeper.</span></div><div class="line"><span class="ruby">--cleanHdfs cleans hbase related data from hdfs.</span></div><div class="line"><span class="ruby">--cleanAll  cleans hbase related data from both zookeeper <span class="keyword">and</span> hdfs.</span></div></pre></td></tr></table></figure>
<p>想必接下来就知道如何处理了吧！这种方式要简单的多，适合初学用户！</p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<a href="http://www.cloudera.com/documentation/enterprise/latest/topics/cdh_ig_hbase_tools.html#concept_wpc_nqv_hv" target="_blank" rel="external">Using HBase Command-Line Utilities</a></p>
<p>2.<a href="http://arnon.me/2013/01/killing-hbase-zombie-table/" target="_blank" rel="external">Killing the HBase zombie table</a></p>
<p>3.<a href="http://stackoverflow.com/questions/10586246/hbase-cannot-find-an-existing-table" target="_blank" rel="external">hbase cannot find an existing table</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 今天在使用 HBase 创建数据表的时候，提示数据表已存在，但使用&lt;code&gt;list&lt;/code&gt;命令又看不到该表，也无法 drop 掉。过程如下&lt;/p&gt;
 &lt;figure class=&quot;highlight excel&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
    
    </summary>
    
      <category term="HBase" scheme="http://dequn.github.io/categories/HBase/"/>
    
    
      <category term="HBase" scheme="http://dequn.github.io/tags/HBase/"/>
    
      <category term="Zookeeper" scheme="http://dequn.github.io/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>HBase 协处理器之 EndPoint 简单示例</title>
    <link href="http://dequn.github.io/2016/05/14/hbase-coprocessor-endpoint-helloworld/"/>
    <id>http://dequn.github.io/2016/05/14/hbase-coprocessor-endpoint-helloworld/</id>
    <published>2016-05-14T06:55:47.000Z</published>
    <updated>2017-08-24T12:49:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于 HBase 协处理器 Coprocessor 是什么，作用是什么，就不在多说，很多博、文档都有相关说明，Coprocessor 分为两类，一类是 Observer,另一类是 Endpoint,在看来很多博客后，发现都是比较老的一些内容，在学习过程中有不少疑惑，所以总结下来。此文只是针对 EndPoint 给出一个流程。</p>
<h1 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h1><blockquote>
<p>Hbase: v1.1.2<br>JDK: v1.8<br>Maven: v3.3.9<br>protobuf: v2.6.1</p>
</blockquote>
<p>EndPoint 的定义在 Hbase 0.96后采用的是 Google 的开源protobuf RPC, 因此本文的说明只适用于高于 0.96 的 HBase 版本，老的版本请看对应的教程。</p>
<h1 id="Mac-下-Protobuf-安装"><a href="#Mac-下-Protobuf-安装" class="headerlink" title="Mac 下 Protobuf 安装"></a>Mac 下 Protobuf 安装</h1><p>采用 HomeBrew 即可轻松安装，命令</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">home <span class="keyword">brew </span><span class="keyword">install </span>protobuf</div></pre></td></tr></table></figure>
<h1 id="定义-RPC"><a href="#定义-RPC" class="headerlink" title="定义 RPC"></a>定义 RPC</h1><p>新建一个 *.proto 文件，键入以下内容,本文的目的是实现一个建立关于 Mac 列的索引，简单起见，直接返回值 buildOk = 1 表示建立成功。关于 protobuf 的更多定义可以参见官方文档<a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="external">https://developers.google.com/protocol-buffers/</a>.</p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">option</span> java_package = <span class="string">"lreis.bigdata.indoor.index.coprocessor"</span>;</div><div class="line"></div><div class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">"BuildMacIndex"</span>;</div><div class="line"><span class="keyword">option</span> java_generic_services = <span class="literal">true</span>;</div><div class="line"><span class="keyword">option</span> optimize_for = SPEED;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">message</span> <span class="title">buildMacIndexRequest</span></span>&#123;</div><div class="line"><span class="built_in">int64</span> onlyForPresent ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">message</span> <span class="title">buildMacIndexResponse</span> </span>&#123;</div><div class="line"> <span class="keyword">optional</span> <span class="built_in">int64</span> buildOk = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">service</span> <span class="title">BuildMacIndexService</span> </span>&#123;</div><div class="line"> <span class="function"><span class="keyword">rpc</span> buildMacIndex(buildMacIndexRequest)</span></div><div class="line"><span class="function">  <span class="keyword">returns</span>(buildMacIndexResponse)</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>定以好之后就可以编译该文件了， 运行此命令会生成一个 BuildMacIndex 的类。</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protoc <span class="comment">--java_out = your_project_dest your.proto</span></div></pre></td></tr></table></figure>
<h1 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h1><p>由于本人使用 Maven 建立的工程，所以要完成EndPoint 的开发，需要加入以下一些依赖才可以。** 需要注意的是编译目标的版本是1.6，否则Hbase 不能正确加载生成的 Endpoint. **</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hbase.version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">hbase.version</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;hbase.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;hbase.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></div><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h1 id="EndPoint-实现"><a href="#EndPoint-实现" class="headerlink" title="EndPoint 实现"></a>EndPoint 实现</h1><p>** EndPoint 必须要继承自 protobuf 中定义的 BuildMacIndexService 类，并且实现 CoprocessorService 和 Coprocessor 接口，实现其中的四个方法即可。**</p>
<ul>
<li><p>start() 方法<br>协处理器在 Region 打开的时候被 RegionServer 自动加载，并会调用器 start 接口，完成初始化工作。一般的该接口函数中仅仅需要将协处理器的运行上下文环境变量 CoprocessorEnviorment保存到本地即可。</p>
</li>
<li><p>stop()方法<br>Coprocessor 接口还定义了 stop() 接口函数。该函数在 Region 被关闭时调用，用来进行协处理器的清理工作。在本文中，我们没有任何清理工作，因此该方法一般不需要做什么。</p>
</li>
<li><p>getService()方法<br>oprocessorService 接口。该接口仅仅定义了一个接口函数 getService()。我们仅需要将本实例返回即可。HBase 的 RegionServer 在接受到客户端的调用请求时，将调用该接口获取实现了 RPC Service 的实例，因此本函数一般情况下就是返回自身实例即可。</p>
</li>
<li><p>当 Endpoint 类继承自 RPC Service 类的时候，会需要实现 proto 文件中定义buildMacIndex方法,这也是该 EndPoint 作用代码实现的方法，并且最后完成的Response 必须满足 proto 中定义的类型. 简单起见，只简单返回一个值。</p>
</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> buildMacIndex(RpcController controller, BuildMacIndex.buildMacIndexRequest request, RpcCallback&lt;BuildMacIndex.buildMacIndexResponse&gt; <span class="keyword">done</span>) &#123;</div><div class="line"></div><div class="line"></div><div class="line">    Long l = request.getOnlyForPresent();<span class="comment">// proto 中 request 里边定义xxx,就用 getXxx 得到调用时候传过来的参数</span></div><div class="line"></div><div class="line">    <span class="comment">// .... 其他逻辑</span></div><div class="line"></div><div class="line">    BuildMacIndex.buildMacIndexResponse.Builder resBuilder = BuildMacIndex.buildMacIndexResponse.newBuilder();</div><div class="line"></div><div class="line">    resBuilder.setBuildOK(<span class="number">100</span>L); <span class="comment">//返回 xxx，就用 SetXxx 进行赋值</span></div><div class="line"></div><div class="line">    <span class="keyword">done</span>.run(resBuilder.build());<span class="comment">//完成</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就完成了一个 EndPoint 的定义及实现，运行 mvn clean compile 就可以打包成 jar 文件了。</p>
<h1 id="JAR文件上传及加载到-Table"><a href="#JAR文件上传及加载到-Table" class="headerlink" title="JAR文件上传及加载到 Table"></a>JAR文件上传及加载到 Table</h1><p><strong>将编译的 jar 文件上传到 $HBASE_HOME/lib 目录，如果是完全分布式，每个节点都需要有哦。</strong></p>
<h2 id="配置文件全局加载-所有-Table-都有效"><a href="#配置文件全局加载-所有-Table-都有效" class="headerlink" title="配置文件全局加载(所有 Table 都有效)"></a>配置文件全局加载(所有 Table 都有效)</h2><p>编辑 hbase-site.xml, 添加以下内容，如果加载多个,用分号隔开每个类就行了，最后需要重启 HBase 集群。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt; &lt;name&gt;hbase<span class="selector-class">.coprocessor</span><span class="selector-class">.region</span><span class="selector-class">.classes</span>&lt;/name&gt; &lt;value&gt;lreis<span class="selector-class">.bigdata</span><span class="selector-class">.indoor</span><span class="selector-class">.index</span><span class="selector-class">.coprocessor</span><span class="selector-class">.server</span><span class="selector-class">.BuildMacIndexEndpoint</span>&lt;/value&gt; &lt;/property&gt;</div></pre></td></tr></table></figure>
<h2 id="命令行加载方式"><a href="#命令行加载方式" class="headerlink" title="命令行加载方式"></a>命令行加载方式</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'lreis.bigdata.indoor.index.coprocessor.server.BuildMacIndexEndpoint'</span> #记住，有引号的</div></pre></td></tr></table></figure>
<p>如果显示</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">=&gt; Ja<span class="symbol">va:</span><span class="symbol">:Lr</span>eisBigdataIndoorIndexCoprocessorServ<span class="symbol">er:</span><span class="symbol">:Bu</span>ildMacIndexEndpoint</div></pre></td></tr></table></figure>
<p>则说明加载成功，接着运行下面的命令</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter 'idx_mac', 'coprocessor' =&gt; '|lreis.bigdata.indoor.index.coprocessor.server.BuildMacIndexEndpoint|<span class="number">1001</span>|'</div></pre></td></tr></table></figure>
<p>如果显示如下，则说明修改表节定义成功</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Updating <span class="literal">all</span> regions <span class="keyword">with</span> the <span class="literal">new</span> schema<span class="params">...</span></div><div class="line"><span class="number">1</span>/<span class="number">1</span> regions updated.</div><div class="line">Done.</div><div class="line"><span class="number">0</span> row(s) <span class="keyword">in</span> <span class="number">2.3210</span> seconds</div></pre></td></tr></table></figure>
<ul>
<li>最后就可以在客户端或者 shell 的方式调用 Coprocessor 了， 简单给一个 Java API 的调用方式</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">conn = DbcFactory.getConnection().getConnection()<span class="comment">;</span></div><div class="line">Admin admin = conn.getAdmin()<span class="comment">;</span></div><div class="line">Table table = conn.getTable(TableName.valueOf(<span class="string">"idx_mac"</span>))<span class="comment">;</span></div><div class="line">final <span class="keyword">BuildMacIndex.buildMacIndexRequest </span>req = <span class="keyword">BuildMacIndex.buildMacIndexRequest.newBuilder().build();</span></div><div class="line"><span class="keyword"></span></div><div class="line"><span class="keyword">Map&lt;byte[], </span>Long&gt; tmpRet = table.coprocessorService(<span class="keyword">BuildMacIndex.BuildMacIndexService.class, </span>null, null, new <span class="keyword">Batch.Call&lt;BuildMacIndex.BuildMacIndexService, </span>Long&gt;() &#123;</div><div class="line">@Override</div><div class="line">public Long call(<span class="keyword">BuildMacIndex.BuildMacIndexService </span><span class="keyword">instance) </span>throws IOException &#123;</div><div class="line"></div><div class="line">ServerRpcController controller = new ServerRpcController()<span class="comment">;</span></div><div class="line"><span class="keyword">BlockingRpcCallback&lt;BuildMacIndex.buildMacIndexResponse&gt; </span>rpc = new <span class="keyword">BlockingRpcCallback&lt;BuildMacIndex.buildMacIndexResponse&gt;();</span></div><div class="line"><span class="keyword">instance.buildMacIndex(controller, </span>req, rpc)<span class="comment">;</span></div><div class="line"></div><div class="line"><span class="keyword">BuildMacIndex.buildMacIndexResponse </span>resp = rpc.get()<span class="comment">;</span></div><div class="line">return resp.getRowCount()<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">&#125;)<span class="comment">;</span></div><div class="line">long ret = <span class="number">0</span><span class="comment">;</span></div><div class="line">for (long l : tmpRet.values())</div><div class="line">ret += l<span class="comment">;</span></div><div class="line">System.out.println(<span class="string">"lines: "</span> + ret)<span class="comment">;</span></div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace()<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><p><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-hbase-coprocessor1/index.html" target="_blank" rel="external">HBase 协处理器编程详解第一部分：Server 端代码编写</a></p>
</li>
<li><p><a href="https://blogs.apache.org/hbase/entry/coprocessor_introduction" target="_blank" rel="external">Coprocessor Introduction : Apache HBase</a></p>
</li>
<li><p><a href="http://www.cockybook.com/?p=35" target="_blank" rel="external">hbase0.98 coprocessor Endpoint 之 HelloWorld</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 HBase 协处理器 Coprocessor 是什么，作用是什么，就不在多说，很多博、文档都有相关说明，Coprocessor 分为两类，一类是 Observer,另一类是 Endpoint,在看来很多博客后，发现都是比较老的一些内容，在学习过程中有不少疑惑，所以总结
    
    </summary>
    
      <category term="HBase" scheme="http://dequn.github.io/categories/HBase/"/>
    
    
      <category term="HBase" scheme="http://dequn.github.io/tags/HBase/"/>
    
      <category term="Endpoint" scheme="http://dequn.github.io/tags/Endpoint/"/>
    
  </entry>
  
  <entry>
    <title>java操作hbase报java.net.UnknownHostException错误的解决方案</title>
    <link href="http://dequn.github.io/2016/04/26/java-hbase-java-net-UnknownHostException-jie-jue-fang-an/"/>
    <id>http://dequn.github.io/2016/04/26/java-hbase-java-net-UnknownHostException-jie-jue-fang-an/</id>
    <published>2016-04-26T06:13:18.000Z</published>
    <updated>2017-08-24T15:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在使用 HBase API 执行 Put 操作的时候，进程一直在等待状态，而进行 createTable 和 dropTable的时候均正常，很是郁闷！看了一下 Console 中的信息，报错</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java<span class="selector-class">.net</span><span class="selector-class">.UnknownHostException</span>: unknown host: node2<span class="selector-class">.lreis2306</span> on node2<span class="selector-class">.lreis2306</span>,</div></pre></td></tr></table></figure>
<p>由于node2.lreis2306的机器是我新加进去的，只是改了 hosts 中的配置，经过一番百度后，找到的解决方案：</p>
<ul>
<li>修改/etc/sysconfig/network中 HOSTNAME=与 HOSTS 中对应的机器名一致即可！</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.csdn.net/chaijunkun/article/details/44238163" target="_blank" rel="external">http://blog.csdn.net/chaijunkun/article/details/44238163</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在使用 HBase API 执行 Put 操作的时候，进程一直在等待状态，而进行 createTable 和 dropTable的时候均正常，很是郁闷！看了一下 Console 中的信息，报错&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;
    
    </summary>
    
      <category term="HBase" scheme="http://dequn.github.io/categories/HBase/"/>
    
    
      <category term="HBase" scheme="http://dequn.github.io/tags/HBase/"/>
    
  </entry>
  
</feed>
